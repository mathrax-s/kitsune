

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 17 17:38:35 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	psect	text67,local,class=CODE,merge=1,delta=2
    86                           	psect	text68,local,class=CODE,merge=1,delta=2
    87                           	psect	text69,local,class=CODE,merge=1,delta=2
    88                           	psect	text70,local,class=CODE,merge=1,delta=2
    89                           	psect	text71,local,class=CODE,merge=1,delta=2
    90                           	psect	text72,local,class=CODE,merge=1,delta=2
    91                           	psect	text73,local,class=CODE,merge=1,delta=2
    92                           	psect	text74,local,class=CODE,merge=1,delta=2
    93                           	psect	text75,local,class=CODE,merge=1,delta=2
    94                           	psect	text76,local,class=CODE,merge=1,delta=2
    95                           	psect	text77,local,class=CODE,merge=1,delta=2
    96                           	psect	text78,local,class=CODE,merge=1,delta=2
    97                           	psect	text79,local,class=CODE,merge=1,delta=2
    98                           	dabs	1,0x620,48
    99                           	dabs	1,0x5C0,48
   100                           	dabs	1,0x2390,0,_mtouch_button
   101                           	dabs	1,0x7E,2
   102  0000                     
   103                           ; Version 2.05
   104                           ; Generated 20/12/2018 GMT
   105                           ; 
   106                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution.
   120                           ; 
   121                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   122                           ;        software without specific prior written permission.
   123                           ; 
   124                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   125                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   126                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   127                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   128                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   129                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   130                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   131                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   132                           ; 
   133                           ; 
   134                           ; Code-generator required, PIC16F1705 Definitions
   135                           ; 
   136                           ; SFR Addresses
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000E                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  008C                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0095                     	;# 
   169  0096                     	;# 
   170  0097                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  009F                     	;# 
   180  010C                     	;# 
   181  010E                     	;# 
   182  0111                     	;# 
   183  0112                     	;# 
   184  0113                     	;# 
   185  0114                     	;# 
   186  0115                     	;# 
   187  0116                     	;# 
   188  0117                     	;# 
   189  0118                     	;# 
   190  0119                     	;# 
   191  011C                     	;# 
   192  018C                     	;# 
   193  018E                     	;# 
   194  0191                     	;# 
   195  0191                     	;# 
   196  0192                     	;# 
   197  0193                     	;# 
   198  0193                     	;# 
   199  0194                     	;# 
   200  0195                     	;# 
   201  0196                     	;# 
   202  0197                     	;# 
   203  0199                     	;# 
   204  0199                     	;# 
   205  0199                     	;# 
   206  019A                     	;# 
   207  019A                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019C                     	;# 
   215  019C                     	;# 
   216  019C                     	;# 
   217  019D                     	;# 
   218  019D                     	;# 
   219  019D                     	;# 
   220  019E                     	;# 
   221  019E                     	;# 
   222  019E                     	;# 
   223  019F                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  019F                     	;# 
   227  019F                     	;# 
   228  020C                     	;# 
   229  020E                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0216                     	;# 
   243  0216                     	;# 
   244  0217                     	;# 
   245  0217                     	;# 
   246  028C                     	;# 
   247  028E                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0293                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  029A                     	;# 
   258  029E                     	;# 
   259  030C                     	;# 
   260  030E                     	;# 
   261  038C                     	;# 
   262  038E                     	;# 
   263  0391                     	;# 
   264  0392                     	;# 
   265  0393                     	;# 
   266  0397                     	;# 
   267  0398                     	;# 
   268  0399                     	;# 
   269  0415                     	;# 
   270  0416                     	;# 
   271  0417                     	;# 
   272  041C                     	;# 
   273  041D                     	;# 
   274  041E                     	;# 
   275  0511                     	;# 
   276  0515                     	;# 
   277  0617                     	;# 
   278  0618                     	;# 
   279  0619                     	;# 
   280  0619                     	;# 
   281  061A                     	;# 
   282  061B                     	;# 
   283  061C                     	;# 
   284  061C                     	;# 
   285  0691                     	;# 
   286  0692                     	;# 
   287  0693                     	;# 
   288  0694                     	;# 
   289  0695                     	;# 
   290  0696                     	;# 
   291  0697                     	;# 
   292  0698                     	;# 
   293  0699                     	;# 
   294  069A                     	;# 
   295  069B                     	;# 
   296  069C                     	;# 
   297  069D                     	;# 
   298  069E                     	;# 
   299  069F                     	;# 
   300  0E0F                     	;# 
   301  0E10                     	;# 
   302  0E11                     	;# 
   303  0E12                     	;# 
   304  0E13                     	;# 
   305  0E14                     	;# 
   306  0E15                     	;# 
   307  0E17                     	;# 
   308  0E20                     	;# 
   309  0E21                     	;# 
   310  0E22                     	;# 
   311  0E24                     	;# 
   312  0E25                     	;# 
   313  0E28                     	;# 
   314  0E29                     	;# 
   315  0E2A                     	;# 
   316  0E2B                     	;# 
   317  0E90                     	;# 
   318  0E91                     	;# 
   319  0E92                     	;# 
   320  0E94                     	;# 
   321  0E95                     	;# 
   322  0EA0                     	;# 
   323  0EA1                     	;# 
   324  0EA2                     	;# 
   325  0EA3                     	;# 
   326  0EA4                     	;# 
   327  0EA5                     	;# 
   328  0F0F                     	;# 
   329  0F10                     	;# 
   330  0F11                     	;# 
   331  0F12                     	;# 
   332  0F13                     	;# 
   333  0F14                     	;# 
   334  0F15                     	;# 
   335  0F16                     	;# 
   336  0F17                     	;# 
   337  0F18                     	;# 
   338  0F19                     	;# 
   339  0F1A                     	;# 
   340  0F1B                     	;# 
   341  0F1C                     	;# 
   342  0F1D                     	;# 
   343  0F1E                     	;# 
   344  0F1F                     	;# 
   345  0F20                     	;# 
   346  0F21                     	;# 
   347  0F22                     	;# 
   348  0F23                     	;# 
   349  0F24                     	;# 
   350  0F25                     	;# 
   351  0F26                     	;# 
   352  0F27                     	;# 
   353  0F28                     	;# 
   354  0F29                     	;# 
   355  0F2A                     	;# 
   356  0F2B                     	;# 
   357  0F2C                     	;# 
   358  0F2D                     	;# 
   359  0F9E                     	;# 
   360  0FE4                     	;# 
   361  0FE5                     	;# 
   362  0FE6                     	;# 
   363  0FE7                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEB                     	;# 
   368  0FED                     	;# 
   369  0FEE                     	;# 
   370  0FEF                     	;# 
   371  0000                     	;# 
   372  0001                     	;# 
   373  0002                     	;# 
   374  0003                     	;# 
   375  0004                     	;# 
   376  0005                     	;# 
   377  0006                     	;# 
   378  0007                     	;# 
   379  0008                     	;# 
   380  0009                     	;# 
   381  000A                     	;# 
   382  000B                     	;# 
   383  000C                     	;# 
   384  000E                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0013                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  008C                     	;# 
   398  008E                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  010C                     	;# 
   415  010E                     	;# 
   416  0111                     	;# 
   417  0112                     	;# 
   418  0113                     	;# 
   419  0114                     	;# 
   420  0115                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  0118                     	;# 
   424  0119                     	;# 
   425  011C                     	;# 
   426  018C                     	;# 
   427  018E                     	;# 
   428  0191                     	;# 
   429  0191                     	;# 
   430  0192                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0194                     	;# 
   434  0195                     	;# 
   435  0196                     	;# 
   436  0197                     	;# 
   437  0199                     	;# 
   438  0199                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019A                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019C                     	;# 
   451  019D                     	;# 
   452  019D                     	;# 
   453  019D                     	;# 
   454  019E                     	;# 
   455  019E                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  019F                     	;# 
   459  019F                     	;# 
   460  019F                     	;# 
   461  019F                     	;# 
   462  020C                     	;# 
   463  020E                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0216                     	;# 
   477  0216                     	;# 
   478  0217                     	;# 
   479  0217                     	;# 
   480  028C                     	;# 
   481  028E                     	;# 
   482  0291                     	;# 
   483  0291                     	;# 
   484  0292                     	;# 
   485  0293                     	;# 
   486  0293                     	;# 
   487  0298                     	;# 
   488  0298                     	;# 
   489  0299                     	;# 
   490  029A                     	;# 
   491  029A                     	;# 
   492  029E                     	;# 
   493  030C                     	;# 
   494  030E                     	;# 
   495  038C                     	;# 
   496  038E                     	;# 
   497  0391                     	;# 
   498  0392                     	;# 
   499  0393                     	;# 
   500  0397                     	;# 
   501  0398                     	;# 
   502  0399                     	;# 
   503  0415                     	;# 
   504  0416                     	;# 
   505  0417                     	;# 
   506  041C                     	;# 
   507  041D                     	;# 
   508  041E                     	;# 
   509  0511                     	;# 
   510  0515                     	;# 
   511  0617                     	;# 
   512  0618                     	;# 
   513  0619                     	;# 
   514  0619                     	;# 
   515  061A                     	;# 
   516  061B                     	;# 
   517  061C                     	;# 
   518  061C                     	;# 
   519  0691                     	;# 
   520  0692                     	;# 
   521  0693                     	;# 
   522  0694                     	;# 
   523  0695                     	;# 
   524  0696                     	;# 
   525  0697                     	;# 
   526  0698                     	;# 
   527  0699                     	;# 
   528  069A                     	;# 
   529  069B                     	;# 
   530  069C                     	;# 
   531  069D                     	;# 
   532  069E                     	;# 
   533  069F                     	;# 
   534  0E0F                     	;# 
   535  0E10                     	;# 
   536  0E11                     	;# 
   537  0E12                     	;# 
   538  0E13                     	;# 
   539  0E14                     	;# 
   540  0E15                     	;# 
   541  0E17                     	;# 
   542  0E20                     	;# 
   543  0E21                     	;# 
   544  0E22                     	;# 
   545  0E24                     	;# 
   546  0E25                     	;# 
   547  0E28                     	;# 
   548  0E29                     	;# 
   549  0E2A                     	;# 
   550  0E2B                     	;# 
   551  0E90                     	;# 
   552  0E91                     	;# 
   553  0E92                     	;# 
   554  0E94                     	;# 
   555  0E95                     	;# 
   556  0EA0                     	;# 
   557  0EA1                     	;# 
   558  0EA2                     	;# 
   559  0EA3                     	;# 
   560  0EA4                     	;# 
   561  0EA5                     	;# 
   562  0F0F                     	;# 
   563  0F10                     	;# 
   564  0F11                     	;# 
   565  0F12                     	;# 
   566  0F13                     	;# 
   567  0F14                     	;# 
   568  0F15                     	;# 
   569  0F16                     	;# 
   570  0F17                     	;# 
   571  0F18                     	;# 
   572  0F19                     	;# 
   573  0F1A                     	;# 
   574  0F1B                     	;# 
   575  0F1C                     	;# 
   576  0F1D                     	;# 
   577  0F1E                     	;# 
   578  0F1F                     	;# 
   579  0F20                     	;# 
   580  0F21                     	;# 
   581  0F22                     	;# 
   582  0F23                     	;# 
   583  0F24                     	;# 
   584  0F25                     	;# 
   585  0F26                     	;# 
   586  0F27                     	;# 
   587  0F28                     	;# 
   588  0F29                     	;# 
   589  0F2A                     	;# 
   590  0F2B                     	;# 
   591  0F2C                     	;# 
   592  0F2D                     	;# 
   593  0F9E                     	;# 
   594  0FE4                     	;# 
   595  0FE5                     	;# 
   596  0FE6                     	;# 
   597  0FE7                     	;# 
   598  0FE8                     	;# 
   599  0FE9                     	;# 
   600  0FEA                     	;# 
   601  0FEB                     	;# 
   602  0FED                     	;# 
   603  0FEE                     	;# 
   604  0FEF                     	;# 
   605  0000                     	;# 
   606  0001                     	;# 
   607  0002                     	;# 
   608  0003                     	;# 
   609  0004                     	;# 
   610  0005                     	;# 
   611  0006                     	;# 
   612  0007                     	;# 
   613  0008                     	;# 
   614  0009                     	;# 
   615  000A                     	;# 
   616  000B                     	;# 
   617  000C                     	;# 
   618  000E                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0013                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0016                     	;# 
   625  0017                     	;# 
   626  0018                     	;# 
   627  0019                     	;# 
   628  001A                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  008C                     	;# 
   632  008E                     	;# 
   633  0091                     	;# 
   634  0092                     	;# 
   635  0093                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0098                     	;# 
   640  0099                     	;# 
   641  009A                     	;# 
   642  009B                     	;# 
   643  009B                     	;# 
   644  009C                     	;# 
   645  009D                     	;# 
   646  009E                     	;# 
   647  009F                     	;# 
   648  010C                     	;# 
   649  010E                     	;# 
   650  0111                     	;# 
   651  0112                     	;# 
   652  0113                     	;# 
   653  0114                     	;# 
   654  0115                     	;# 
   655  0116                     	;# 
   656  0117                     	;# 
   657  0118                     	;# 
   658  0119                     	;# 
   659  011C                     	;# 
   660  018C                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  0199                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019A                     	;# 
   676  019A                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019B                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019C                     	;# 
   683  019C                     	;# 
   684  019C                     	;# 
   685  019D                     	;# 
   686  019D                     	;# 
   687  019D                     	;# 
   688  019E                     	;# 
   689  019E                     	;# 
   690  019E                     	;# 
   691  019F                     	;# 
   692  019F                     	;# 
   693  019F                     	;# 
   694  019F                     	;# 
   695  019F                     	;# 
   696  020C                     	;# 
   697  020E                     	;# 
   698  0211                     	;# 
   699  0211                     	;# 
   700  0212                     	;# 
   701  0212                     	;# 
   702  0213                     	;# 
   703  0213                     	;# 
   704  0214                     	;# 
   705  0214                     	;# 
   706  0215                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0216                     	;# 
   711  0216                     	;# 
   712  0217                     	;# 
   713  0217                     	;# 
   714  028C                     	;# 
   715  028E                     	;# 
   716  0291                     	;# 
   717  0291                     	;# 
   718  0292                     	;# 
   719  0293                     	;# 
   720  0293                     	;# 
   721  0298                     	;# 
   722  0298                     	;# 
   723  0299                     	;# 
   724  029A                     	;# 
   725  029A                     	;# 
   726  029E                     	;# 
   727  030C                     	;# 
   728  030E                     	;# 
   729  038C                     	;# 
   730  038E                     	;# 
   731  0391                     	;# 
   732  0392                     	;# 
   733  0393                     	;# 
   734  0397                     	;# 
   735  0398                     	;# 
   736  0399                     	;# 
   737  0415                     	;# 
   738  0416                     	;# 
   739  0417                     	;# 
   740  041C                     	;# 
   741  041D                     	;# 
   742  041E                     	;# 
   743  0511                     	;# 
   744  0515                     	;# 
   745  0617                     	;# 
   746  0618                     	;# 
   747  0619                     	;# 
   748  0619                     	;# 
   749  061A                     	;# 
   750  061B                     	;# 
   751  061C                     	;# 
   752  061C                     	;# 
   753  0691                     	;# 
   754  0692                     	;# 
   755  0693                     	;# 
   756  0694                     	;# 
   757  0695                     	;# 
   758  0696                     	;# 
   759  0697                     	;# 
   760  0698                     	;# 
   761  0699                     	;# 
   762  069A                     	;# 
   763  069B                     	;# 
   764  069C                     	;# 
   765  069D                     	;# 
   766  069E                     	;# 
   767  069F                     	;# 
   768  0E0F                     	;# 
   769  0E10                     	;# 
   770  0E11                     	;# 
   771  0E12                     	;# 
   772  0E13                     	;# 
   773  0E14                     	;# 
   774  0E15                     	;# 
   775  0E17                     	;# 
   776  0E20                     	;# 
   777  0E21                     	;# 
   778  0E22                     	;# 
   779  0E24                     	;# 
   780  0E25                     	;# 
   781  0E28                     	;# 
   782  0E29                     	;# 
   783  0E2A                     	;# 
   784  0E2B                     	;# 
   785  0E90                     	;# 
   786  0E91                     	;# 
   787  0E92                     	;# 
   788  0E94                     	;# 
   789  0E95                     	;# 
   790  0EA0                     	;# 
   791  0EA1                     	;# 
   792  0EA2                     	;# 
   793  0EA3                     	;# 
   794  0EA4                     	;# 
   795  0EA5                     	;# 
   796  0F0F                     	;# 
   797  0F10                     	;# 
   798  0F11                     	;# 
   799  0F12                     	;# 
   800  0F13                     	;# 
   801  0F14                     	;# 
   802  0F15                     	;# 
   803  0F16                     	;# 
   804  0F17                     	;# 
   805  0F18                     	;# 
   806  0F19                     	;# 
   807  0F1A                     	;# 
   808  0F1B                     	;# 
   809  0F1C                     	;# 
   810  0F1D                     	;# 
   811  0F1E                     	;# 
   812  0F1F                     	;# 
   813  0F20                     	;# 
   814  0F21                     	;# 
   815  0F22                     	;# 
   816  0F23                     	;# 
   817  0F24                     	;# 
   818  0F25                     	;# 
   819  0F26                     	;# 
   820  0F27                     	;# 
   821  0F28                     	;# 
   822  0F29                     	;# 
   823  0F2A                     	;# 
   824  0F2B                     	;# 
   825  0F2C                     	;# 
   826  0F2D                     	;# 
   827  0F9E                     	;# 
   828  0FE4                     	;# 
   829  0FE5                     	;# 
   830  0FE6                     	;# 
   831  0FE7                     	;# 
   832  0FE8                     	;# 
   833  0FE9                     	;# 
   834  0FEA                     	;# 
   835  0FEB                     	;# 
   836  0FED                     	;# 
   837  0FEE                     	;# 
   838  0FEF                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0008                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000E                     	;# 
   853  0011                     	;# 
   854  0012                     	;# 
   855  0013                     	;# 
   856  0015                     	;# 
   857  0016                     	;# 
   858  0016                     	;# 
   859  0017                     	;# 
   860  0018                     	;# 
   861  0019                     	;# 
   862  001A                     	;# 
   863  001B                     	;# 
   864  001C                     	;# 
   865  008C                     	;# 
   866  008E                     	;# 
   867  0091                     	;# 
   868  0092                     	;# 
   869  0093                     	;# 
   870  0095                     	;# 
   871  0096                     	;# 
   872  0097                     	;# 
   873  0098                     	;# 
   874  0099                     	;# 
   875  009A                     	;# 
   876  009B                     	;# 
   877  009B                     	;# 
   878  009C                     	;# 
   879  009D                     	;# 
   880  009E                     	;# 
   881  009F                     	;# 
   882  010C                     	;# 
   883  010E                     	;# 
   884  0111                     	;# 
   885  0112                     	;# 
   886  0113                     	;# 
   887  0114                     	;# 
   888  0115                     	;# 
   889  0116                     	;# 
   890  0117                     	;# 
   891  0118                     	;# 
   892  0119                     	;# 
   893  011C                     	;# 
   894  018C                     	;# 
   895  018E                     	;# 
   896  0191                     	;# 
   897  0191                     	;# 
   898  0192                     	;# 
   899  0193                     	;# 
   900  0193                     	;# 
   901  0194                     	;# 
   902  0195                     	;# 
   903  0196                     	;# 
   904  0197                     	;# 
   905  0199                     	;# 
   906  0199                     	;# 
   907  0199                     	;# 
   908  019A                     	;# 
   909  019A                     	;# 
   910  019A                     	;# 
   911  019B                     	;# 
   912  019B                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019C                     	;# 
   917  019C                     	;# 
   918  019C                     	;# 
   919  019D                     	;# 
   920  019D                     	;# 
   921  019D                     	;# 
   922  019E                     	;# 
   923  019E                     	;# 
   924  019E                     	;# 
   925  019F                     	;# 
   926  019F                     	;# 
   927  019F                     	;# 
   928  019F                     	;# 
   929  019F                     	;# 
   930  020C                     	;# 
   931  020E                     	;# 
   932  0211                     	;# 
   933  0211                     	;# 
   934  0212                     	;# 
   935  0212                     	;# 
   936  0213                     	;# 
   937  0213                     	;# 
   938  0214                     	;# 
   939  0214                     	;# 
   940  0215                     	;# 
   941  0215                     	;# 
   942  0215                     	;# 
   943  0215                     	;# 
   944  0216                     	;# 
   945  0216                     	;# 
   946  0217                     	;# 
   947  0217                     	;# 
   948  028C                     	;# 
   949  028E                     	;# 
   950  0291                     	;# 
   951  0291                     	;# 
   952  0292                     	;# 
   953  0293                     	;# 
   954  0293                     	;# 
   955  0298                     	;# 
   956  0298                     	;# 
   957  0299                     	;# 
   958  029A                     	;# 
   959  029A                     	;# 
   960  029E                     	;# 
   961  030C                     	;# 
   962  030E                     	;# 
   963  038C                     	;# 
   964  038E                     	;# 
   965  0391                     	;# 
   966  0392                     	;# 
   967  0393                     	;# 
   968  0397                     	;# 
   969  0398                     	;# 
   970  0399                     	;# 
   971  0415                     	;# 
   972  0416                     	;# 
   973  0417                     	;# 
   974  041C                     	;# 
   975  041D                     	;# 
   976  041E                     	;# 
   977  0511                     	;# 
   978  0515                     	;# 
   979  0617                     	;# 
   980  0618                     	;# 
   981  0619                     	;# 
   982  0619                     	;# 
   983  061A                     	;# 
   984  061B                     	;# 
   985  061C                     	;# 
   986  061C                     	;# 
   987  0691                     	;# 
   988  0692                     	;# 
   989  0693                     	;# 
   990  0694                     	;# 
   991  0695                     	;# 
   992  0696                     	;# 
   993  0697                     	;# 
   994  0698                     	;# 
   995  0699                     	;# 
   996  069A                     	;# 
   997  069B                     	;# 
   998  069C                     	;# 
   999  069D                     	;# 
  1000  069E                     	;# 
  1001  069F                     	;# 
  1002  0E0F                     	;# 
  1003  0E10                     	;# 
  1004  0E11                     	;# 
  1005  0E12                     	;# 
  1006  0E13                     	;# 
  1007  0E14                     	;# 
  1008  0E15                     	;# 
  1009  0E17                     	;# 
  1010  0E20                     	;# 
  1011  0E21                     	;# 
  1012  0E22                     	;# 
  1013  0E24                     	;# 
  1014  0E25                     	;# 
  1015  0E28                     	;# 
  1016  0E29                     	;# 
  1017  0E2A                     	;# 
  1018  0E2B                     	;# 
  1019  0E90                     	;# 
  1020  0E91                     	;# 
  1021  0E92                     	;# 
  1022  0E94                     	;# 
  1023  0E95                     	;# 
  1024  0EA0                     	;# 
  1025  0EA1                     	;# 
  1026  0EA2                     	;# 
  1027  0EA3                     	;# 
  1028  0EA4                     	;# 
  1029  0EA5                     	;# 
  1030  0F0F                     	;# 
  1031  0F10                     	;# 
  1032  0F11                     	;# 
  1033  0F12                     	;# 
  1034  0F13                     	;# 
  1035  0F14                     	;# 
  1036  0F15                     	;# 
  1037  0F16                     	;# 
  1038  0F17                     	;# 
  1039  0F18                     	;# 
  1040  0F19                     	;# 
  1041  0F1A                     	;# 
  1042  0F1B                     	;# 
  1043  0F1C                     	;# 
  1044  0F1D                     	;# 
  1045  0F1E                     	;# 
  1046  0F1F                     	;# 
  1047  0F20                     	;# 
  1048  0F21                     	;# 
  1049  0F22                     	;# 
  1050  0F23                     	;# 
  1051  0F24                     	;# 
  1052  0F25                     	;# 
  1053  0F26                     	;# 
  1054  0F27                     	;# 
  1055  0F28                     	;# 
  1056  0F29                     	;# 
  1057  0F2A                     	;# 
  1058  0F2B                     	;# 
  1059  0F2C                     	;# 
  1060  0F2D                     	;# 
  1061  0F9E                     	;# 
  1062  0FE4                     	;# 
  1063  0FE5                     	;# 
  1064  0FE6                     	;# 
  1065  0FE7                     	;# 
  1066  0FE8                     	;# 
  1067  0FE9                     	;# 
  1068  0FEA                     	;# 
  1069  0FEB                     	;# 
  1070  0FED                     	;# 
  1071  0FEE                     	;# 
  1072  0FEF                     	;# 
  1073  0000                     	;# 
  1074  0001                     	;# 
  1075  0002                     	;# 
  1076  0003                     	;# 
  1077  0004                     	;# 
  1078  0005                     	;# 
  1079  0006                     	;# 
  1080  0007                     	;# 
  1081  0008                     	;# 
  1082  0009                     	;# 
  1083  000A                     	;# 
  1084  000B                     	;# 
  1085  000C                     	;# 
  1086  000E                     	;# 
  1087  0011                     	;# 
  1088  0012                     	;# 
  1089  0013                     	;# 
  1090  0015                     	;# 
  1091  0016                     	;# 
  1092  0016                     	;# 
  1093  0017                     	;# 
  1094  0018                     	;# 
  1095  0019                     	;# 
  1096  001A                     	;# 
  1097  001B                     	;# 
  1098  001C                     	;# 
  1099  008C                     	;# 
  1100  008E                     	;# 
  1101  0091                     	;# 
  1102  0092                     	;# 
  1103  0093                     	;# 
  1104  0095                     	;# 
  1105  0096                     	;# 
  1106  0097                     	;# 
  1107  0098                     	;# 
  1108  0099                     	;# 
  1109  009A                     	;# 
  1110  009B                     	;# 
  1111  009B                     	;# 
  1112  009C                     	;# 
  1113  009D                     	;# 
  1114  009E                     	;# 
  1115  009F                     	;# 
  1116  010C                     	;# 
  1117  010E                     	;# 
  1118  0111                     	;# 
  1119  0112                     	;# 
  1120  0113                     	;# 
  1121  0114                     	;# 
  1122  0115                     	;# 
  1123  0116                     	;# 
  1124  0117                     	;# 
  1125  0118                     	;# 
  1126  0119                     	;# 
  1127  011C                     	;# 
  1128  018C                     	;# 
  1129  018E                     	;# 
  1130  0191                     	;# 
  1131  0191                     	;# 
  1132  0192                     	;# 
  1133  0193                     	;# 
  1134  0193                     	;# 
  1135  0194                     	;# 
  1136  0195                     	;# 
  1137  0196                     	;# 
  1138  0197                     	;# 
  1139  0199                     	;# 
  1140  0199                     	;# 
  1141  0199                     	;# 
  1142  019A                     	;# 
  1143  019A                     	;# 
  1144  019A                     	;# 
  1145  019B                     	;# 
  1146  019B                     	;# 
  1147  019B                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019C                     	;# 
  1151  019C                     	;# 
  1152  019C                     	;# 
  1153  019D                     	;# 
  1154  019D                     	;# 
  1155  019D                     	;# 
  1156  019E                     	;# 
  1157  019E                     	;# 
  1158  019E                     	;# 
  1159  019F                     	;# 
  1160  019F                     	;# 
  1161  019F                     	;# 
  1162  019F                     	;# 
  1163  019F                     	;# 
  1164  020C                     	;# 
  1165  020E                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0215                     	;# 
  1178  0216                     	;# 
  1179  0216                     	;# 
  1180  0217                     	;# 
  1181  0217                     	;# 
  1182  028C                     	;# 
  1183  028E                     	;# 
  1184  0291                     	;# 
  1185  0291                     	;# 
  1186  0292                     	;# 
  1187  0293                     	;# 
  1188  0293                     	;# 
  1189  0298                     	;# 
  1190  0298                     	;# 
  1191  0299                     	;# 
  1192  029A                     	;# 
  1193  029A                     	;# 
  1194  029E                     	;# 
  1195  030C                     	;# 
  1196  030E                     	;# 
  1197  038C                     	;# 
  1198  038E                     	;# 
  1199  0391                     	;# 
  1200  0392                     	;# 
  1201  0393                     	;# 
  1202  0397                     	;# 
  1203  0398                     	;# 
  1204  0399                     	;# 
  1205  0415                     	;# 
  1206  0416                     	;# 
  1207  0417                     	;# 
  1208  041C                     	;# 
  1209  041D                     	;# 
  1210  041E                     	;# 
  1211  0511                     	;# 
  1212  0515                     	;# 
  1213  0617                     	;# 
  1214  0618                     	;# 
  1215  0619                     	;# 
  1216  0619                     	;# 
  1217  061A                     	;# 
  1218  061B                     	;# 
  1219  061C                     	;# 
  1220  061C                     	;# 
  1221  0691                     	;# 
  1222  0692                     	;# 
  1223  0693                     	;# 
  1224  0694                     	;# 
  1225  0695                     	;# 
  1226  0696                     	;# 
  1227  0697                     	;# 
  1228  0698                     	;# 
  1229  0699                     	;# 
  1230  069A                     	;# 
  1231  069B                     	;# 
  1232  069C                     	;# 
  1233  069D                     	;# 
  1234  069E                     	;# 
  1235  069F                     	;# 
  1236  0E0F                     	;# 
  1237  0E10                     	;# 
  1238  0E11                     	;# 
  1239  0E12                     	;# 
  1240  0E13                     	;# 
  1241  0E14                     	;# 
  1242  0E15                     	;# 
  1243  0E17                     	;# 
  1244  0E20                     	;# 
  1245  0E21                     	;# 
  1246  0E22                     	;# 
  1247  0E24                     	;# 
  1248  0E25                     	;# 
  1249  0E28                     	;# 
  1250  0E29                     	;# 
  1251  0E2A                     	;# 
  1252  0E2B                     	;# 
  1253  0E90                     	;# 
  1254  0E91                     	;# 
  1255  0E92                     	;# 
  1256  0E94                     	;# 
  1257  0E95                     	;# 
  1258  0EA0                     	;# 
  1259  0EA1                     	;# 
  1260  0EA2                     	;# 
  1261  0EA3                     	;# 
  1262  0EA4                     	;# 
  1263  0EA5                     	;# 
  1264  0F0F                     	;# 
  1265  0F10                     	;# 
  1266  0F11                     	;# 
  1267  0F12                     	;# 
  1268  0F13                     	;# 
  1269  0F14                     	;# 
  1270  0F15                     	;# 
  1271  0F16                     	;# 
  1272  0F17                     	;# 
  1273  0F18                     	;# 
  1274  0F19                     	;# 
  1275  0F1A                     	;# 
  1276  0F1B                     	;# 
  1277  0F1C                     	;# 
  1278  0F1D                     	;# 
  1279  0F1E                     	;# 
  1280  0F1F                     	;# 
  1281  0F20                     	;# 
  1282  0F21                     	;# 
  1283  0F22                     	;# 
  1284  0F23                     	;# 
  1285  0F24                     	;# 
  1286  0F25                     	;# 
  1287  0F26                     	;# 
  1288  0F27                     	;# 
  1289  0F28                     	;# 
  1290  0F29                     	;# 
  1291  0F2A                     	;# 
  1292  0F2B                     	;# 
  1293  0F2C                     	;# 
  1294  0F2D                     	;# 
  1295  0F9E                     	;# 
  1296  0FE4                     	;# 
  1297  0FE5                     	;# 
  1298  0FE6                     	;# 
  1299  0FE7                     	;# 
  1300  0FE8                     	;# 
  1301  0FE9                     	;# 
  1302  0FEA                     	;# 
  1303  0FEB                     	;# 
  1304  0FED                     	;# 
  1305  0FEE                     	;# 
  1306  0FEF                     	;# 
  1307  0000                     	;# 
  1308  0001                     	;# 
  1309  0002                     	;# 
  1310  0003                     	;# 
  1311  0004                     	;# 
  1312  0005                     	;# 
  1313  0006                     	;# 
  1314  0007                     	;# 
  1315  0008                     	;# 
  1316  0009                     	;# 
  1317  000A                     	;# 
  1318  000B                     	;# 
  1319  000C                     	;# 
  1320  000E                     	;# 
  1321  0011                     	;# 
  1322  0012                     	;# 
  1323  0013                     	;# 
  1324  0015                     	;# 
  1325  0016                     	;# 
  1326  0016                     	;# 
  1327  0017                     	;# 
  1328  0018                     	;# 
  1329  0019                     	;# 
  1330  001A                     	;# 
  1331  001B                     	;# 
  1332  001C                     	;# 
  1333  008C                     	;# 
  1334  008E                     	;# 
  1335  0091                     	;# 
  1336  0092                     	;# 
  1337  0093                     	;# 
  1338  0095                     	;# 
  1339  0096                     	;# 
  1340  0097                     	;# 
  1341  0098                     	;# 
  1342  0099                     	;# 
  1343  009A                     	;# 
  1344  009B                     	;# 
  1345  009B                     	;# 
  1346  009C                     	;# 
  1347  009D                     	;# 
  1348  009E                     	;# 
  1349  009F                     	;# 
  1350  010C                     	;# 
  1351  010E                     	;# 
  1352  0111                     	;# 
  1353  0112                     	;# 
  1354  0113                     	;# 
  1355  0114                     	;# 
  1356  0115                     	;# 
  1357  0116                     	;# 
  1358  0117                     	;# 
  1359  0118                     	;# 
  1360  0119                     	;# 
  1361  011C                     	;# 
  1362  018C                     	;# 
  1363  018E                     	;# 
  1364  0191                     	;# 
  1365  0191                     	;# 
  1366  0192                     	;# 
  1367  0193                     	;# 
  1368  0193                     	;# 
  1369  0194                     	;# 
  1370  0195                     	;# 
  1371  0196                     	;# 
  1372  0197                     	;# 
  1373  0199                     	;# 
  1374  0199                     	;# 
  1375  0199                     	;# 
  1376  019A                     	;# 
  1377  019A                     	;# 
  1378  019A                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019B                     	;# 
  1384  019C                     	;# 
  1385  019C                     	;# 
  1386  019C                     	;# 
  1387  019D                     	;# 
  1388  019D                     	;# 
  1389  019D                     	;# 
  1390  019E                     	;# 
  1391  019E                     	;# 
  1392  019E                     	;# 
  1393  019F                     	;# 
  1394  019F                     	;# 
  1395  019F                     	;# 
  1396  019F                     	;# 
  1397  019F                     	;# 
  1398  020C                     	;# 
  1399  020E                     	;# 
  1400  0211                     	;# 
  1401  0211                     	;# 
  1402  0212                     	;# 
  1403  0212                     	;# 
  1404  0213                     	;# 
  1405  0213                     	;# 
  1406  0214                     	;# 
  1407  0214                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0215                     	;# 
  1411  0215                     	;# 
  1412  0216                     	;# 
  1413  0216                     	;# 
  1414  0217                     	;# 
  1415  0217                     	;# 
  1416  028C                     	;# 
  1417  028E                     	;# 
  1418  0291                     	;# 
  1419  0291                     	;# 
  1420  0292                     	;# 
  1421  0293                     	;# 
  1422  0293                     	;# 
  1423  0298                     	;# 
  1424  0298                     	;# 
  1425  0299                     	;# 
  1426  029A                     	;# 
  1427  029A                     	;# 
  1428  029E                     	;# 
  1429  030C                     	;# 
  1430  030E                     	;# 
  1431  038C                     	;# 
  1432  038E                     	;# 
  1433  0391                     	;# 
  1434  0392                     	;# 
  1435  0393                     	;# 
  1436  0397                     	;# 
  1437  0398                     	;# 
  1438  0399                     	;# 
  1439  0415                     	;# 
  1440  0416                     	;# 
  1441  0417                     	;# 
  1442  041C                     	;# 
  1443  041D                     	;# 
  1444  041E                     	;# 
  1445  0511                     	;# 
  1446  0515                     	;# 
  1447  0617                     	;# 
  1448  0618                     	;# 
  1449  0619                     	;# 
  1450  0619                     	;# 
  1451  061A                     	;# 
  1452  061B                     	;# 
  1453  061C                     	;# 
  1454  061C                     	;# 
  1455  0691                     	;# 
  1456  0692                     	;# 
  1457  0693                     	;# 
  1458  0694                     	;# 
  1459  0695                     	;# 
  1460  0696                     	;# 
  1461  0697                     	;# 
  1462  0698                     	;# 
  1463  0699                     	;# 
  1464  069A                     	;# 
  1465  069B                     	;# 
  1466  069C                     	;# 
  1467  069D                     	;# 
  1468  069E                     	;# 
  1469  069F                     	;# 
  1470  0E0F                     	;# 
  1471  0E10                     	;# 
  1472  0E11                     	;# 
  1473  0E12                     	;# 
  1474  0E13                     	;# 
  1475  0E14                     	;# 
  1476  0E15                     	;# 
  1477  0E17                     	;# 
  1478  0E20                     	;# 
  1479  0E21                     	;# 
  1480  0E22                     	;# 
  1481  0E24                     	;# 
  1482  0E25                     	;# 
  1483  0E28                     	;# 
  1484  0E29                     	;# 
  1485  0E2A                     	;# 
  1486  0E2B                     	;# 
  1487  0E90                     	;# 
  1488  0E91                     	;# 
  1489  0E92                     	;# 
  1490  0E94                     	;# 
  1491  0E95                     	;# 
  1492  0EA0                     	;# 
  1493  0EA1                     	;# 
  1494  0EA2                     	;# 
  1495  0EA3                     	;# 
  1496  0EA4                     	;# 
  1497  0EA5                     	;# 
  1498  0F0F                     	;# 
  1499  0F10                     	;# 
  1500  0F11                     	;# 
  1501  0F12                     	;# 
  1502  0F13                     	;# 
  1503  0F14                     	;# 
  1504  0F15                     	;# 
  1505  0F16                     	;# 
  1506  0F17                     	;# 
  1507  0F18                     	;# 
  1508  0F19                     	;# 
  1509  0F1A                     	;# 
  1510  0F1B                     	;# 
  1511  0F1C                     	;# 
  1512  0F1D                     	;# 
  1513  0F1E                     	;# 
  1514  0F1F                     	;# 
  1515  0F20                     	;# 
  1516  0F21                     	;# 
  1517  0F22                     	;# 
  1518  0F23                     	;# 
  1519  0F24                     	;# 
  1520  0F25                     	;# 
  1521  0F26                     	;# 
  1522  0F27                     	;# 
  1523  0F28                     	;# 
  1524  0F29                     	;# 
  1525  0F2A                     	;# 
  1526  0F2B                     	;# 
  1527  0F2C                     	;# 
  1528  0F2D                     	;# 
  1529  0F9E                     	;# 
  1530  0FE4                     	;# 
  1531  0FE5                     	;# 
  1532  0FE6                     	;# 
  1533  0FE7                     	;# 
  1534  0FE8                     	;# 
  1535  0FE9                     	;# 
  1536  0FEA                     	;# 
  1537  0FEB                     	;# 
  1538  0FED                     	;# 
  1539  0FEE                     	;# 
  1540  0FEF                     	;# 
  1541  0000                     	;# 
  1542  0001                     	;# 
  1543  0002                     	;# 
  1544  0003                     	;# 
  1545  0004                     	;# 
  1546  0005                     	;# 
  1547  0006                     	;# 
  1548  0007                     	;# 
  1549  0008                     	;# 
  1550  0009                     	;# 
  1551  000A                     	;# 
  1552  000B                     	;# 
  1553  000C                     	;# 
  1554  000E                     	;# 
  1555  0011                     	;# 
  1556  0012                     	;# 
  1557  0013                     	;# 
  1558  0015                     	;# 
  1559  0016                     	;# 
  1560  0016                     	;# 
  1561  0017                     	;# 
  1562  0018                     	;# 
  1563  0019                     	;# 
  1564  001A                     	;# 
  1565  001B                     	;# 
  1566  001C                     	;# 
  1567  008C                     	;# 
  1568  008E                     	;# 
  1569  0091                     	;# 
  1570  0092                     	;# 
  1571  0093                     	;# 
  1572  0095                     	;# 
  1573  0096                     	;# 
  1574  0097                     	;# 
  1575  0098                     	;# 
  1576  0099                     	;# 
  1577  009A                     	;# 
  1578  009B                     	;# 
  1579  009B                     	;# 
  1580  009C                     	;# 
  1581  009D                     	;# 
  1582  009E                     	;# 
  1583  009F                     	;# 
  1584  010C                     	;# 
  1585  010E                     	;# 
  1586  0111                     	;# 
  1587  0112                     	;# 
  1588  0113                     	;# 
  1589  0114                     	;# 
  1590  0115                     	;# 
  1591  0116                     	;# 
  1592  0117                     	;# 
  1593  0118                     	;# 
  1594  0119                     	;# 
  1595  011C                     	;# 
  1596  018C                     	;# 
  1597  018E                     	;# 
  1598  0191                     	;# 
  1599  0191                     	;# 
  1600  0192                     	;# 
  1601  0193                     	;# 
  1602  0193                     	;# 
  1603  0194                     	;# 
  1604  0195                     	;# 
  1605  0196                     	;# 
  1606  0197                     	;# 
  1607  0199                     	;# 
  1608  0199                     	;# 
  1609  0199                     	;# 
  1610  019A                     	;# 
  1611  019A                     	;# 
  1612  019A                     	;# 
  1613  019B                     	;# 
  1614  019B                     	;# 
  1615  019B                     	;# 
  1616  019B                     	;# 
  1617  019B                     	;# 
  1618  019C                     	;# 
  1619  019C                     	;# 
  1620  019C                     	;# 
  1621  019D                     	;# 
  1622  019D                     	;# 
  1623  019D                     	;# 
  1624  019E                     	;# 
  1625  019E                     	;# 
  1626  019E                     	;# 
  1627  019F                     	;# 
  1628  019F                     	;# 
  1629  019F                     	;# 
  1630  019F                     	;# 
  1631  019F                     	;# 
  1632  020C                     	;# 
  1633  020E                     	;# 
  1634  0211                     	;# 
  1635  0211                     	;# 
  1636  0212                     	;# 
  1637  0212                     	;# 
  1638  0213                     	;# 
  1639  0213                     	;# 
  1640  0214                     	;# 
  1641  0214                     	;# 
  1642  0215                     	;# 
  1643  0215                     	;# 
  1644  0215                     	;# 
  1645  0215                     	;# 
  1646  0216                     	;# 
  1647  0216                     	;# 
  1648  0217                     	;# 
  1649  0217                     	;# 
  1650  028C                     	;# 
  1651  028E                     	;# 
  1652  0291                     	;# 
  1653  0291                     	;# 
  1654  0292                     	;# 
  1655  0293                     	;# 
  1656  0293                     	;# 
  1657  0298                     	;# 
  1658  0298                     	;# 
  1659  0299                     	;# 
  1660  029A                     	;# 
  1661  029A                     	;# 
  1662  029E                     	;# 
  1663  030C                     	;# 
  1664  030E                     	;# 
  1665  038C                     	;# 
  1666  038E                     	;# 
  1667  0391                     	;# 
  1668  0392                     	;# 
  1669  0393                     	;# 
  1670  0397                     	;# 
  1671  0398                     	;# 
  1672  0399                     	;# 
  1673  0415                     	;# 
  1674  0416                     	;# 
  1675  0417                     	;# 
  1676  041C                     	;# 
  1677  041D                     	;# 
  1678  041E                     	;# 
  1679  0511                     	;# 
  1680  0515                     	;# 
  1681  0617                     	;# 
  1682  0618                     	;# 
  1683  0619                     	;# 
  1684  0619                     	;# 
  1685  061A                     	;# 
  1686  061B                     	;# 
  1687  061C                     	;# 
  1688  061C                     	;# 
  1689  0691                     	;# 
  1690  0692                     	;# 
  1691  0693                     	;# 
  1692  0694                     	;# 
  1693  0695                     	;# 
  1694  0696                     	;# 
  1695  0697                     	;# 
  1696  0698                     	;# 
  1697  0699                     	;# 
  1698  069A                     	;# 
  1699  069B                     	;# 
  1700  069C                     	;# 
  1701  069D                     	;# 
  1702  069E                     	;# 
  1703  069F                     	;# 
  1704  0E0F                     	;# 
  1705  0E10                     	;# 
  1706  0E11                     	;# 
  1707  0E12                     	;# 
  1708  0E13                     	;# 
  1709  0E14                     	;# 
  1710  0E15                     	;# 
  1711  0E17                     	;# 
  1712  0E20                     	;# 
  1713  0E21                     	;# 
  1714  0E22                     	;# 
  1715  0E24                     	;# 
  1716  0E25                     	;# 
  1717  0E28                     	;# 
  1718  0E29                     	;# 
  1719  0E2A                     	;# 
  1720  0E2B                     	;# 
  1721  0E90                     	;# 
  1722  0E91                     	;# 
  1723  0E92                     	;# 
  1724  0E94                     	;# 
  1725  0E95                     	;# 
  1726  0EA0                     	;# 
  1727  0EA1                     	;# 
  1728  0EA2                     	;# 
  1729  0EA3                     	;# 
  1730  0EA4                     	;# 
  1731  0EA5                     	;# 
  1732  0F0F                     	;# 
  1733  0F10                     	;# 
  1734  0F11                     	;# 
  1735  0F12                     	;# 
  1736  0F13                     	;# 
  1737  0F14                     	;# 
  1738  0F15                     	;# 
  1739  0F16                     	;# 
  1740  0F17                     	;# 
  1741  0F18                     	;# 
  1742  0F19                     	;# 
  1743  0F1A                     	;# 
  1744  0F1B                     	;# 
  1745  0F1C                     	;# 
  1746  0F1D                     	;# 
  1747  0F1E                     	;# 
  1748  0F1F                     	;# 
  1749  0F20                     	;# 
  1750  0F21                     	;# 
  1751  0F22                     	;# 
  1752  0F23                     	;# 
  1753  0F24                     	;# 
  1754  0F25                     	;# 
  1755  0F26                     	;# 
  1756  0F27                     	;# 
  1757  0F28                     	;# 
  1758  0F29                     	;# 
  1759  0F2A                     	;# 
  1760  0F2B                     	;# 
  1761  0F2C                     	;# 
  1762  0F2D                     	;# 
  1763  0F9E                     	;# 
  1764  0FE4                     	;# 
  1765  0FE5                     	;# 
  1766  0FE6                     	;# 
  1767  0FE7                     	;# 
  1768  0FE8                     	;# 
  1769  0FE9                     	;# 
  1770  0FEA                     	;# 
  1771  0FEB                     	;# 
  1772  0FED                     	;# 
  1773  0FEE                     	;# 
  1774  0FEF                     	;# 
  1775  0000                     	;# 
  1776  0001                     	;# 
  1777  0002                     	;# 
  1778  0003                     	;# 
  1779  0004                     	;# 
  1780  0005                     	;# 
  1781  0006                     	;# 
  1782  0007                     	;# 
  1783  0008                     	;# 
  1784  0009                     	;# 
  1785  000A                     	;# 
  1786  000B                     	;# 
  1787  000C                     	;# 
  1788  000E                     	;# 
  1789  0011                     	;# 
  1790  0012                     	;# 
  1791  0013                     	;# 
  1792  0015                     	;# 
  1793  0016                     	;# 
  1794  0016                     	;# 
  1795  0017                     	;# 
  1796  0018                     	;# 
  1797  0019                     	;# 
  1798  001A                     	;# 
  1799  001B                     	;# 
  1800  001C                     	;# 
  1801  008C                     	;# 
  1802  008E                     	;# 
  1803  0091                     	;# 
  1804  0092                     	;# 
  1805  0093                     	;# 
  1806  0095                     	;# 
  1807  0096                     	;# 
  1808  0097                     	;# 
  1809  0098                     	;# 
  1810  0099                     	;# 
  1811  009A                     	;# 
  1812  009B                     	;# 
  1813  009B                     	;# 
  1814  009C                     	;# 
  1815  009D                     	;# 
  1816  009E                     	;# 
  1817  009F                     	;# 
  1818  010C                     	;# 
  1819  010E                     	;# 
  1820  0111                     	;# 
  1821  0112                     	;# 
  1822  0113                     	;# 
  1823  0114                     	;# 
  1824  0115                     	;# 
  1825  0116                     	;# 
  1826  0117                     	;# 
  1827  0118                     	;# 
  1828  0119                     	;# 
  1829  011C                     	;# 
  1830  018C                     	;# 
  1831  018E                     	;# 
  1832  0191                     	;# 
  1833  0191                     	;# 
  1834  0192                     	;# 
  1835  0193                     	;# 
  1836  0193                     	;# 
  1837  0194                     	;# 
  1838  0195                     	;# 
  1839  0196                     	;# 
  1840  0197                     	;# 
  1841  0199                     	;# 
  1842  0199                     	;# 
  1843  0199                     	;# 
  1844  019A                     	;# 
  1845  019A                     	;# 
  1846  019A                     	;# 
  1847  019B                     	;# 
  1848  019B                     	;# 
  1849  019B                     	;# 
  1850  019B                     	;# 
  1851  019B                     	;# 
  1852  019C                     	;# 
  1853  019C                     	;# 
  1854  019C                     	;# 
  1855  019D                     	;# 
  1856  019D                     	;# 
  1857  019D                     	;# 
  1858  019E                     	;# 
  1859  019E                     	;# 
  1860  019E                     	;# 
  1861  019F                     	;# 
  1862  019F                     	;# 
  1863  019F                     	;# 
  1864  019F                     	;# 
  1865  019F                     	;# 
  1866  020C                     	;# 
  1867  020E                     	;# 
  1868  0211                     	;# 
  1869  0211                     	;# 
  1870  0212                     	;# 
  1871  0212                     	;# 
  1872  0213                     	;# 
  1873  0213                     	;# 
  1874  0214                     	;# 
  1875  0214                     	;# 
  1876  0215                     	;# 
  1877  0215                     	;# 
  1878  0215                     	;# 
  1879  0215                     	;# 
  1880  0216                     	;# 
  1881  0216                     	;# 
  1882  0217                     	;# 
  1883  0217                     	;# 
  1884  028C                     	;# 
  1885  028E                     	;# 
  1886  0291                     	;# 
  1887  0291                     	;# 
  1888  0292                     	;# 
  1889  0293                     	;# 
  1890  0293                     	;# 
  1891  0298                     	;# 
  1892  0298                     	;# 
  1893  0299                     	;# 
  1894  029A                     	;# 
  1895  029A                     	;# 
  1896  029E                     	;# 
  1897  030C                     	;# 
  1898  030E                     	;# 
  1899  038C                     	;# 
  1900  038E                     	;# 
  1901  0391                     	;# 
  1902  0392                     	;# 
  1903  0393                     	;# 
  1904  0397                     	;# 
  1905  0398                     	;# 
  1906  0399                     	;# 
  1907  0415                     	;# 
  1908  0416                     	;# 
  1909  0417                     	;# 
  1910  041C                     	;# 
  1911  041D                     	;# 
  1912  041E                     	;# 
  1913  0511                     	;# 
  1914  0515                     	;# 
  1915  0617                     	;# 
  1916  0618                     	;# 
  1917  0619                     	;# 
  1918  0619                     	;# 
  1919  061A                     	;# 
  1920  061B                     	;# 
  1921  061C                     	;# 
  1922  061C                     	;# 
  1923  0691                     	;# 
  1924  0692                     	;# 
  1925  0693                     	;# 
  1926  0694                     	;# 
  1927  0695                     	;# 
  1928  0696                     	;# 
  1929  0697                     	;# 
  1930  0698                     	;# 
  1931  0699                     	;# 
  1932  069A                     	;# 
  1933  069B                     	;# 
  1934  069C                     	;# 
  1935  069D                     	;# 
  1936  069E                     	;# 
  1937  069F                     	;# 
  1938  0E0F                     	;# 
  1939  0E10                     	;# 
  1940  0E11                     	;# 
  1941  0E12                     	;# 
  1942  0E13                     	;# 
  1943  0E14                     	;# 
  1944  0E15                     	;# 
  1945  0E17                     	;# 
  1946  0E20                     	;# 
  1947  0E21                     	;# 
  1948  0E22                     	;# 
  1949  0E24                     	;# 
  1950  0E25                     	;# 
  1951  0E28                     	;# 
  1952  0E29                     	;# 
  1953  0E2A                     	;# 
  1954  0E2B                     	;# 
  1955  0E90                     	;# 
  1956  0E91                     	;# 
  1957  0E92                     	;# 
  1958  0E94                     	;# 
  1959  0E95                     	;# 
  1960  0EA0                     	;# 
  1961  0EA1                     	;# 
  1962  0EA2                     	;# 
  1963  0EA3                     	;# 
  1964  0EA4                     	;# 
  1965  0EA5                     	;# 
  1966  0F0F                     	;# 
  1967  0F10                     	;# 
  1968  0F11                     	;# 
  1969  0F12                     	;# 
  1970  0F13                     	;# 
  1971  0F14                     	;# 
  1972  0F15                     	;# 
  1973  0F16                     	;# 
  1974  0F17                     	;# 
  1975  0F18                     	;# 
  1976  0F19                     	;# 
  1977  0F1A                     	;# 
  1978  0F1B                     	;# 
  1979  0F1C                     	;# 
  1980  0F1D                     	;# 
  1981  0F1E                     	;# 
  1982  0F1F                     	;# 
  1983  0F20                     	;# 
  1984  0F21                     	;# 
  1985  0F22                     	;# 
  1986  0F23                     	;# 
  1987  0F24                     	;# 
  1988  0F25                     	;# 
  1989  0F26                     	;# 
  1990  0F27                     	;# 
  1991  0F28                     	;# 
  1992  0F29                     	;# 
  1993  0F2A                     	;# 
  1994  0F2B                     	;# 
  1995  0F2C                     	;# 
  1996  0F2D                     	;# 
  1997  0F9E                     	;# 
  1998  0FE4                     	;# 
  1999  0FE5                     	;# 
  2000  0FE6                     	;# 
  2001  0FE7                     	;# 
  2002  0FE8                     	;# 
  2003  0FE9                     	;# 
  2004  0FEA                     	;# 
  2005  0FEB                     	;# 
  2006  0FED                     	;# 
  2007  0FEE                     	;# 
  2008  0FEF                     	;# 
  2009  0000                     	;# 
  2010  0001                     	;# 
  2011  0002                     	;# 
  2012  0003                     	;# 
  2013  0004                     	;# 
  2014  0005                     	;# 
  2015  0006                     	;# 
  2016  0007                     	;# 
  2017  0008                     	;# 
  2018  0009                     	;# 
  2019  000A                     	;# 
  2020  000B                     	;# 
  2021  000C                     	;# 
  2022  000E                     	;# 
  2023  0011                     	;# 
  2024  0012                     	;# 
  2025  0013                     	;# 
  2026  0015                     	;# 
  2027  0016                     	;# 
  2028  0016                     	;# 
  2029  0017                     	;# 
  2030  0018                     	;# 
  2031  0019                     	;# 
  2032  001A                     	;# 
  2033  001B                     	;# 
  2034  001C                     	;# 
  2035  008C                     	;# 
  2036  008E                     	;# 
  2037  0091                     	;# 
  2038  0092                     	;# 
  2039  0093                     	;# 
  2040  0095                     	;# 
  2041  0096                     	;# 
  2042  0097                     	;# 
  2043  0098                     	;# 
  2044  0099                     	;# 
  2045  009A                     	;# 
  2046  009B                     	;# 
  2047  009B                     	;# 
  2048  009C                     	;# 
  2049  009D                     	;# 
  2050  009E                     	;# 
  2051  009F                     	;# 
  2052  010C                     	;# 
  2053  010E                     	;# 
  2054  0111                     	;# 
  2055  0112                     	;# 
  2056  0113                     	;# 
  2057  0114                     	;# 
  2058  0115                     	;# 
  2059  0116                     	;# 
  2060  0117                     	;# 
  2061  0118                     	;# 
  2062  0119                     	;# 
  2063  011C                     	;# 
  2064  018C                     	;# 
  2065  018E                     	;# 
  2066  0191                     	;# 
  2067  0191                     	;# 
  2068  0192                     	;# 
  2069  0193                     	;# 
  2070  0193                     	;# 
  2071  0194                     	;# 
  2072  0195                     	;# 
  2073  0196                     	;# 
  2074  0197                     	;# 
  2075  0199                     	;# 
  2076  0199                     	;# 
  2077  0199                     	;# 
  2078  019A                     	;# 
  2079  019A                     	;# 
  2080  019A                     	;# 
  2081  019B                     	;# 
  2082  019B                     	;# 
  2083  019B                     	;# 
  2084  019B                     	;# 
  2085  019B                     	;# 
  2086  019C                     	;# 
  2087  019C                     	;# 
  2088  019C                     	;# 
  2089  019D                     	;# 
  2090  019D                     	;# 
  2091  019D                     	;# 
  2092  019E                     	;# 
  2093  019E                     	;# 
  2094  019E                     	;# 
  2095  019F                     	;# 
  2096  019F                     	;# 
  2097  019F                     	;# 
  2098  019F                     	;# 
  2099  019F                     	;# 
  2100  020C                     	;# 
  2101  020E                     	;# 
  2102  0211                     	;# 
  2103  0211                     	;# 
  2104  0212                     	;# 
  2105  0212                     	;# 
  2106  0213                     	;# 
  2107  0213                     	;# 
  2108  0214                     	;# 
  2109  0214                     	;# 
  2110  0215                     	;# 
  2111  0215                     	;# 
  2112  0215                     	;# 
  2113  0215                     	;# 
  2114  0216                     	;# 
  2115  0216                     	;# 
  2116  0217                     	;# 
  2117  0217                     	;# 
  2118  028C                     	;# 
  2119  028E                     	;# 
  2120  0291                     	;# 
  2121  0291                     	;# 
  2122  0292                     	;# 
  2123  0293                     	;# 
  2124  0293                     	;# 
  2125  0298                     	;# 
  2126  0298                     	;# 
  2127  0299                     	;# 
  2128  029A                     	;# 
  2129  029A                     	;# 
  2130  029E                     	;# 
  2131  030C                     	;# 
  2132  030E                     	;# 
  2133  038C                     	;# 
  2134  038E                     	;# 
  2135  0391                     	;# 
  2136  0392                     	;# 
  2137  0393                     	;# 
  2138  0397                     	;# 
  2139  0398                     	;# 
  2140  0399                     	;# 
  2141  0415                     	;# 
  2142  0416                     	;# 
  2143  0417                     	;# 
  2144  041C                     	;# 
  2145  041D                     	;# 
  2146  041E                     	;# 
  2147  0511                     	;# 
  2148  0515                     	;# 
  2149  0617                     	;# 
  2150  0618                     	;# 
  2151  0619                     	;# 
  2152  0619                     	;# 
  2153  061A                     	;# 
  2154  061B                     	;# 
  2155  061C                     	;# 
  2156  061C                     	;# 
  2157  0691                     	;# 
  2158  0692                     	;# 
  2159  0693                     	;# 
  2160  0694                     	;# 
  2161  0695                     	;# 
  2162  0696                     	;# 
  2163  0697                     	;# 
  2164  0698                     	;# 
  2165  0699                     	;# 
  2166  069A                     	;# 
  2167  069B                     	;# 
  2168  069C                     	;# 
  2169  069D                     	;# 
  2170  069E                     	;# 
  2171  069F                     	;# 
  2172  0E0F                     	;# 
  2173  0E10                     	;# 
  2174  0E11                     	;# 
  2175  0E12                     	;# 
  2176  0E13                     	;# 
  2177  0E14                     	;# 
  2178  0E15                     	;# 
  2179  0E17                     	;# 
  2180  0E20                     	;# 
  2181  0E21                     	;# 
  2182  0E22                     	;# 
  2183  0E24                     	;# 
  2184  0E25                     	;# 
  2185  0E28                     	;# 
  2186  0E29                     	;# 
  2187  0E2A                     	;# 
  2188  0E2B                     	;# 
  2189  0E90                     	;# 
  2190  0E91                     	;# 
  2191  0E92                     	;# 
  2192  0E94                     	;# 
  2193  0E95                     	;# 
  2194  0EA0                     	;# 
  2195  0EA1                     	;# 
  2196  0EA2                     	;# 
  2197  0EA3                     	;# 
  2198  0EA4                     	;# 
  2199  0EA5                     	;# 
  2200  0F0F                     	;# 
  2201  0F10                     	;# 
  2202  0F11                     	;# 
  2203  0F12                     	;# 
  2204  0F13                     	;# 
  2205  0F14                     	;# 
  2206  0F15                     	;# 
  2207  0F16                     	;# 
  2208  0F17                     	;# 
  2209  0F18                     	;# 
  2210  0F19                     	;# 
  2211  0F1A                     	;# 
  2212  0F1B                     	;# 
  2213  0F1C                     	;# 
  2214  0F1D                     	;# 
  2215  0F1E                     	;# 
  2216  0F1F                     	;# 
  2217  0F20                     	;# 
  2218  0F21                     	;# 
  2219  0F22                     	;# 
  2220  0F23                     	;# 
  2221  0F24                     	;# 
  2222  0F25                     	;# 
  2223  0F26                     	;# 
  2224  0F27                     	;# 
  2225  0F28                     	;# 
  2226  0F29                     	;# 
  2227  0F2A                     	;# 
  2228  0F2B                     	;# 
  2229  0F2C                     	;# 
  2230  0F2D                     	;# 
  2231  0F9E                     	;# 
  2232  0FE4                     	;# 
  2233  0FE5                     	;# 
  2234  0FE6                     	;# 
  2235  0FE7                     	;# 
  2236  0FE8                     	;# 
  2237  0FE9                     	;# 
  2238  0FEA                     	;# 
  2239  0FEB                     	;# 
  2240  0FED                     	;# 
  2241  0FEE                     	;# 
  2242  0FEF                     	;# 
  2243  0000                     	;# 
  2244  0001                     	;# 
  2245  0002                     	;# 
  2246  0003                     	;# 
  2247  0004                     	;# 
  2248  0005                     	;# 
  2249  0006                     	;# 
  2250  0007                     	;# 
  2251  0008                     	;# 
  2252  0009                     	;# 
  2253  000A                     	;# 
  2254  000B                     	;# 
  2255  000C                     	;# 
  2256  000E                     	;# 
  2257  0011                     	;# 
  2258  0012                     	;# 
  2259  0013                     	;# 
  2260  0015                     	;# 
  2261  0016                     	;# 
  2262  0016                     	;# 
  2263  0017                     	;# 
  2264  0018                     	;# 
  2265  0019                     	;# 
  2266  001A                     	;# 
  2267  001B                     	;# 
  2268  001C                     	;# 
  2269  008C                     	;# 
  2270  008E                     	;# 
  2271  0091                     	;# 
  2272  0092                     	;# 
  2273  0093                     	;# 
  2274  0095                     	;# 
  2275  0096                     	;# 
  2276  0097                     	;# 
  2277  0098                     	;# 
  2278  0099                     	;# 
  2279  009A                     	;# 
  2280  009B                     	;# 
  2281  009B                     	;# 
  2282  009C                     	;# 
  2283  009D                     	;# 
  2284  009E                     	;# 
  2285  009F                     	;# 
  2286  010C                     	;# 
  2287  010E                     	;# 
  2288  0111                     	;# 
  2289  0112                     	;# 
  2290  0113                     	;# 
  2291  0114                     	;# 
  2292  0115                     	;# 
  2293  0116                     	;# 
  2294  0117                     	;# 
  2295  0118                     	;# 
  2296  0119                     	;# 
  2297  011C                     	;# 
  2298  018C                     	;# 
  2299  018E                     	;# 
  2300  0191                     	;# 
  2301  0191                     	;# 
  2302  0192                     	;# 
  2303  0193                     	;# 
  2304  0193                     	;# 
  2305  0194                     	;# 
  2306  0195                     	;# 
  2307  0196                     	;# 
  2308  0197                     	;# 
  2309  0199                     	;# 
  2310  0199                     	;# 
  2311  0199                     	;# 
  2312  019A                     	;# 
  2313  019A                     	;# 
  2314  019A                     	;# 
  2315  019B                     	;# 
  2316  019B                     	;# 
  2317  019B                     	;# 
  2318  019B                     	;# 
  2319  019B                     	;# 
  2320  019C                     	;# 
  2321  019C                     	;# 
  2322  019C                     	;# 
  2323  019D                     	;# 
  2324  019D                     	;# 
  2325  019D                     	;# 
  2326  019E                     	;# 
  2327  019E                     	;# 
  2328  019E                     	;# 
  2329  019F                     	;# 
  2330  019F                     	;# 
  2331  019F                     	;# 
  2332  019F                     	;# 
  2333  019F                     	;# 
  2334  020C                     	;# 
  2335  020E                     	;# 
  2336  0211                     	;# 
  2337  0211                     	;# 
  2338  0212                     	;# 
  2339  0212                     	;# 
  2340  0213                     	;# 
  2341  0213                     	;# 
  2342  0214                     	;# 
  2343  0214                     	;# 
  2344  0215                     	;# 
  2345  0215                     	;# 
  2346  0215                     	;# 
  2347  0215                     	;# 
  2348  0216                     	;# 
  2349  0216                     	;# 
  2350  0217                     	;# 
  2351  0217                     	;# 
  2352  028C                     	;# 
  2353  028E                     	;# 
  2354  0291                     	;# 
  2355  0291                     	;# 
  2356  0292                     	;# 
  2357  0293                     	;# 
  2358  0293                     	;# 
  2359  0298                     	;# 
  2360  0298                     	;# 
  2361  0299                     	;# 
  2362  029A                     	;# 
  2363  029A                     	;# 
  2364  029E                     	;# 
  2365  030C                     	;# 
  2366  030E                     	;# 
  2367  038C                     	;# 
  2368  038E                     	;# 
  2369  0391                     	;# 
  2370  0392                     	;# 
  2371  0393                     	;# 
  2372  0397                     	;# 
  2373  0398                     	;# 
  2374  0399                     	;# 
  2375  0415                     	;# 
  2376  0416                     	;# 
  2377  0417                     	;# 
  2378  041C                     	;# 
  2379  041D                     	;# 
  2380  041E                     	;# 
  2381  0511                     	;# 
  2382  0515                     	;# 
  2383  0617                     	;# 
  2384  0618                     	;# 
  2385  0619                     	;# 
  2386  0619                     	;# 
  2387  061A                     	;# 
  2388  061B                     	;# 
  2389  061C                     	;# 
  2390  061C                     	;# 
  2391  0691                     	;# 
  2392  0692                     	;# 
  2393  0693                     	;# 
  2394  0694                     	;# 
  2395  0695                     	;# 
  2396  0696                     	;# 
  2397  0697                     	;# 
  2398  0698                     	;# 
  2399  0699                     	;# 
  2400  069A                     	;# 
  2401  069B                     	;# 
  2402  069C                     	;# 
  2403  069D                     	;# 
  2404  069E                     	;# 
  2405  069F                     	;# 
  2406  0E0F                     	;# 
  2407  0E10                     	;# 
  2408  0E11                     	;# 
  2409  0E12                     	;# 
  2410  0E13                     	;# 
  2411  0E14                     	;# 
  2412  0E15                     	;# 
  2413  0E17                     	;# 
  2414  0E20                     	;# 
  2415  0E21                     	;# 
  2416  0E22                     	;# 
  2417  0E24                     	;# 
  2418  0E25                     	;# 
  2419  0E28                     	;# 
  2420  0E29                     	;# 
  2421  0E2A                     	;# 
  2422  0E2B                     	;# 
  2423  0E90                     	;# 
  2424  0E91                     	;# 
  2425  0E92                     	;# 
  2426  0E94                     	;# 
  2427  0E95                     	;# 
  2428  0EA0                     	;# 
  2429  0EA1                     	;# 
  2430  0EA2                     	;# 
  2431  0EA3                     	;# 
  2432  0EA4                     	;# 
  2433  0EA5                     	;# 
  2434  0F0F                     	;# 
  2435  0F10                     	;# 
  2436  0F11                     	;# 
  2437  0F12                     	;# 
  2438  0F13                     	;# 
  2439  0F14                     	;# 
  2440  0F15                     	;# 
  2441  0F16                     	;# 
  2442  0F17                     	;# 
  2443  0F18                     	;# 
  2444  0F19                     	;# 
  2445  0F1A                     	;# 
  2446  0F1B                     	;# 
  2447  0F1C                     	;# 
  2448  0F1D                     	;# 
  2449  0F1E                     	;# 
  2450  0F1F                     	;# 
  2451  0F20                     	;# 
  2452  0F21                     	;# 
  2453  0F22                     	;# 
  2454  0F23                     	;# 
  2455  0F24                     	;# 
  2456  0F25                     	;# 
  2457  0F26                     	;# 
  2458  0F27                     	;# 
  2459  0F28                     	;# 
  2460  0F29                     	;# 
  2461  0F2A                     	;# 
  2462  0F2B                     	;# 
  2463  0F2C                     	;# 
  2464  0F2D                     	;# 
  2465  0F9E                     	;# 
  2466  0FE4                     	;# 
  2467  0FE5                     	;# 
  2468  0FE6                     	;# 
  2469  0FE7                     	;# 
  2470  0FE8                     	;# 
  2471  0FE9                     	;# 
  2472  0FEA                     	;# 
  2473  0FEB                     	;# 
  2474  0FED                     	;# 
  2475  0FEE                     	;# 
  2476  0FEF                     	;# 
  2477  0000                     	;# 
  2478  0001                     	;# 
  2479  0002                     	;# 
  2480  0003                     	;# 
  2481  0004                     	;# 
  2482  0005                     	;# 
  2483  0006                     	;# 
  2484  0007                     	;# 
  2485  0008                     	;# 
  2486  0009                     	;# 
  2487  000A                     	;# 
  2488  000B                     	;# 
  2489  000C                     	;# 
  2490  000E                     	;# 
  2491  0011                     	;# 
  2492  0012                     	;# 
  2493  0013                     	;# 
  2494  0015                     	;# 
  2495  0016                     	;# 
  2496  0016                     	;# 
  2497  0017                     	;# 
  2498  0018                     	;# 
  2499  0019                     	;# 
  2500  001A                     	;# 
  2501  001B                     	;# 
  2502  001C                     	;# 
  2503  008C                     	;# 
  2504  008E                     	;# 
  2505  0091                     	;# 
  2506  0092                     	;# 
  2507  0093                     	;# 
  2508  0095                     	;# 
  2509  0096                     	;# 
  2510  0097                     	;# 
  2511  0098                     	;# 
  2512  0099                     	;# 
  2513  009A                     	;# 
  2514  009B                     	;# 
  2515  009B                     	;# 
  2516  009C                     	;# 
  2517  009D                     	;# 
  2518  009E                     	;# 
  2519  009F                     	;# 
  2520  010C                     	;# 
  2521  010E                     	;# 
  2522  0111                     	;# 
  2523  0112                     	;# 
  2524  0113                     	;# 
  2525  0114                     	;# 
  2526  0115                     	;# 
  2527  0116                     	;# 
  2528  0117                     	;# 
  2529  0118                     	;# 
  2530  0119                     	;# 
  2531  011C                     	;# 
  2532  018C                     	;# 
  2533  018E                     	;# 
  2534  0191                     	;# 
  2535  0191                     	;# 
  2536  0192                     	;# 
  2537  0193                     	;# 
  2538  0193                     	;# 
  2539  0194                     	;# 
  2540  0195                     	;# 
  2541  0196                     	;# 
  2542  0197                     	;# 
  2543  0199                     	;# 
  2544  0199                     	;# 
  2545  0199                     	;# 
  2546  019A                     	;# 
  2547  019A                     	;# 
  2548  019A                     	;# 
  2549  019B                     	;# 
  2550  019B                     	;# 
  2551  019B                     	;# 
  2552  019B                     	;# 
  2553  019B                     	;# 
  2554  019C                     	;# 
  2555  019C                     	;# 
  2556  019C                     	;# 
  2557  019D                     	;# 
  2558  019D                     	;# 
  2559  019D                     	;# 
  2560  019E                     	;# 
  2561  019E                     	;# 
  2562  019E                     	;# 
  2563  019F                     	;# 
  2564  019F                     	;# 
  2565  019F                     	;# 
  2566  019F                     	;# 
  2567  019F                     	;# 
  2568  020C                     	;# 
  2569  020E                     	;# 
  2570  0211                     	;# 
  2571  0211                     	;# 
  2572  0212                     	;# 
  2573  0212                     	;# 
  2574  0213                     	;# 
  2575  0213                     	;# 
  2576  0214                     	;# 
  2577  0214                     	;# 
  2578  0215                     	;# 
  2579  0215                     	;# 
  2580  0215                     	;# 
  2581  0215                     	;# 
  2582  0216                     	;# 
  2583  0216                     	;# 
  2584  0217                     	;# 
  2585  0217                     	;# 
  2586  028C                     	;# 
  2587  028E                     	;# 
  2588  0291                     	;# 
  2589  0291                     	;# 
  2590  0292                     	;# 
  2591  0293                     	;# 
  2592  0293                     	;# 
  2593  0298                     	;# 
  2594  0298                     	;# 
  2595  0299                     	;# 
  2596  029A                     	;# 
  2597  029A                     	;# 
  2598  029E                     	;# 
  2599  030C                     	;# 
  2600  030E                     	;# 
  2601  038C                     	;# 
  2602  038E                     	;# 
  2603  0391                     	;# 
  2604  0392                     	;# 
  2605  0393                     	;# 
  2606  0397                     	;# 
  2607  0398                     	;# 
  2608  0399                     	;# 
  2609  0415                     	;# 
  2610  0416                     	;# 
  2611  0417                     	;# 
  2612  041C                     	;# 
  2613  041D                     	;# 
  2614  041E                     	;# 
  2615  0511                     	;# 
  2616  0515                     	;# 
  2617  0617                     	;# 
  2618  0618                     	;# 
  2619  0619                     	;# 
  2620  0619                     	;# 
  2621  061A                     	;# 
  2622  061B                     	;# 
  2623  061C                     	;# 
  2624  061C                     	;# 
  2625  0691                     	;# 
  2626  0692                     	;# 
  2627  0693                     	;# 
  2628  0694                     	;# 
  2629  0695                     	;# 
  2630  0696                     	;# 
  2631  0697                     	;# 
  2632  0698                     	;# 
  2633  0699                     	;# 
  2634  069A                     	;# 
  2635  069B                     	;# 
  2636  069C                     	;# 
  2637  069D                     	;# 
  2638  069E                     	;# 
  2639  069F                     	;# 
  2640  0E0F                     	;# 
  2641  0E10                     	;# 
  2642  0E11                     	;# 
  2643  0E12                     	;# 
  2644  0E13                     	;# 
  2645  0E14                     	;# 
  2646  0E15                     	;# 
  2647  0E17                     	;# 
  2648  0E20                     	;# 
  2649  0E21                     	;# 
  2650  0E22                     	;# 
  2651  0E24                     	;# 
  2652  0E25                     	;# 
  2653  0E28                     	;# 
  2654  0E29                     	;# 
  2655  0E2A                     	;# 
  2656  0E2B                     	;# 
  2657  0E90                     	;# 
  2658  0E91                     	;# 
  2659  0E92                     	;# 
  2660  0E94                     	;# 
  2661  0E95                     	;# 
  2662  0EA0                     	;# 
  2663  0EA1                     	;# 
  2664  0EA2                     	;# 
  2665  0EA3                     	;# 
  2666  0EA4                     	;# 
  2667  0EA5                     	;# 
  2668  0F0F                     	;# 
  2669  0F10                     	;# 
  2670  0F11                     	;# 
  2671  0F12                     	;# 
  2672  0F13                     	;# 
  2673  0F14                     	;# 
  2674  0F15                     	;# 
  2675  0F16                     	;# 
  2676  0F17                     	;# 
  2677  0F18                     	;# 
  2678  0F19                     	;# 
  2679  0F1A                     	;# 
  2680  0F1B                     	;# 
  2681  0F1C                     	;# 
  2682  0F1D                     	;# 
  2683  0F1E                     	;# 
  2684  0F1F                     	;# 
  2685  0F20                     	;# 
  2686  0F21                     	;# 
  2687  0F22                     	;# 
  2688  0F23                     	;# 
  2689  0F24                     	;# 
  2690  0F25                     	;# 
  2691  0F26                     	;# 
  2692  0F27                     	;# 
  2693  0F28                     	;# 
  2694  0F29                     	;# 
  2695  0F2A                     	;# 
  2696  0F2B                     	;# 
  2697  0F2C                     	;# 
  2698  0F2D                     	;# 
  2699  0F9E                     	;# 
  2700  0FE4                     	;# 
  2701  0FE5                     	;# 
  2702  0FE6                     	;# 
  2703  0FE7                     	;# 
  2704  0FE8                     	;# 
  2705  0FE9                     	;# 
  2706  0FEA                     	;# 
  2707  0FEB                     	;# 
  2708  0FED                     	;# 
  2709  0FEE                     	;# 
  2710  0FEF                     	;_mtouch_button
  2711                           
  2712 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  2713  0000                     
  2714 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  2715  0000                     
  2716 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  2717  0000                     
  2718 ;; Function _TMR4_DefaultInterruptHandler is unused but had its address taken
  2719  0000                     
  2720                           	psect	idataBANK0
  2721  0CDE                     __pidataBANK0:	
  2722                           
  2723                           ;initializer for _Button_StateMachine
  2724  0CDE  349A               	retlw	low _Button_State_Initializing
  2725  0CDF  3403               	retlw	high _Button_State_Initializing
  2726  0CE0  345A               	retlw	low _Button_State_NotPressed
  2727  0CE1  3400               	retlw	high _Button_State_NotPressed
  2728  0CE2  34D4               	retlw	low _Button_State_Pressed
  2729  0CE3  3404               	retlw	high _Button_State_Pressed
  2730                           
  2731                           ;initializer for _callback_notPressed
  2732  0CE4  34ED               	retlw	low _Button_DefaultCallback
  2733  0CE5  340B               	retlw	high _Button_DefaultCallback
  2734                           
  2735                           ;initializer for _callback_pressed
  2736  0CE6  34ED               	retlw	low _Button_DefaultCallback
  2737  0CE7  340B               	retlw	high _Button_DefaultCallback
  2738                           
  2739                           ;initializer for _Sensor_scanB
  2740  0CE8  341E               	retlw	low _MTOUCH_CVD_ScanB_0
  2741  0CE9  340F               	retlw	high _MTOUCH_CVD_ScanB_0
  2742                           
  2743                           ;initializer for _Sensor_scanA
  2744  0CEA  343E               	retlw	low _MTOUCH_CVD_ScanA_0
  2745  0CEB  340E               	retlw	high _MTOUCH_CVD_ScanA_0
  2746                           
  2747                           ;initializer for _callback_sampled
  2748  0CEC  34EF               	retlw	low _Sensor_DefaultCallback
  2749  0CED  340B               	retlw	high _Sensor_DefaultCallback
  2750                           
  2751                           ;initializer for _sample_period
  2752  0CEE  34C8               	retlw	200
  2753                           
  2754                           	psect	idataBANK2
  2755  06C4                     __pidataBANK2:	
  2756                           
  2757                           ;initializer for _mtouch_sensor
  2758  06C4  3400               	retlw	0
  2759  06C5  343E               	retlw	low _MTOUCH_CVD_ScanA_0
  2760  06C6  340E               	retlw	high _MTOUCH_CVD_ScanA_0
  2761  06C7  341E               	retlw	low _MTOUCH_CVD_ScanB_0
  2762  06C8  340F               	retlw	high _MTOUCH_CVD_ScanB_0
  2763  06C9  3420               	retlw	32
  2764  06CA  3400               	retlw	0
  2765  06CB  3400               	retlw	0
  2766  06CC  3400               	retlw	0
  2767  06CD  3401               	retlw	1
  2768  06CE  345E               	retlw	low _MTOUCH_CVD_ScanA_1
  2769  06CF  340E               	retlw	high _MTOUCH_CVD_ScanA_1
  2770  06D0  343E               	retlw	low _MTOUCH_CVD_ScanB_1
  2771  06D1  340F               	retlw	high _MTOUCH_CVD_ScanB_1
  2772  06D2  3420               	retlw	32
  2773  06D3  3400               	retlw	0
  2774  06D4  3400               	retlw	0
  2775  06D5  3400               	retlw	0
  2776  06D6  3402               	retlw	2
  2777  06D7  347E               	retlw	low _MTOUCH_CVD_ScanA_2
  2778  06D8  340E               	retlw	high _MTOUCH_CVD_ScanA_2
  2779  06D9  345E               	retlw	low _MTOUCH_CVD_ScanB_2
  2780  06DA  340F               	retlw	high _MTOUCH_CVD_ScanB_2
  2781  06DB  3420               	retlw	32
  2782  06DC  3400               	retlw	0
  2783  06DD  3400               	retlw	0
  2784  06DE  3400               	retlw	0
  2785  06DF  3403               	retlw	3
  2786  06E0  349E               	retlw	low _MTOUCH_CVD_ScanA_3
  2787  06E1  340E               	retlw	high _MTOUCH_CVD_ScanA_3
  2788  06E2  347E               	retlw	low _MTOUCH_CVD_ScanB_3
  2789  06E3  340F               	retlw	high _MTOUCH_CVD_ScanB_3
  2790  06E4  3420               	retlw	32
  2791  06E5  3400               	retlw	0
  2792  06E6  3400               	retlw	0
  2793  06E7  3400               	retlw	0
  2794  06E8  3404               	retlw	4
  2795  06E9  34BE               	retlw	low _MTOUCH_CVD_ScanA_4
  2796  06EA  340E               	retlw	high _MTOUCH_CVD_ScanA_4
  2797  06EB  349E               	retlw	low _MTOUCH_CVD_ScanB_4
  2798  06EC  340F               	retlw	high _MTOUCH_CVD_ScanB_4
  2799  06ED  3420               	retlw	32
  2800  06EE  3400               	retlw	0
  2801  06EF  3400               	retlw	0
  2802  06F0  3400               	retlw	0
  2803  06F1  3405               	retlw	5
  2804  06F2  34DE               	retlw	low _MTOUCH_CVD_ScanA_5
  2805  06F3  340E               	retlw	high _MTOUCH_CVD_ScanA_5
  2806  06F4  34BE               	retlw	low _MTOUCH_CVD_ScanB_5
  2807  06F5  340F               	retlw	high _MTOUCH_CVD_ScanB_5
  2808  06F6  3420               	retlw	32
  2809  06F7  3400               	retlw	0
  2810  06F8  3400               	retlw	0
  2811  06F9  3400               	retlw	0
  2812  06FA  3406               	retlw	6
  2813  06FB  341E               	retlw	low _MTOUCH_CVD_ScanA_6
  2814  06FC  340E               	retlw	high _MTOUCH_CVD_ScanA_6
  2815  06FD  34FE               	retlw	low _MTOUCH_CVD_ScanB_6
  2816  06FE  340E               	retlw	high _MTOUCH_CVD_ScanB_6
  2817  06FF  3420               	retlw	32
  2818  0700  3400               	retlw	0
  2819  0701  3400               	retlw	0
  2820  0702  3400               	retlw	0
  2821                           
  2822                           	psect	stringtext1
  2823  1000                     __pstringtext1:	
  2824  1000                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2825  1000  3403               	retlw	3
  2826  1001  340D               	retlw	13
  2827  1002  340E               	retlw	14
  2828  1003  3414               	retlw	20
  2829  1004  340D               	retlw	13
  2830  1005                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2831                           
  2832                           	psect	stringtext2
  2833  0539                     __pstringtext2:	
  2834  0539                     _mtouch_button_init:	
  2835  0539  3400               	retlw	0
  2836  053A  3400               	retlw	0
  2837  053B  3400               	retlw	0
  2838  053C  3400               	retlw	0
  2839  053D  3400               	retlw	0
  2840  053E  3400               	retlw	0
  2841  053F  3400               	retlw	0
  2842  0540  3400               	retlw	0
  2843  0541  3400               	retlw	0
  2844  0542  3400               	retlw	0
  2845  0543  3400               	retlw	0
  2846  0544  3400               	retlw	0
  2847  0545  3400               	retlw	0
  2848  0546  3400               	retlw	0
  2849  0547  3432               	retlw	50
  2850  0548  3401               	retlw	1
  2851  0549  3401               	retlw	1
  2852  054A  3404               	retlw	4
  2853  054B  3400               	retlw	0
  2854  054C  3400               	retlw	0
  2855  054D  3400               	retlw	0
  2856  054E  3400               	retlw	0
  2857  054F  3400               	retlw	0
  2858  0550  3400               	retlw	0
  2859  0551  3400               	retlw	0
  2860  0552  3400               	retlw	0
  2861  0553  3400               	retlw	0
  2862  0554  3400               	retlw	0
  2863  0555  3400               	retlw	0
  2864  0556  3400               	retlw	0
  2865  0557  3432               	retlw	50
  2866  0558  3401               	retlw	1
  2867  0559  3402               	retlw	2
  2868  055A  3403               	retlw	3
  2869  055B  3400               	retlw	0
  2870  055C  3400               	retlw	0
  2871  055D  3400               	retlw	0
  2872  055E  3400               	retlw	0
  2873  055F  3400               	retlw	0
  2874  0560  3400               	retlw	0
  2875  0561  3400               	retlw	0
  2876  0562  3400               	retlw	0
  2877  0563  3400               	retlw	0
  2878  0564  3400               	retlw	0
  2879  0565  3400               	retlw	0
  2880  0566  3400               	retlw	0
  2881  0567  3432               	retlw	50
  2882  0568  3401               	retlw	1
  2883  0569  3403               	retlw	3
  2884  056A  3402               	retlw	2
  2885  056B  3400               	retlw	0
  2886  056C  3400               	retlw	0
  2887  056D  3400               	retlw	0
  2888  056E  3400               	retlw	0
  2889  056F  3400               	retlw	0
  2890  0570  3400               	retlw	0
  2891  0571  3400               	retlw	0
  2892  0572  3400               	retlw	0
  2893  0573  3400               	retlw	0
  2894  0574  3400               	retlw	0
  2895  0575  3400               	retlw	0
  2896  0576  3400               	retlw	0
  2897  0577  3432               	retlw	50
  2898  0578  3401               	retlw	1
  2899  0579  3404               	retlw	4
  2900  057A  3401               	retlw	1
  2901  057B  3400               	retlw	0
  2902  057C  3400               	retlw	0
  2903  057D  3400               	retlw	0
  2904  057E  3400               	retlw	0
  2905  057F  3400               	retlw	0
  2906  0580  3400               	retlw	0
  2907  0581  3400               	retlw	0
  2908  0582  3400               	retlw	0
  2909  0583  3400               	retlw	0
  2910  0584  3400               	retlw	0
  2911  0585  3400               	retlw	0
  2912  0586  3400               	retlw	0
  2913  0587  3432               	retlw	50
  2914  0588  3401               	retlw	1
  2915  0589  3405               	retlw	5
  2916  058A  3406               	retlw	6
  2917  058B  3400               	retlw	0
  2918  058C  3400               	retlw	0
  2919  058D  3400               	retlw	0
  2920  058E  3400               	retlw	0
  2921  058F  3400               	retlw	0
  2922  0590  3400               	retlw	0
  2923  0591  3400               	retlw	0
  2924  0592  3400               	retlw	0
  2925  0593  3400               	retlw	0
  2926  0594  3400               	retlw	0
  2927  0595  3400               	retlw	0
  2928  0596  3400               	retlw	0
  2929  0597  3432               	retlw	50
  2930  0598  3401               	retlw	1
  2931  0599                     __end_of_mtouch_button_init:	
  2932  001C                     _T2CONbits	set	28
  2933  001C                     _T2CON	set	28
  2934  001A                     _TMR2	set	26
  2935  001B                     _PR2	set	27
  2936  000B                     _INTCONbits	set	11
  2937  0012                     _PIR2bits	set	18
  2938  0011                     _PIR1bits	set	17
  2939  005F                     _GIE	set	95
  2940  009B                     _ADRES	set	155
  2941  009D                     _ADCON0bits	set	157
  2942  009F                     _ADCON2	set	159
  2943  009E                     _ADCON1	set	158
  2944  009D                     _ADCON0	set	157
  2945  0091                     _PIE1bits	set	145
  2946  0092                     _PIE2bits	set	146
  2947  0095                     _OPTION_REGbits	set	149
  2948  008E                     _TRISC	set	142
  2949  008C                     _TRISA	set	140
  2950  0097                     _WDTCON	set	151
  2951  0098                     _OSCTUNE	set	152
  2952  009A                     _OSCSTAT	set	154
  2953  0099                     _OSCCON	set	153
  2954  04D6                     _PLLR	set	1238
  2955  010E                     _LATC	set	270
  2956  010C                     _LATA	set	268
  2957  0116                     _BORCON	set	278
  2958  019A                     _TX1REG	set	410
  2959  0199                     _RC1REG	set	409
  2960  019D                     _RC1STAbits	set	413
  2961  019E                     _TX1STAbits	set	414
  2962  019C                     _SP1BRGH	set	412
  2963  019B                     _SP1BRGL	set	411
  2964  019E                     _TX1STA	set	414
  2965  019D                     _RC1STA	set	413
  2966  019F                     _BAUD1CON	set	415
  2967  018C                     _ANSELA	set	396
  2968  018E                     _ANSELC	set	398
  2969  020E                     _WPUC	set	526
  2970  020C                     _WPUA	set	524
  2971  028E                     _ODCONC	set	654
  2972  028C                     _ODCONA	set	652
  2973  030E                     _SLRCONC	set	782
  2974  030C                     _SLRCONA	set	780
  2975  0417                     _T4CONbits	set	1047
  2976  0417                     _T4CON	set	1047
  2977  0415                     _TMR4	set	1045
  2978  0416                     _PR4	set	1046
  2979  0EA4                     _RC4PPS	set	3748
  2980                           
  2981                           ; #config settings
  2982  0000                     
  2983                           	psect	cinit
  2984  0014                     start_initialization:	
  2985  0014                     __initialization:		;BIGRAM
  2986                           
  2987                           ; Initialize objects allocated to BANK0
  2988  0014  30DE               	movlw	low __pidataBANK0
  2989  0015  0084               	movwf	4
  2990  0016  308C               	movlw	(high __pidataBANK0)| (0+128)
  2991  0017  0085               	movwf	5
  2992  0018  305A               	movlw	low __pdataBANK0
  2993  0019  0086               	movwf	6
  2994  001A  3000               	movlw	high __pdataBANK0
  2995  001B  0087               	movwf	7
  2996  001C  3000               	movlw	0
  2997  001D  00FF               	movwf	btemp+1
  2998  001E  3011               	movlw	17
  2999  001F  318C  2475  3180   	fcall	init_ram
  3000                           
  3001                           ; Initialize objects allocated to BANK2
  3002  0022  30C4               	movlw	low __pidataBANK2
  3003  0023  0084               	movwf	4
  3004  0024  3086               	movlw	(high __pidataBANK2)| (0+128)
  3005  0025  0085               	movwf	5
  3006  0026  3020               	movlw	low __pdataBANK2
  3007  0027  0086               	movwf	6
  3008  0028  3001               	movlw	high __pdataBANK2
  3009  0029  0087               	movwf	7
  3010  002A  3000               	movlw	0
  3011  002B  00FF               	movwf	btemp+1
  3012  002C  303F               	movlw	63
  3013  002D  318C  2475  3180   	fcall	init_ram
  3014                           
  3015                           ; Clear objects allocated to BIGRAM
  3016  0030  3090               	movlw	low (0+9104)
  3017  0031  0084               	movwf	4
  3018  0032  3023               	movlw	high (0+9104)
  3019  0033  0085               	movwf	5
  3020  0034  3060               	movlw	96
  3021  0035  00FE               	movwf	btemp
  3022  0036  3000               	movlw	0
  3023  0037  00FF               	movwf	btemp+1
  3024  0038  318C  2469  3180   	fcall	clear_ram0
  3025                           
  3026                           ; Clear objects allocated to COMMON
  3027  003B  01F8               	clrf	__pbssCOMMON& (0+127)
  3028  003C  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  3029  003D  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  3030  003E  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  3031  003F  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  3032  0040  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  3033                           
  3034                           ; Clear objects allocated to BANK0
  3035  0041  3041               	movlw	low __pbssBANK0
  3036  0042  0084               	movwf	4
  3037  0043  3000               	movlw	high __pbssBANK0
  3038  0044  0085               	movwf	5
  3039  0045  3019               	movlw	25
  3040  0046  00FE               	movwf	btemp
  3041  0047  3000               	movlw	0
  3042  0048  00FF               	movwf	btemp+1
  3043  0049  318C  2469  3180   	fcall	clear_ram0
  3044                           
  3045                           ; Clear objects allocated to BANK1
  3046  004C  30A0               	movlw	low __pbssBANK1
  3047  004D  0084               	movwf	4
  3048  004E  3000               	movlw	high __pbssBANK1
  3049  004F  0085               	movwf	5
  3050  0050  3018               	movlw	24
  3051  0051  00FE               	movwf	btemp
  3052  0052  3000               	movlw	0
  3053  0053  00FF               	movwf	btemp+1
  3054  0054  318C  2469         	fcall	clear_ram0
  3055  0056                     end_of_initialization:	
  3056                           ;End of C runtime variable initialization code
  3057                           
  3058  0056                     __end_of__initialization:	
  3059  0056  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3060  0057  0020               	movlb	0
  3061  0058  3181  2991         	ljmp	_main	;jump to C main() function
  3062                           
  3063                           	psect	bssCOMMON
  3064  0078                     __pbssCOMMON:	
  3065  0078                     _TMR2_InterruptHandler:	
  3066  0078                     	ds	2
  3067  007A                     _TMR4_InterruptHandler:	
  3068  007A                     	ds	2
  3069  007C                     _packet_counter:	
  3070  007C                     	ds	1
  3071  007D                     _currentScannSensor:	
  3072  007D                     	ds	1
  3073                           
  3074                           	psect	bssBANK0
  3075  0041                     __pbssBANK0:	
  3076  0041                     _state:	
  3077  0041                     	ds	8
  3078  0049                     Sensor_Acq_ExecuteScan@last_b:	
  3079  0049                     	ds	2
  3080  004B                     Sensor_Acq_ExecuteScan@last_a:	
  3081  004B                     	ds	2
  3082  004D                     _packet_noise:	
  3083  004D                     	ds	2
  3084  004F                     _packet_sample:	
  3085  004F                     	ds	2
  3086  0051                     _EUSART_ErrorHandler:	
  3087  0051                     	ds	2
  3088  0053                     _EUSART_OverrunErrorHandler:	
  3089  0053                     	ds	2
  3090  0055                     _EUSART_FramingErrorHandler:	
  3091  0055                     	ds	2
  3092  0057                     _sensor_globalFlags:	
  3093  0057                     	ds	1
  3094  0058                     _mtouch_time_toScan:	
  3095  0058                     	ds	1
  3096  0059                     _eusartRxLastError:	
  3097  0059                     	ds	1
  3098                           
  3099                           	psect	dataBANK0
  3100  005A                     __pdataBANK0:	
  3101  005A                     _Button_StateMachine:	
  3102  005A                     	ds	6
  3103  0060                     _callback_notPressed:	
  3104  0060                     	ds	2
  3105  0062                     _callback_pressed:	
  3106  0062                     	ds	2
  3107  0064                     _Sensor_scanB:	
  3108  0064                     	ds	2
  3109  0066                     _Sensor_scanA:	
  3110  0066                     	ds	2
  3111  0068                     _callback_sampled:	
  3112  0068                     	ds	2
  3113  006A                     _sample_period:	
  3114  006A                     	ds	1
  3115                           
  3116                           	psect	bssBANK1
  3117  00A0                     __pbssBANK1:	
  3118  00A0                     _timeout:	
  3119  00A0                     	ds	16
  3120  00B0                     _last_state:	
  3121  00B0                     	ds	8
  3122                           
  3123                           	psect	dataBANK2
  3124  0120                     __pdataBANK2:	
  3125  0120                     _mtouch_sensor:	
  3126  0120                     	ds	63
  3127                           
  3128                           	psect	inittext
  3129  0C75                     init_ram:	
  3130  0C75  00FE               	movwf	126
  3131  0C76                     initloop:	
  3132  0C76  0012               	moviw fsr0++
  3133  0C77  001E               	movwi fsr1++
  3134  0C78  3001               	movlw	1
  3135  0C79  02FE               	subwf	126,f
  3136  0C7A  3000               	movlw	0
  3137  0C7B  3BFF               	subwfb	127,f
  3138  0C7C  087F               	movf	127,w
  3139  0C7D  047E               	iorwf	126,w
  3140  0C7E  1903               	btfsc	3,2
  3141  0C7F  3400               	retlw	0
  3142  0C80  2C76               	goto	initloop
  3143                           
  3144                           	psect	clrtext
  3145  0C69                     clear_ram0:	
  3146                           ;	Called with FSR0 containing the base address, and
  3147                           ;	btemp/btemp+1 has the size to clear
  3148                           
  3149  0C69  0064               	clrwdt	;clear the watchdog before getting into this loop
  3150  0C6A                     clrloop0:	
  3151  0C6A  0180               	clrf	0	;clear RAM location pointed to by FSR
  3152  0C6B  3101               	addfsr 0,1
  3153  0C6C  3001               	movlw	1
  3154  0C6D  02FE               	subwf	126,f
  3155  0C6E  3000               	movlw	0
  3156  0C6F  3BFF               	subwfb	127,f
  3157  0C70  087F               	movf	127,w
  3158  0C71  047E               	iorwf	126,w
  3159  0C72  1903               	btfsc	3,2
  3160  0C73  3400               	retlw	0	;all done for this memory range, return
  3161  0C74  2C6A               	goto	clrloop0	;have we reached the end yet?
  3162                           
  3163                           	psect	cstackCOMMON
  3164  0070                     __pcstackCOMMON:	
  3165  0070                     ?_PIN_MANAGER_Initialize:	
  3166  0070                     ?_OSCILLATOR_Initialize:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0070                     ?_WDT_Initialize:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0070                     ?_TMR2_Initialize:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175  0070                     ?_EUSART_Initialize:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0070                     ?_MTOUCH_Initialize:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0070                     ?_TMR2_ISR:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0070                     ?_TMR2_DefaultInterruptHandler:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0070                     ??_TMR2_DefaultInterruptHandler:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0070                     ?_MTOUCH_Service_Mainloop:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0070                     ?_MTOUCH_Button_isPressed:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0070                     ?_MTOUCH_Button_InitializeAll:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0070                     ?_MTOUCH_Sensor_SampleAll:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0070                     ?_MTOUCH_Button_ServiceAll:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0070                     ?_MTOUCH_needReburst:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0070                     ?_MTOUCH_Tick:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0070                     ?_MTOUCH_Button_Tick:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0070                     ?_MTOUCH_Sensor_Enable:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0070                     ?_Sensor_Sampled_Reset:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0070                     ?_Sensor_Service:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0070                     ?_Sensor_Acquisition:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0070                     ?_Sensor_isEnabled:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0070                     ?_Sensor_RawSample_Update:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241  0070                     ?_Sensor_setSampled:	
  3242                           ; 1 bytes @ 0x0
  3243                           
  3244  0070                     ?_Sensor_Acq_ExecutePacket:	
  3245                           ; 1 bytes @ 0x0
  3246                           
  3247  0070                     ?_Sensor_setActive:	
  3248                           ; 1 bytes @ 0x0
  3249                           
  3250  0070                     ?_Sensor_Scanfrequency_Evaluation:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253  0070                     ?_Sensor_setInactive:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256  0070                     ?_Sensor_setScanFunction:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259  0070                     ?_Sensor_Acq_ExecuteScan:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262  0070                     ?_Button_Service:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265  0070                     ?_SYSTEM_Initialize:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268  0070                     ?_EUSART_Write:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0070                     ?_INTERRUPT_InterruptManager:	
  3272                           ; 1 bytes @ 0x0
  3273                           
  3274  0070                     ?_TMR2_StartTimer:	
  3275                           ; 1 bytes @ 0x0
  3276                           
  3277  0070                     ?_TMR2_StopTimer:	
  3278                           ; 1 bytes @ 0x0
  3279                           
  3280  0070                     ?_TMR2_LoadPeriodRegister:	
  3281                           ; 1 bytes @ 0x0
  3282                           
  3283  0070                     ?_main:	
  3284                           ; 1 bytes @ 0x0
  3285                           
  3286  0070                     ?_MTOUCH_CVD_ScanA_0:	
  3287                           ; 1 bytes @ 0x0
  3288                           
  3289  0070                     ??_MTOUCH_CVD_ScanA_0:	
  3290                           ; 1 bytes @ 0x0
  3291                           
  3292  0070                     ?_MTOUCH_CVD_ScanB_0:	
  3293                           ; 1 bytes @ 0x0
  3294                           
  3295  0070                     ??_MTOUCH_CVD_ScanB_0:	
  3296                           ; 1 bytes @ 0x0
  3297                           
  3298  0070                     ?_MTOUCH_CVD_ScanA_1:	
  3299                           ; 1 bytes @ 0x0
  3300                           
  3301  0070                     ??_MTOUCH_CVD_ScanA_1:	
  3302                           ; 1 bytes @ 0x0
  3303                           
  3304  0070                     ?_MTOUCH_CVD_ScanB_1:	
  3305                           ; 1 bytes @ 0x0
  3306                           
  3307  0070                     ??_MTOUCH_CVD_ScanB_1:	
  3308                           ; 1 bytes @ 0x0
  3309                           
  3310  0070                     ?_MTOUCH_CVD_ScanA_2:	
  3311                           ; 1 bytes @ 0x0
  3312                           
  3313  0070                     ??_MTOUCH_CVD_ScanA_2:	
  3314                           ; 1 bytes @ 0x0
  3315                           
  3316  0070                     ?_MTOUCH_CVD_ScanB_2:	
  3317                           ; 1 bytes @ 0x0
  3318                           
  3319  0070                     ??_MTOUCH_CVD_ScanB_2:	
  3320                           ; 1 bytes @ 0x0
  3321                           
  3322  0070                     ?_MTOUCH_CVD_ScanA_3:	
  3323                           ; 1 bytes @ 0x0
  3324                           
  3325  0070                     ??_MTOUCH_CVD_ScanA_3:	
  3326                           ; 1 bytes @ 0x0
  3327                           
  3328  0070                     ?_MTOUCH_CVD_ScanB_3:	
  3329                           ; 1 bytes @ 0x0
  3330                           
  3331  0070                     ??_MTOUCH_CVD_ScanB_3:	
  3332                           ; 1 bytes @ 0x0
  3333                           
  3334  0070                     ?_MTOUCH_CVD_ScanA_4:	
  3335                           ; 1 bytes @ 0x0
  3336                           
  3337  0070                     ??_MTOUCH_CVD_ScanA_4:	
  3338                           ; 1 bytes @ 0x0
  3339                           
  3340  0070                     ?_MTOUCH_CVD_ScanB_4:	
  3341                           ; 1 bytes @ 0x0
  3342                           
  3343  0070                     ??_MTOUCH_CVD_ScanB_4:	
  3344                           ; 1 bytes @ 0x0
  3345                           
  3346  0070                     ?_MTOUCH_CVD_ScanA_5:	
  3347                           ; 1 bytes @ 0x0
  3348                           
  3349  0070                     ??_MTOUCH_CVD_ScanA_5:	
  3350                           ; 1 bytes @ 0x0
  3351                           
  3352  0070                     ?_MTOUCH_CVD_ScanB_5:	
  3353                           ; 1 bytes @ 0x0
  3354                           
  3355  0070                     ??_MTOUCH_CVD_ScanB_5:	
  3356                           ; 1 bytes @ 0x0
  3357                           
  3358  0070                     ?_MTOUCH_CVD_ScanA_6:	
  3359                           ; 1 bytes @ 0x0
  3360                           
  3361  0070                     ??_MTOUCH_CVD_ScanA_6:	
  3362                           ; 1 bytes @ 0x0
  3363                           
  3364  0070                     ?_MTOUCH_CVD_ScanB_6:	
  3365                           ; 1 bytes @ 0x0
  3366                           
  3367  0070                     ??_MTOUCH_CVD_ScanB_6:	
  3368                           ; 1 bytes @ 0x0
  3369                           
  3370  0070                     ?_MTOUCH_Sensor_Initialize:	
  3371                           ; 1 bytes @ 0x0
  3372                           
  3373  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  3374                           ; 1 bytes @ 0x0
  3375                           
  3376  0070                     ?_MTOUCH_Sensor_Calibrate:	
  3377                           ; 1 bytes @ 0x0
  3378                           
  3379  0070                     ?_MTOUCH_Sensor_wasSampled:	
  3380                           ; 1 bytes @ 0x0
  3381                           
  3382  0070                     ?_MTOUCH_Button_Initialize:	
  3383                           ; 1 bytes @ 0x0
  3384                           
  3385  0070                     ?i1___bmul:	
  3386                           ; 1 bytes @ 0x0
  3387                           
  3388  0070                     ?i1_abs:	
  3389                           ; 1 bytes @ 0x0
  3390                           
  3391  0070                     MTOUCH_Sensor_isCalibrated@sensor:	
  3392                           ; 2 bytes @ 0x0
  3393                           
  3394  0070                     MTOUCH_Sensor_Calibrate@sensor:	
  3395                           ; 1 bytes @ 0x0
  3396                           
  3397  0070                     i1___bmul@multiplicand:	
  3398                           ; 1 bytes @ 0x0
  3399                           
  3400  0070                     i1abs@a:	
  3401                           ; 1 bytes @ 0x0
  3402                           
  3403                           
  3404                           ; 2 bytes @ 0x0
  3405  0070                     	ds	1
  3406  0071                     ??i1___bmul:	
  3407                           
  3408                           ; 1 bytes @ 0x1
  3409  0071                     	ds	1
  3410  0072                     ??i1_abs:	
  3411  0072                     i1___bmul@multiplier:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414                           
  3415                           ; 1 bytes @ 0x2
  3416  0072                     	ds	1
  3417  0073                     i1___bmul@product:	
  3418                           
  3419                           ; 1 bytes @ 0x3
  3420  0073                     	ds	1
  3421  0074                     ??_Sensor_Acq_ExecuteScan:	
  3422                           
  3423                           ; 1 bytes @ 0x4
  3424  0074                     	ds	2
  3425  0076                     Sensor_Acq_ExecuteScan@result:	
  3426                           
  3427                           ; 2 bytes @ 0x6
  3428  0076                     	ds	2
  3429  0078                     ??_TMR2_ISR:	
  3430  0078                     ??_INTERRUPT_InterruptManager:	
  3431                           ; 1 bytes @ 0x8
  3432                           
  3433                           
  3434                           	psect	cstackBANK0
  3435  0020                     __pcstackBANK0:	
  3436                           ; 1 bytes @ 0x8
  3437                           
  3438  0020                     ??_PIN_MANAGER_Initialize:	
  3439  0020                     ??_OSCILLATOR_Initialize:	
  3440                           ; 1 bytes @ 0x0
  3441                           
  3442  0020                     ??_WDT_Initialize:	
  3443                           ; 1 bytes @ 0x0
  3444                           
  3445  0020                     ?_EUSART_SetFramingErrorHandler:	
  3446                           ; 1 bytes @ 0x0
  3447                           
  3448  0020                     ?_EUSART_SetOverrunErrorHandler:	
  3449                           ; 1 bytes @ 0x0
  3450                           
  3451  0020                     ?_EUSART_SetErrorHandler:	
  3452                           ; 1 bytes @ 0x0
  3453                           
  3454  0020                     ?_TMR2_SetInterruptHandler:	
  3455                           ; 1 bytes @ 0x0
  3456                           
  3457  0020                     ??_MTOUCH_Button_isPressed:	
  3458                           ; 1 bytes @ 0x0
  3459                           
  3460  0020                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3461                           ; 1 bytes @ 0x0
  3462                           
  3463  0020                     ??_MTOUCH_needReburst:	
  3464                           ; 1 bytes @ 0x0
  3465                           
  3466  0020                     ?_Sensor_DefaultCallback:	
  3467                           ; 1 bytes @ 0x0
  3468                           
  3469  0020                     ??_Sensor_Sampled_Reset:	
  3470                           ; 1 bytes @ 0x0
  3471                           
  3472  0020                     ??_Sensor_isEnabled:	
  3473                           ; 1 bytes @ 0x0
  3474                           
  3475  0020                     ??_Sensor_RawSample_Update:	
  3476                           ; 1 bytes @ 0x0
  3477                           
  3478  0020                     ??_Sensor_setSampled:	
  3479                           ; 1 bytes @ 0x0
  3480                           
  3481  0020                     ??_Sensor_setActive:	
  3482                           ; 1 bytes @ 0x0
  3483                           
  3484  0020                     ??_Sensor_setInactive:	
  3485                           ; 1 bytes @ 0x0
  3486                           
  3487  0020                     ??_Sensor_setScanFunction:	
  3488                           ; 1 bytes @ 0x0
  3489                           
  3490  0020                     ?_Button_DefaultCallback:	
  3491                           ; 1 bytes @ 0x0
  3492                           
  3493  0020                     ?_Button_Deviation_Update:	
  3494                           ; 1 bytes @ 0x0
  3495                           
  3496  0020                     ?_Button_Baseline_Update:	
  3497                           ; 1 bytes @ 0x0
  3498                           
  3499  0020                     ?_Button_Tick_helper:	
  3500                           ; 1 bytes @ 0x0
  3501                           
  3502  0020                     ??_EUSART_Write:	
  3503                           ; 1 bytes @ 0x0
  3504                           
  3505  0020                     ??_TMR2_StartTimer:	
  3506                           ; 1 bytes @ 0x0
  3507                           
  3508  0020                     ??_TMR2_StopTimer:	
  3509                           ; 1 bytes @ 0x0
  3510                           
  3511  0020                     ??_TMR2_LoadPeriodRegister:	
  3512                           ; 1 bytes @ 0x0
  3513                           
  3514  0020                     ??_MTOUCH_Sensor_isCalibrated:	
  3515                           ; 1 bytes @ 0x0
  3516                           
  3517  0020                     ??_MTOUCH_Sensor_Calibrate:	
  3518                           ; 1 bytes @ 0x0
  3519                           
  3520  0020                     ??_MTOUCH_Button_Initialize:	
  3521                           ; 1 bytes @ 0x0
  3522                           
  3523  0020                     ?___bmul:	
  3524                           ; 1 bytes @ 0x0
  3525                           
  3526  0020                     ?_abs:	
  3527                           ; 1 bytes @ 0x0
  3528                           
  3529  0020                     ?___lwmod:	
  3530                           ; 2 bytes @ 0x0
  3531                           
  3532  0020                     EUSART_Write@txData:	
  3533                           ; 2 bytes @ 0x0
  3534                           
  3535  0020                     TMR2_LoadPeriodRegister@periodVal:	
  3536                           ; 1 bytes @ 0x0
  3537                           
  3538  0020                     Sensor_RawSample_Update@sensor:	
  3539                           ; 1 bytes @ 0x0
  3540                           
  3541  0020                     Sensor_DefaultCallback@sensor:	
  3542                           ; 1 bytes @ 0x0
  3543                           
  3544  0020                     Sensor_setScanFunction@sensor:	
  3545                           ; 1 bytes @ 0x0
  3546                           
  3547  0020                     Sensor_isEnabled@sensor:	
  3548                           ; 1 bytes @ 0x0
  3549                           
  3550  0020                     Sensor_setActive@sensor:	
  3551                           ; 1 bytes @ 0x0
  3552                           
  3553  0020                     Sensor_setInactive@sensor:	
  3554                           ; 1 bytes @ 0x0
  3555                           
  3556  0020                     Sensor_Sampled_Reset@sensor:	
  3557                           ; 1 bytes @ 0x0
  3558                           
  3559  0020                     Sensor_setSampled@sensor:	
  3560                           ; 1 bytes @ 0x0
  3561                           
  3562  0020                     Button_DefaultCallback@button:	
  3563                           ; 1 bytes @ 0x0
  3564                           
  3565  0020                     ___bmul@multiplicand:	
  3566                           ; 1 bytes @ 0x0
  3567                           
  3568  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3569                           ; 1 bytes @ 0x0
  3570                           
  3571  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3572                           ; 2 bytes @ 0x0
  3573                           
  3574  0020                     EUSART_SetErrorHandler@interruptHandler:	
  3575                           ; 2 bytes @ 0x0
  3576                           
  3577  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  3578                           ; 2 bytes @ 0x0
  3579                           
  3580  0020                     Button_Tick_helper@button:	
  3581                           ; 2 bytes @ 0x0
  3582                           
  3583  0020                     Button_Deviation_Update@button:	
  3584                           ; 2 bytes @ 0x0
  3585                           
  3586  0020                     Button_Baseline_Update@button:	
  3587                           ; 2 bytes @ 0x0
  3588                           
  3589  0020                     ___lwmod@divisor:	
  3590                           ; 2 bytes @ 0x0
  3591                           
  3592  0020                     abs@a:	
  3593                           ; 2 bytes @ 0x0
  3594                           
  3595                           
  3596                           ; 2 bytes @ 0x0
  3597  0020                     	ds	1
  3598  0021                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3599  0021                     ??_Sensor_DefaultCallback:	
  3600                           ; 1 bytes @ 0x1
  3601                           
  3602  0021                     ??_Button_DefaultCallback:	
  3603                           ; 1 bytes @ 0x1
  3604                           
  3605  0021                     ??___bmul:	
  3606                           ; 1 bytes @ 0x1
  3607                           
  3608                           
  3609                           ; 1 bytes @ 0x1
  3610  0021                     	ds	1
  3611  0022                     ??_TMR2_Initialize:	
  3612  0022                     ??_EUSART_Initialize:	
  3613                           ; 1 bytes @ 0x2
  3614                           
  3615  0022                     ??_EUSART_SetFramingErrorHandler:	
  3616                           ; 1 bytes @ 0x2
  3617                           
  3618  0022                     ??_EUSART_SetOverrunErrorHandler:	
  3619                           ; 1 bytes @ 0x2
  3620                           
  3621  0022                     ??_EUSART_SetErrorHandler:	
  3622                           ; 1 bytes @ 0x2
  3623                           
  3624  0022                     ??_TMR2_SetInterruptHandler:	
  3625                           ; 1 bytes @ 0x2
  3626                           
  3627  0022                     ??_Sensor_Acq_ExecutePacket:	
  3628                           ; 1 bytes @ 0x2
  3629                           
  3630  0022                     ??_abs:	
  3631                           ; 1 bytes @ 0x2
  3632                           
  3633  0022                     ??_Button_Deviation_Update:	
  3634                           ; 1 bytes @ 0x2
  3635                           
  3636  0022                     ??_Button_Baseline_Update:	
  3637                           ; 1 bytes @ 0x2
  3638                           
  3639  0022                     ??_Button_Tick_helper:	
  3640                           ; 1 bytes @ 0x2
  3641                           
  3642  0022                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3643                           ; 1 bytes @ 0x2
  3644                           
  3645  0022                     ___bmul@product:	
  3646                           ; 1 bytes @ 0x2
  3647                           
  3648  0022                     ___lwmod@dividend:	
  3649                           ; 1 bytes @ 0x2
  3650                           
  3651                           
  3652                           ; 2 bytes @ 0x2
  3653  0022                     	ds	1
  3654  0023                     Sensor_Acq_ExecutePacket@ADCON0_temp:	
  3655  0023                     ___bmul@multiplier:	
  3656                           ; 1 bytes @ 0x3
  3657                           
  3658                           
  3659                           ; 1 bytes @ 0x3
  3660  0023                     	ds	1
  3661  0024                     ??_MTOUCH_Button_Tick:	
  3662  0024                     ??_MTOUCH_Sensor_Enable:	
  3663                           ; 1 bytes @ 0x4
  3664                           
  3665  0024                     ??_MTOUCH_Sensor_wasSampled:	
  3666                           ; 1 bytes @ 0x4
  3667                           
  3668  0024                     ??___lwmod:	
  3669                           ; 1 bytes @ 0x4
  3670                           
  3671  0024                     ?_MTOUCH_Sensor_RawSample_Get:	
  3672                           ; 1 bytes @ 0x4
  3673                           
  3674  0024                     Sensor_Acq_ExecutePacket@ADCON1_temp:	
  3675                           ; 2 bytes @ 0x4
  3676                           
  3677  0024                     MTOUCH_Button_Initialize@name:	
  3678                           ; 1 bytes @ 0x4
  3679                           
  3680  0024                     MTOUCH_Button_isPressed@name:	
  3681                           ; 1 bytes @ 0x4
  3682                           
  3683                           
  3684                           ; 1 bytes @ 0x4
  3685  0024                     	ds	1
  3686  0025                     Sensor_Acq_ExecutePacket@ADCON2_temp:	
  3687  0025                     MTOUCH_Sensor_Enable@sensor:	
  3688                           ; 1 bytes @ 0x5
  3689                           
  3690  0025                     MTOUCH_Sensor_wasSampled@sensor:	
  3691                           ; 1 bytes @ 0x5
  3692                           
  3693  0025                     ___lwmod@counter:	
  3694                           ; 1 bytes @ 0x5
  3695                           
  3696  0025                     MTOUCH_Button_Initialize@button:	
  3697                           ; 1 bytes @ 0x5
  3698                           
  3699                           
  3700                           ; 2 bytes @ 0x5
  3701  0025                     	ds	1
  3702  0026                     ??_MTOUCH_Sensor_Initialize:	
  3703  0026                     ??_MTOUCH_Sensor_RawSample_Get:	
  3704                           ; 1 bytes @ 0x6
  3705                           
  3706  0026                     Sensor_Acq_ExecutePacket@error:	
  3707                           ; 1 bytes @ 0x6
  3708                           
  3709                           
  3710                           ; 1 bytes @ 0x6
  3711  0026                     	ds	1
  3712  0027                     ??_MTOUCH_Button_InitializeAll:	
  3713  0027                     MTOUCH_Sensor_Initialize@sensor:	
  3714                           ; 1 bytes @ 0x7
  3715                           
  3716  0027                     Sensor_Acq_ExecutePacket@sensor:	
  3717                           ; 1 bytes @ 0x7
  3718                           
  3719  0027                     MTOUCH_Sensor_RawSample_Get@name:	
  3720                           ; 1 bytes @ 0x7
  3721                           
  3722                           
  3723                           ; 1 bytes @ 0x7
  3724  0027                     	ds	1
  3725  0028                     ??_MTOUCH_Sensor_InitializeAll:	
  3726  0028                     ??_Sensor_Scanfrequency_Evaluation:	
  3727                           ; 1 bytes @ 0x8
  3728                           
  3729  0028                     ?_Button_Baseline_Initialize:	
  3730                           ; 1 bytes @ 0x8
  3731                           
  3732  0028                     ?_Button_Reading_Update_Helper:	
  3733                           ; 1 bytes @ 0x8
  3734                           
  3735  0028                     MTOUCH_Button_InitializeAll@button:	
  3736                           ; 1 bytes @ 0x8
  3737                           
  3738  0028                     MTOUCH_Button_Tick@i:	
  3739                           ; 1 bytes @ 0x8
  3740                           
  3741  0028                     Button_Reading_Update_Helper@button:	
  3742                           ; 1 bytes @ 0x8
  3743                           
  3744  0028                     Button_Baseline_Initialize@button:	
  3745                           ; 2 bytes @ 0x8
  3746                           
  3747                           
  3748                           ; 2 bytes @ 0x8
  3749  0028                     	ds	1
  3750  0029                     ??_MTOUCH_Tick:	
  3751  0029                     MTOUCH_Sensor_InitializeAll@sensor:	
  3752                           ; 1 bytes @ 0x9
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0x9
  3756  0029                     	ds	1
  3757  002A                     ??_MTOUCH_Initialize:	
  3758  002A                     ??_Button_Baseline_Initialize:	
  3759                           ; 1 bytes @ 0xA
  3760                           
  3761  002A                     ??_Button_Reading_Update_Helper:	
  3762                           ; 1 bytes @ 0xA
  3763                           
  3764  002A                     ??_SYSTEM_Initialize:	
  3765                           ; 1 bytes @ 0xA
  3766                           
  3767  002A                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3768                           ; 1 bytes @ 0xA
  3769                           
  3770                           
  3771                           ; 2 bytes @ 0xA
  3772  002A                     	ds	2
  3773  002C                     ?_Button_Reading_Update:	
  3774  002C                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3775                           ; 1 bytes @ 0xC
  3776                           
  3777  002C                     Button_Reading_Update@button:	
  3778                           ; 2 bytes @ 0xC
  3779                           
  3780  002C                     Button_Deviation_Update@deviation:	
  3781                           ; 2 bytes @ 0xC
  3782                           
  3783                           
  3784                           ; 4 bytes @ 0xC
  3785  002C                     	ds	2
  3786  002E                     ?_Button_State_Initializing:	
  3787  002E                     ?_Button_State_NotPressed:	
  3788                           ; 1 bytes @ 0xE
  3789                           
  3790  002E                     ?_Button_State_Pressed:	
  3791                           ; 1 bytes @ 0xE
  3792                           
  3793  002E                     ??_Button_Reading_Update:	
  3794                           ; 1 bytes @ 0xE
  3795                           
  3796  002E                     Sensor_Scanfrequency_Evaluation@sensor:	
  3797                           ; 1 bytes @ 0xE
  3798                           
  3799  002E                     Button_State_Initializing@button:	
  3800                           ; 1 bytes @ 0xE
  3801                           
  3802  002E                     Button_State_NotPressed@button:	
  3803                           ; 2 bytes @ 0xE
  3804                           
  3805  002E                     Button_State_Pressed@button:	
  3806                           ; 2 bytes @ 0xE
  3807                           
  3808                           
  3809                           ; 2 bytes @ 0xE
  3810  002E                     	ds	1
  3811  002F                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3812                           
  3813                           ; 1 bytes @ 0xF
  3814  002F                     	ds	1
  3815  0030                     ??_Button_State_Initializing:	
  3816  0030                     ??_Button_State_NotPressed:	
  3817                           ; 1 bytes @ 0x10
  3818                           
  3819  0030                     ??_Button_State_Pressed:	
  3820                           ; 1 bytes @ 0x10
  3821                           
  3822  0030                     Sensor_Scanfrequency_Evaluation@retry:	
  3823                           ; 1 bytes @ 0x10
  3824                           
  3825                           
  3826                           ; 1 bytes @ 0x10
  3827  0030                     	ds	1
  3828  0031                     Sensor_Scanfrequency_Evaluation@i:	
  3829                           
  3830                           ; 1 bytes @ 0x11
  3831  0031                     	ds	1
  3832  0032                     ??_Sensor_Acquisition:	
  3833                           
  3834                           ; 1 bytes @ 0x12
  3835  0032                     	ds	2
  3836  0034                     ??_Button_Service:	
  3837  0034                     Sensor_Acquisition@retry:	
  3838                           ; 1 bytes @ 0x14
  3839                           
  3840                           
  3841                           ; 1 bytes @ 0x14
  3842  0034                     	ds	1
  3843  0035                     Sensor_Acquisition@sensor:	
  3844                           
  3845                           ; 1 bytes @ 0x15
  3846  0035                     	ds	1
  3847  0036                     ??_Sensor_Service:	
  3848                           
  3849                           ; 1 bytes @ 0x16
  3850  0036                     	ds	2
  3851  0038                     Sensor_Service@name:	
  3852  0038                     Button_Service@name:	
  3853                           ; 1 bytes @ 0x18
  3854                           
  3855                           
  3856                           ; 1 bytes @ 0x18
  3857  0038                     	ds	1
  3858  0039                     Sensor_Service@error:	
  3859  0039                     Button_Service@button:	
  3860                           ; 1 bytes @ 0x19
  3861                           
  3862                           
  3863                           ; 2 bytes @ 0x19
  3864  0039                     	ds	1
  3865  003A                     Sensor_Service@sensor:	
  3866                           
  3867                           ; 1 bytes @ 0x1A
  3868  003A                     	ds	1
  3869  003B                     ??_MTOUCH_Sensor_SampleAll:	
  3870  003B                     ??_MTOUCH_Button_ServiceAll:	
  3871                           ; 1 bytes @ 0x1B
  3872                           
  3873                           
  3874                           ; 1 bytes @ 0x1B
  3875  003B                     	ds	1
  3876  003C                     MTOUCH_Sensor_SampleAll@sensor:	
  3877  003C                     MTOUCH_Button_ServiceAll@button:	
  3878                           ; 1 bytes @ 0x1C
  3879                           
  3880                           
  3881                           ; 1 bytes @ 0x1C
  3882  003C                     	ds	1
  3883  003D                     ??_MTOUCH_Service_Mainloop:	
  3884                           
  3885                           ; 1 bytes @ 0x1D
  3886  003D                     	ds	1
  3887  003E                     ??_main:	
  3888                           
  3889                           ; 1 bytes @ 0x1E
  3890  003E                     	ds	1
  3891  003F                     main@i:	
  3892                           
  3893                           ; 2 bytes @ 0x1F
  3894  003F                     	ds	2
  3895                           
  3896                           	psect	maintext
  3897  0191                     __pmaintext:	
  3898 ;;
  3899 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3900 ;;
  3901 ;; *************** function _main *****************
  3902 ;; Defined at:
  3903 ;;		line 54 in file "main.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  i               2   31[BANK0 ] int 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      void 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : B1F/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3920 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3921 ;;Total ram usage:        3 bytes
  3922 ;; Hardware stack levels required when called:   11
  3923 ;; This function calls:
  3924 ;;		_EUSART_Write
  3925 ;;		_MTOUCH_Button_isPressed
  3926 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3927 ;;		_MTOUCH_Service_Mainloop
  3928 ;;		_SYSTEM_Initialize
  3929 ;;		___lwmod
  3930 ;; This function is called by:
  3931 ;;		Startup code after reset
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function _main
  3937  0191                     _main:	
  3938                           
  3939                           ;main.c: 56: SYSTEM_Initialize();
  3940                           
  3941                           ;incstack = 0
  3942                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3943  0191  318D  2513  3181   	fcall	_SYSTEM_Initialize
  3944                           
  3945                           ;main.c: 62: (INTCONbits.GIE = 1);
  3946  0194  178B               	bsf	11,7	;volatile
  3947                           
  3948                           ;main.c: 65: (INTCONbits.PEIE = 1);
  3949  0195  170B               	bsf	11,6	;volatile
  3950  0196                     l296:	
  3951                           ;main.c: 73: while (1) {
  3952                           
  3953                           
  3954                           ;main.c: 74: MTOUCH_Service_Mainloop();
  3955  0196  318D  25B4  3181   	fcall	_MTOUCH_Service_Mainloop
  3956                           
  3957                           ;main.c: 76: state[0] = MTOUCH_Button_isPressed(Button0);
  3958  0199  3000               	movlw	0
  3959  019A  3187  2786  3181   	fcall	_MTOUCH_Button_isPressed
  3960  019D  0020               	movlb	0	; select bank0
  3961  019E  00BE               	movwf	??_main
  3962  019F  083E               	movf	??_main,w
  3963  01A0  00C1               	movwf	_state
  3964                           
  3965                           ;main.c: 77: state[1] = MTOUCH_Button_isPressed(Button1);
  3966  01A1  3001               	movlw	1
  3967  01A2  3187  2786  3181   	fcall	_MTOUCH_Button_isPressed
  3968  01A5  0020               	movlb	0	; select bank0
  3969  01A6  00BE               	movwf	??_main
  3970  01A7  083E               	movf	??_main,w
  3971  01A8  00C2               	movwf	_state+1
  3972                           
  3973                           ;main.c: 78: state[2] = MTOUCH_Button_isPressed(Button2);
  3974  01A9  3002               	movlw	2
  3975  01AA  3187  2786  3181   	fcall	_MTOUCH_Button_isPressed
  3976  01AD  0020               	movlb	0	; select bank0
  3977  01AE  00BE               	movwf	??_main
  3978  01AF  083E               	movf	??_main,w
  3979  01B0  00C3               	movwf	_state+2
  3980                           
  3981                           ;main.c: 79: state[3] = MTOUCH_Button_isPressed(Button3);
  3982  01B1  3003               	movlw	3
  3983  01B2  3187  2786  3181   	fcall	_MTOUCH_Button_isPressed
  3984  01B5  0020               	movlb	0	; select bank0
  3985  01B6  00BE               	movwf	??_main
  3986  01B7  083E               	movf	??_main,w
  3987  01B8  00C4               	movwf	_state+3
  3988                           
  3989                           ;main.c: 80: state[4] = MTOUCH_Button_isPressed(Button4);
  3990  01B9  3004               	movlw	4
  3991  01BA  3187  2786  3181   	fcall	_MTOUCH_Button_isPressed
  3992  01BD  0020               	movlb	0	; select bank0
  3993  01BE  00BE               	movwf	??_main
  3994  01BF  083E               	movf	??_main,w
  3995  01C0  00C5               	movwf	_state+4
  3996                           
  3997                           ;main.c: 83: EUSART_Write(255);
  3998  01C1  30FF               	movlw	255
  3999  01C2  318C  241C  3181   	fcall	_EUSART_Write
  4000                           
  4001                           ;main.c: 85: for (int i = 0; i < 5; i++) {
  4002  01C5  0020               	movlb	0	; select bank0
  4003  01C6  01BF               	clrf	main@i
  4004  01C7  01C0               	clrf	main@i+1
  4005  01C8                     l3364:	
  4006                           
  4007                           ;main.c: 86: EUSART_Write(state[i]);
  4008  01C8  0020               	movlb	0	; select bank0
  4009  01C9  083F               	movf	main@i,w
  4010  01CA  3E41               	addlw	(low (_state| 0))& (0+255)
  4011  01CB  0086               	movwf	6
  4012  01CC  0187               	clrf	7
  4013  01CD  0801               	movf	1,w
  4014  01CE  318C  241C  3181   	fcall	_EUSART_Write
  4015                           
  4016                           ;main.c: 88: last_state[i] = state[i];
  4017  01D1  0020               	movlb	0	; select bank0
  4018  01D2  083F               	movf	main@i,w
  4019  01D3  3E41               	addlw	(low (_state| 0))& (0+255)
  4020  01D4  0086               	movwf	6
  4021  01D5  0187               	clrf	7
  4022  01D6  0801               	movf	1,w
  4023  01D7  00BE               	movwf	??_main
  4024  01D8  083F               	movf	main@i,w
  4025  01D9  3EB0               	addlw	(low (_last_state| 0))& (0+255)
  4026  01DA  0086               	movwf	6
  4027  01DB  0187               	clrf	7
  4028  01DC  083E               	movf	??_main,w
  4029  01DD  0081               	movwf	1
  4030                           
  4031                           ;main.c: 90: if (last_state[i] == state[i]) {
  4032  01DE  083F               	movf	main@i,w
  4033  01DF  3E41               	addlw	(low (_state| 0))& (0+255)
  4034  01E0  0086               	movwf	6
  4035  01E1  0187               	clrf	7
  4036  01E2  083F               	movf	main@i,w
  4037  01E3  3EB0               	addlw	(low (_last_state| 0))& (0+255)
  4038  01E4  0084               	movwf	4
  4039  01E5  0185               	clrf	5
  4040  01E6  0800               	movf	0,w
  4041  01E7  0601               	xorwf	1,w
  4042  01E8  1D03               	skipz
  4043  01E9  2A0A               	goto	l3376
  4044                           
  4045                           ;main.c: 91: timeout[i]++;
  4046  01EA  353F               	lslf	main@i,w
  4047  01EB  3EA0               	addlw	(low (_timeout| 0))& (0+255)
  4048  01EC  0086               	movwf	6
  4049  01ED  0187               	clrf	7
  4050  01EE  3001               	movlw	1
  4051  01EF  0781               	addwf	1,f
  4052  01F0  3141               	addfsr 1,1
  4053  01F1  1803               	skipnc
  4054  01F2  0A81               	incf	1,f
  4055                           
  4056                           ;main.c: 92: if (timeout[i] % 1000 == 0) {
  4057  01F3  30E8               	movlw	232
  4058  01F4  00A0               	movwf	___lwmod@divisor
  4059  01F5  3003               	movlw	3
  4060  01F6  00A1               	movwf	___lwmod@divisor+1
  4061  01F7  353F               	lslf	main@i,w
  4062  01F8  3EA0               	addlw	(low (_timeout| 0))& (0+255)
  4063  01F9  0086               	movwf	6
  4064  01FA  0187               	clrf	7
  4065  01FB  3F40               	moviw [0]fsr1
  4066  01FC  00A2               	movwf	___lwmod@dividend
  4067  01FD  3F41               	moviw [1]fsr1
  4068  01FE  00A3               	movwf	___lwmod@dividend+1
  4069  01FF  3187  2732  3181   	fcall	___lwmod
  4070  0202  0020               	movlb	0	; select bank0
  4071  0203  0820               	movf	?___lwmod,w
  4072  0204  0421               	iorwf	?___lwmod+1,w
  4073  0205  1D03               	btfss	3,2
  4074  0206  2A0A               	goto	l3376
  4075                           
  4076                           ;main.c: 93: MTOUCH_Sensor_Sampled_ResetAll();
  4077  0207  318D  2573  3181   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4078  020A                     l3376:	
  4079  020A  3001               	movlw	1
  4080  020B  0020               	movlb	0	; select bank0
  4081  020C  07BF               	addwf	main@i,f
  4082  020D  3000               	movlw	0
  4083  020E  3DC0               	addwfc	main@i+1,f
  4084  020F  0840               	movf	main@i+1,w
  4085  0210  3A80               	xorlw	128
  4086  0211  00BE               	movwf	??_main
  4087  0212  3080               	movlw	128
  4088  0213  023E               	subwf	??_main,w
  4089  0214  1D03               	skipz
  4090  0215  2A18               	goto	u1935
  4091  0216  3005               	movlw	5
  4092  0217  023F               	subwf	main@i,w
  4093  0218                     u1935:	
  4094  0218  1803               	btfsc	3,0
  4095  0219  2996               	goto	l296
  4096  021A  29C8               	goto	l3364
  4097  021B                     __end_of_main:	
  4098                           
  4099                           	psect	text1
  4100  0732                     __ptext1:	
  4101 ;; *************** function ___lwmod *****************
  4102 ;; Defined at:
  4103 ;;		line 5 in file "/Applications/microchip/xc8/v2.05/pic/sources/c90/common/lwmod.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  divisor         2    0[BANK0 ] unsigned int 
  4106 ;;  dividend        2    2[BANK0 ] unsigned int 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  counter         1    5[BANK0 ] unsigned char 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  2    0[BANK0 ] unsigned int 
  4111 ;; Registers used:
  4112 ;;		wreg, status,2, status,0
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4118 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;Total ram usage:        6 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    4
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_main
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           
  4133                           ;psect for function ___lwmod
  4134  0732                     ___lwmod:	
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4138  0732  0020               	movlb	0	; select bank0
  4139  0733  0820               	movf	___lwmod@divisor,w
  4140  0734  0421               	iorwf	___lwmod@divisor+1,w
  4141  0735  1903               	btfsc	3,2
  4142  0736  2F5A               	goto	l3322
  4143  0737  01A5               	clrf	___lwmod@counter
  4144  0738  0AA5               	incf	___lwmod@counter,f
  4145  0739                     l3312:	
  4146  0739  1BA1               	btfsc	___lwmod@divisor+1,7
  4147  073A  2F45               	goto	l3314
  4148  073B  3001               	movlw	1
  4149  073C                     u1835:	
  4150  073C  35A0               	lslf	___lwmod@divisor,f
  4151  073D  0DA1               	rlf	___lwmod@divisor+1,f
  4152  073E  0B89               	decfsz	9,f
  4153  073F  2F3C               	goto	u1835
  4154  0740  3001               	movlw	1
  4155  0741  00A4               	movwf	??___lwmod
  4156  0742  0824               	movf	??___lwmod,w
  4157  0743  07A5               	addwf	___lwmod@counter,f
  4158  0744  2F39               	goto	l3312
  4159  0745                     l3314:	
  4160  0745  0821               	movf	___lwmod@divisor+1,w
  4161  0746  0223               	subwf	___lwmod@dividend+1,w
  4162  0747  1D03               	skipz
  4163  0748  2F4B               	goto	u1855
  4164  0749  0820               	movf	___lwmod@divisor,w
  4165  074A  0222               	subwf	___lwmod@dividend,w
  4166  074B                     u1855:	
  4167  074B  1C03               	skipc
  4168  074C  2F51               	goto	l3318
  4169  074D  0820               	movf	___lwmod@divisor,w
  4170  074E  02A2               	subwf	___lwmod@dividend,f
  4171  074F  0821               	movf	___lwmod@divisor+1,w
  4172  0750  3BA3               	subwfb	___lwmod@dividend+1,f
  4173  0751                     l3318:	
  4174  0751  3001               	movlw	1
  4175  0752                     u1865:	
  4176  0752  36A1               	lsrf	___lwmod@divisor+1,f
  4177  0753  0CA0               	rrf	___lwmod@divisor,f
  4178  0754  0B89               	decfsz	9,f
  4179  0755  2F52               	goto	u1865
  4180  0756  3001               	movlw	1
  4181  0757  02A5               	subwf	___lwmod@counter,f
  4182  0758  1D03               	btfss	3,2
  4183  0759  2F45               	goto	l3314
  4184  075A                     l3322:	
  4185  075A  0823               	movf	___lwmod@dividend+1,w
  4186  075B  00A1               	movwf	?___lwmod+1
  4187  075C  0822               	movf	___lwmod@dividend,w
  4188  075D  00A0               	movwf	?___lwmod
  4189  075E  0008               	return
  4190  075F                     __end_of___lwmod:	
  4191                           
  4192                           	psect	text2
  4193  0D13                     __ptext2:	
  4194 ;; *************** function _SYSTEM_Initialize *****************
  4195 ;; Defined at:
  4196 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  1    wreg      void 
  4203 ;; Registers used:
  4204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;Total ram usage:        0 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    9
  4217 ;; This function calls:
  4218 ;;		_EUSART_Initialize
  4219 ;;		_MTOUCH_Initialize
  4220 ;;		_OSCILLATOR_Initialize
  4221 ;;		_PIN_MANAGER_Initialize
  4222 ;;		_TMR2_Initialize
  4223 ;;		_WDT_Initialize
  4224 ;; This function is called by:
  4225 ;;		_main
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           
  4230                           ;psect for function _SYSTEM_Initialize
  4231  0D13                     _SYSTEM_Initialize:	
  4232                           
  4233                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  4234                           
  4235                           ;incstack = 0
  4236                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4237  0D13  318E  2601  318D   	fcall	_PIN_MANAGER_Initialize
  4238                           
  4239                           ;mcc.c: 54: OSCILLATOR_Initialize();
  4240  0D16  3187  27F5  318D   	fcall	_OSCILLATOR_Initialize
  4241                           
  4242                           ;mcc.c: 55: WDT_Initialize();
  4243  0D19  318B  23FB  318D   	fcall	_WDT_Initialize
  4244                           
  4245                           ;mcc.c: 56: TMR2_Initialize();
  4246  0D1C  318D  2501  318D   	fcall	_TMR2_Initialize
  4247                           
  4248                           ;mcc.c: 57: EUSART_Initialize();
  4249  0D1F  3187  27D1  318D   	fcall	_EUSART_Initialize
  4250                           
  4251                           ;mcc.c: 58: MTOUCH_Initialize();
  4252  0D22  318C  245D         	fcall	_MTOUCH_Initialize
  4253  0D24  0008               	return
  4254  0D25                     __end_of_SYSTEM_Initialize:	
  4255                           
  4256                           	psect	text3
  4257  0BFB                     __ptext3:	
  4258 ;; *************** function _WDT_Initialize *****************
  4259 ;; Defined at:
  4260 ;;		line 77 in file "mcc_generated_files/mcc.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;		None
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;		None
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  1    wreg      void 
  4267 ;; Registers used:
  4268 ;;		wreg
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;Total ram usage:        0 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    4
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_SYSTEM_Initialize
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _WDT_Initialize
  4290  0BFB                     _WDT_Initialize:	
  4291                           
  4292                           ;mcc.c: 80: WDTCON = 0x16;
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in _WDT_Initialize: [wreg]
  4296  0BFB  3016               	movlw	22
  4297  0BFC  0021               	movlb	1	; select bank1
  4298  0BFD  0097               	movwf	23	;volatile
  4299  0BFE  0008               	return
  4300  0BFF                     __end_of_WDT_Initialize:	
  4301                           
  4302                           	psect	text4
  4303  0D01                     __ptext4:	
  4304 ;; *************** function _TMR2_Initialize *****************
  4305 ;; Defined at:
  4306 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0, pclath, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;Total ram usage:        0 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    5
  4327 ;; This function calls:
  4328 ;;		_TMR2_SetInterruptHandler
  4329 ;; This function is called by:
  4330 ;;		_SYSTEM_Initialize
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           
  4335                           ;psect for function _TMR2_Initialize
  4336  0D01                     _TMR2_Initialize:	
  4337                           
  4338                           ;tmr2.c: 69: PR2 = 0xFF;
  4339                           
  4340                           ;incstack = 0
  4341                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4342  0D01  30FF               	movlw	255
  4343  0D02  0020               	movlb	0	; select bank0
  4344  0D03  009B               	movwf	27	;volatile
  4345                           
  4346                           ;tmr2.c: 72: TMR2 = 0x00;
  4347  0D04  019A               	clrf	26	;volatile
  4348                           
  4349                           ;tmr2.c: 75: PIR1bits.TMR2IF = 0;
  4350  0D05  1091               	bcf	17,1	;volatile
  4351                           
  4352                           ;tmr2.c: 78: PIE1bits.TMR2IE = 1;
  4353  0D06  0021               	movlb	1	; select bank1
  4354  0D07  1491               	bsf	17,1	;volatile
  4355                           
  4356                           ;tmr2.c: 81: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  4357  0D08  30EC               	movlw	low _TMR2_DefaultInterruptHandler
  4358  0D09  0020               	movlb	0	; select bank0
  4359  0D0A  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  4360  0D0B  300B               	movlw	high _TMR2_DefaultInterruptHandler
  4361  0D0C  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  4362  0D0D  318C  2404         	fcall	_TMR2_SetInterruptHandler
  4363                           
  4364                           ;tmr2.c: 84: T2CON = 0x04;
  4365  0D0F  3004               	movlw	4
  4366  0D10  0020               	movlb	0	; select bank0
  4367  0D11  009C               	movwf	28	;volatile
  4368  0D12  0008               	return
  4369  0D13                     __end_of_TMR2_Initialize:	
  4370                           
  4371                           	psect	text5
  4372  0E01                     __ptext5:	
  4373 ;; *************** function _PIN_MANAGER_Initialize *****************
  4374 ;; Defined at:
  4375 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;		None
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;		None
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      void 
  4382 ;; Registers used:
  4383 ;;		wreg, status,2
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4393 ;;Total ram usage:        0 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    4
  4396 ;; This function calls:
  4397 ;;		Nothing
  4398 ;; This function is called by:
  4399 ;;		_SYSTEM_Initialize
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           
  4404                           ;psect for function _PIN_MANAGER_Initialize
  4405  0E01                     _PIN_MANAGER_Initialize:	
  4406                           
  4407                           ;pin_manager.c: 60: LATA = 0x00;
  4408                           
  4409                           ;incstack = 0
  4410                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4411  0E01  0022               	movlb	2	; select bank2
  4412  0E02  018C               	clrf	12	;volatile
  4413                           
  4414                           ;pin_manager.c: 61: LATC = 0x00;
  4415  0E03  018E               	clrf	14	;volatile
  4416                           
  4417                           ;pin_manager.c: 66: TRISA = 0x20;
  4418  0E04  3020               	movlw	32
  4419  0E05  0021               	movlb	1	; select bank1
  4420  0E06  008C               	movwf	12	;volatile
  4421                           
  4422                           ;pin_manager.c: 67: TRISC = 0x20;
  4423  0E07  3020               	movlw	32
  4424  0E08  008E               	movwf	14	;volatile
  4425                           
  4426                           ;pin_manager.c: 72: ANSELC = 0x20;
  4427  0E09  3020               	movlw	32
  4428  0E0A  0023               	movlb	3	; select bank3
  4429  0E0B  008E               	movwf	14	;volatile
  4430                           
  4431                           ;pin_manager.c: 73: ANSELA = 0x00;
  4432  0E0C  018C               	clrf	12	;volatile
  4433                           
  4434                           ;pin_manager.c: 78: WPUA = 0x00;
  4435  0E0D  0024               	movlb	4	; select bank4
  4436  0E0E  018C               	clrf	12	;volatile
  4437                           
  4438                           ;pin_manager.c: 79: WPUC = 0x00;
  4439  0E0F  018E               	clrf	14	;volatile
  4440                           
  4441                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 1;
  4442  0E10  0021               	movlb	1	; select bank1
  4443  0E11  1795               	bsf	21,7	;volatile
  4444                           
  4445                           ;pin_manager.c: 85: ODCONA = 0x00;
  4446  0E12  0025               	movlb	5	; select bank5
  4447  0E13  018C               	clrf	12	;volatile
  4448                           
  4449                           ;pin_manager.c: 86: ODCONC = 0x00;
  4450  0E14  018E               	clrf	14	;volatile
  4451                           
  4452                           ;pin_manager.c: 91: SLRCONA = 0x37;
  4453  0E15  3037               	movlw	55
  4454  0E16  0026               	movlb	6	; select bank6
  4455  0E17  008C               	movwf	12	;volatile
  4456                           
  4457                           ;pin_manager.c: 92: SLRCONC = 0x3F;
  4458  0E18  303F               	movlw	63
  4459  0E19  008E               	movwf	14	;volatile
  4460                           
  4461                           ;pin_manager.c: 101: RC4PPS = 0x14;
  4462  0E1A  3014               	movlw	20
  4463  0E1B  003D               	movlb	29	; select bank29
  4464  0E1C  00A4               	movwf	36	;volatile
  4465  0E1D  0008               	return
  4466  0E1E                     __end_of_PIN_MANAGER_Initialize:	
  4467                           
  4468                           	psect	text6
  4469  07F5                     __ptext6:	
  4470 ;; *************** function _OSCILLATOR_Initialize *****************
  4471 ;; Defined at:
  4472 ;;		line 61 in file "mcc_generated_files/mcc.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;		None
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;Total ram usage:        0 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    4
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_SYSTEM_Initialize
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           
  4501                           ;psect for function _OSCILLATOR_Initialize
  4502  07F5                     _OSCILLATOR_Initialize:	
  4503                           
  4504                           ;mcc.c: 64: OSCCON = 0x70;
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4508  07F5  3070               	movlw	112
  4509  07F6  0021               	movlb	1	; select bank1
  4510  07F7  0099               	movwf	25	;volatile
  4511                           
  4512                           ;mcc.c: 66: OSCSTAT = 0x00;
  4513  07F8  019A               	clrf	26	;volatile
  4514                           
  4515                           ;mcc.c: 68: OSCTUNE = 0x00;
  4516  07F9  0198               	clrf	24	;volatile
  4517                           
  4518                           ;mcc.c: 70: BORCON = 0x00;
  4519  07FA  0022               	movlb	2	; select bank2
  4520  07FB  0196               	clrf	22	;volatile
  4521  07FC                     l30:	
  4522                           ;mcc.c: 73: {
  4523                           
  4524  07FC  0021               	movlb	1	; select bank1
  4525  07FD  1B1A               	btfsc	26,6	;volatile
  4526  07FE  0008               	return
  4527  07FF  2FFC               	goto	l30
  4528  0800                     __end_of_OSCILLATOR_Initialize:	
  4529                           
  4530                           	psect	text7
  4531  0C5D                     __ptext7:	
  4532 ;; *************** function _MTOUCH_Initialize *****************
  4533 ;; Defined at:
  4534 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;		None
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;Total ram usage:        0 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    8
  4555 ;; This function calls:
  4556 ;;		_MTOUCH_Button_InitializeAll
  4557 ;;		_MTOUCH_Sensor_InitializeAll
  4558 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4559 ;;		_MTOUCH_Sensor_Scan_Initialize
  4560 ;; This function is called by:
  4561 ;;		_SYSTEM_Initialize
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           
  4566                           ;psect for function _MTOUCH_Initialize
  4567  0C5D                     _MTOUCH_Initialize:	
  4568                           
  4569                           ;mtouch.c: 82: MTOUCH_Sensor_InitializeAll();
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4573  0C5D  318C  24BD  318C   	fcall	_MTOUCH_Sensor_InitializeAll
  4574                           
  4575                           ;mtouch.c: 83: MTOUCH_Button_InitializeAll();
  4576  0C60  318F  27DE  318C   	fcall	_MTOUCH_Button_InitializeAll
  4577                           
  4578                           ;mtouch.c: 84: MTOUCH_Sensor_Sampled_ResetAll();
  4579  0C63  318D  2573  318C   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4580                           
  4581                           ;mtouch.c: 85: MTOUCH_Sensor_Scan_Initialize();
  4582  0C66  318C  2424         	fcall	_MTOUCH_Sensor_Scan_Initialize
  4583  0C68  0008               	return
  4584  0C69                     __end_of_MTOUCH_Initialize:	
  4585                           
  4586                           	psect	text8
  4587  0CBD                     __ptext8:	
  4588 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  4589 ;; Defined at:
  4590 ;;		line 169 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;		None
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  sensor          1    9[BANK0 ] enum E4132
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  1    wreg      void 
  4597 ;; Registers used:
  4598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;Total ram usage:        2 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; Hardware stack levels required when called:    7
  4611 ;; This function calls:
  4612 ;;		_MTOUCH_Sensor_Initialize
  4613 ;; This function is called by:
  4614 ;;		_MTOUCH_Initialize
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           
  4619                           ;psect for function _MTOUCH_Sensor_InitializeAll
  4620  0CBD                     _MTOUCH_Sensor_InitializeAll:	
  4621                           
  4622                           ;mtouch_sensor.c: 171: enum mtouch_sensor_names sensor;;mtouch_sensor.c: 172: for (senso
      +                          r = 0; sensor < 7; sensor++)
  4623                           
  4624                           ;incstack = 0
  4625                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  4626  0CBD  0020               	movlb	0	; select bank0
  4627  0CBE  01A9               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  4628  0CBF                     l2856:	
  4629                           
  4630                           ;mtouch_sensor.c: 173: {;mtouch_sensor.c: 174: MTOUCH_Sensor_Initialize(sensor);
  4631  0CBF  0829               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  4632  0CC0  318D  2538  318C   	fcall	_MTOUCH_Sensor_Initialize
  4633  0CC3  3001               	movlw	1
  4634  0CC4  0020               	movlb	0	; select bank0
  4635  0CC5  00A8               	movwf	??_MTOUCH_Sensor_InitializeAll
  4636  0CC6  0828               	movf	??_MTOUCH_Sensor_InitializeAll,w
  4637  0CC7  07A9               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  4638  0CC8  3007               	movlw	7
  4639  0CC9  0229               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  4640  0CCA  1803               	btfsc	3,0
  4641  0CCB  0008               	return
  4642  0CCC  2CBF               	goto	l2856
  4643  0CCD                     __end_of_MTOUCH_Sensor_InitializeAll:	
  4644                           
  4645                           	psect	text9
  4646  0D38                     __ptext9:	
  4647 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  4648 ;; Defined at:
  4649 ;;		line 155 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  sensor          1    wreg     enum E4132
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  sensor          1    7[BANK0 ] enum E4132
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      enum E4140
  4656 ;; Registers used:
  4657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;Total ram usage:        2 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    6
  4670 ;; This function calls:
  4671 ;;		_MTOUCH_Sensor_Enable
  4672 ;;		_Sensor_Sampled_Reset
  4673 ;;		___bmul
  4674 ;; This function is called by:
  4675 ;;		_MTOUCH_Sensor_InitializeAll
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _MTOUCH_Sensor_Initialize
  4681  0D38                     _MTOUCH_Sensor_Initialize:	
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  4685                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  4686  0D38  0020               	movlb	0	; select bank0
  4687  0D39  00A7               	movwf	MTOUCH_Sensor_Initialize@sensor
  4688                           
  4689                           ;mtouch_sensor.c: 157: MTOUCH_Sensor_Enable(sensor);
  4690  0D3A  0827               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4691  0D3B  318D  2525  318D   	fcall	_MTOUCH_Sensor_Enable
  4692                           
  4693                           ;mtouch_sensor.c: 158: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  4694  0D3E  3009               	movlw	9
  4695  0D3F  0020               	movlb	0	; select bank0
  4696  0D40  00A6               	movwf	??_MTOUCH_Sensor_Initialize
  4697  0D41  0826               	movf	??_MTOUCH_Sensor_Initialize,w
  4698  0D42  00A0               	movwf	___bmul@multiplicand
  4699  0D43  0827               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4700  0D44  318C  24EF  318D   	fcall	___bmul
  4701  0D47  3E20               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  4702  0D48  318C  2448         	fcall	_Sensor_Sampled_Reset
  4703  0D4A  0008               	return
  4704  0D4B                     __end_of_MTOUCH_Sensor_Initialize:	
  4705                           
  4706                           	psect	text10
  4707  0D25                     __ptext10:	
  4708 ;; *************** function _MTOUCH_Sensor_Enable *****************
  4709 ;; Defined at:
  4710 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  sensor          1    wreg     enum E4132
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  sensor          1    5[BANK0 ] enum E4132
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;Total ram usage:        2 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    5
  4731 ;; This function calls:
  4732 ;;		___bmul
  4733 ;; This function is called by:
  4734 ;;		_MTOUCH_Sensor_Initialize
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _MTOUCH_Sensor_Enable
  4740  0D25                     _MTOUCH_Sensor_Enable:	
  4741                           
  4742                           ;incstack = 0
  4743                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4744                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  4745  0D25  0020               	movlb	0	; select bank0
  4746  0D26  00A5               	movwf	MTOUCH_Sensor_Enable@sensor
  4747                           
  4748                           ;mtouch_sensor.c: 534: if(sensor < 7)
  4749  0D27  3007               	movlw	7
  4750  0D28  0225               	subwf	MTOUCH_Sensor_Enable@sensor,w
  4751  0D29  1803               	skipnc
  4752  0D2A  0008               	return
  4753                           
  4754                           ;mtouch_sensor.c: 535: mtouch_sensor[sensor].enabled = 1;
  4755  0D2B  3009               	movlw	9
  4756  0D2C  00A4               	movwf	??_MTOUCH_Sensor_Enable
  4757  0D2D  0824               	movf	??_MTOUCH_Sensor_Enable,w
  4758  0D2E  00A0               	movwf	___bmul@multiplicand
  4759  0D2F  0825               	movf	MTOUCH_Sensor_Enable@sensor,w
  4760  0D30  318C  24EF         	fcall	___bmul
  4761  0D32  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  4762  0D33  0086               	movwf	6
  4763  0D34  3001               	movlw	1	; select bank2/3
  4764  0D35  0087               	movwf	7
  4765  0D36  1401               	bsf	1,0
  4766  0D37  0008               	return
  4767  0D38                     __end_of_MTOUCH_Sensor_Enable:	
  4768                           
  4769                           	psect	text11
  4770  0FDE                     __ptext11:	
  4771 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  4772 ;; Defined at:
  4773 ;;		line 198 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;  button          1    8[BANK0 ] enum E4133
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  1    wreg      void 
  4780 ;; Registers used:
  4781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;Total ram usage:        2 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    6
  4794 ;; This function calls:
  4795 ;;		_MTOUCH_Button_Initialize
  4796 ;; This function is called by:
  4797 ;;		_MTOUCH_Initialize
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           
  4802                           ;psect for function _MTOUCH_Button_InitializeAll
  4803  0FDE                     _MTOUCH_Button_InitializeAll:	
  4804                           
  4805                           ;mtouch_button.c: 200: enum mtouch_button_names button;;mtouch_button.c: 202: __builtin_
      +                          memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_button_init));
  4806                           
  4807                           ;incstack = 0
  4808                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4809  0FDE  3090               	movlw	144
  4810  0FDF  0086               	movwf	6
  4811  0FE0  3023               	movlw	35
  4812  0FE1  0087               	movwf	7
  4813  0FE2  3039               	movlw	low (_mtouch_button_init| (0+32768))
  4814  0FE3  0084               	movwf	4
  4815  0FE4  3085               	movlw	high (_mtouch_button_init| (0+32768))
  4816  0FE5  0085               	movwf	5
  4817  0FE6  3060               	movlw	96
  4818  0FE7  0020               	movlb	0	; select bank0
  4819  0FE8  00A7               	movwf	??_MTOUCH_Button_InitializeAll
  4820  0FE9  0827               	movf	??_MTOUCH_Button_InitializeAll,w
  4821  0FEA  1903               	skipnz
  4822  0FEB  2FF0               	goto	l2864
  4823  0FEC                     u153m0:	
  4824  0FEC  0012               	moviw fsr0++
  4825  0FED  001E               	movwi fsr1++
  4826  0FEE  0BA7               	decfsz	??_MTOUCH_Button_InitializeAll,f
  4827  0FEF  2FEC               	goto	u153m0
  4828  0FF0                     l2864:	
  4829                           
  4830                           ;mtouch_button.c: 204: for (button = 0; button < 6; button++)
  4831  0FF0  0020               	movlb	0	; select bank0
  4832  0FF1  01A8               	clrf	MTOUCH_Button_InitializeAll@button
  4833  0FF2                     l2870:	
  4834                           
  4835                           ;mtouch_button.c: 205: {;mtouch_button.c: 206: MTOUCH_Button_Initialize(button);
  4836  0FF2  0828               	movf	MTOUCH_Button_InitializeAll@button,w
  4837  0FF3  3186  263B  318F   	fcall	_MTOUCH_Button_Initialize
  4838  0FF6  3001               	movlw	1
  4839  0FF7  0020               	movlb	0	; select bank0
  4840  0FF8  00A7               	movwf	??_MTOUCH_Button_InitializeAll
  4841  0FF9  0827               	movf	??_MTOUCH_Button_InitializeAll,w
  4842  0FFA  07A8               	addwf	MTOUCH_Button_InitializeAll@button,f
  4843  0FFB  3006               	movlw	6
  4844  0FFC  0228               	subwf	MTOUCH_Button_InitializeAll@button,w
  4845  0FFD  1803               	btfsc	3,0
  4846  0FFE  0008               	return
  4847  0FFF  2FF2               	goto	l2870
  4848  1000                     __end_of_MTOUCH_Button_InitializeAll:	
  4849                           
  4850                           	psect	text12
  4851  07D1                     __ptext12:	
  4852 ;; *************** function _EUSART_Initialize *****************
  4853 ;; Defined at:
  4854 ;;		line 65 in file "mcc_generated_files/eusart.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;		None
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      void 
  4861 ;; Registers used:
  4862 ;;		wreg, status,2, status,0, pclath, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;Total ram usage:        0 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    5
  4875 ;; This function calls:
  4876 ;;		_EUSART_SetErrorHandler
  4877 ;;		_EUSART_SetFramingErrorHandler
  4878 ;;		_EUSART_SetOverrunErrorHandler
  4879 ;; This function is called by:
  4880 ;;		_SYSTEM_Initialize
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _EUSART_Initialize
  4886  07D1                     _EUSART_Initialize:	
  4887                           
  4888                           ;eusart.c: 70: BAUD1CON = 0x08;
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4892  07D1  3008               	movlw	8
  4893  07D2  0023               	movlb	3	; select bank3
  4894  07D3  009F               	movwf	31	;volatile
  4895                           
  4896                           ;eusart.c: 73: RC1STA = 0x80;
  4897  07D4  3080               	movlw	128
  4898  07D5  009D               	movwf	29	;volatile
  4899                           
  4900                           ;eusart.c: 76: TX1STA = 0x24;
  4901  07D6  3024               	movlw	36
  4902  07D7  009E               	movwf	30	;volatile
  4903                           
  4904                           ;eusart.c: 79: SP1BRGL = 0x8A;
  4905  07D8  308A               	movlw	138
  4906  07D9  009B               	movwf	27	;volatile
  4907                           
  4908                           ;eusart.c: 82: SP1BRGH = 0x00;
  4909  07DA  019C               	clrf	28	;volatile
  4910                           
  4911                           ;eusart.c: 85: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  4912  07DB  3000               	movlw	0
  4913  07DC  0020               	movlb	0	; select bank0
  4914  07DD  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  4915  07DE  3000               	movlw	0
  4916  07DF  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  4917  07E0  318C  2410  3187   	fcall	_EUSART_SetFramingErrorHandler
  4918                           
  4919                           ;eusart.c: 86: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  4920  07E3  3000               	movlw	0
  4921  07E4  0020               	movlb	0	; select bank0
  4922  07E5  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  4923  07E6  3000               	movlw	0
  4924  07E7  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  4925  07E8  318C  2416  3187   	fcall	_EUSART_SetOverrunErrorHandler
  4926                           
  4927                           ;eusart.c: 87: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  4928  07EB  3000               	movlw	0
  4929  07EC  0020               	movlb	0	; select bank0
  4930  07ED  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  4931  07EE  3000               	movlw	0
  4932  07EF  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  4933  07F0  318C  240A         	fcall	_EUSART_SetErrorHandler
  4934                           
  4935                           ;eusart.c: 89: eusartRxLastError.status = 0;
  4936  07F2  0020               	movlb	0	; select bank0
  4937  07F3  01D9               	clrf	_eusartRxLastError	;volatile
  4938  07F4  0008               	return
  4939  07F5                     __end_of_EUSART_Initialize:	
  4940                           
  4941                           	psect	text13
  4942  0C16                     __ptext13:	
  4943 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  4944 ;; Defined at:
  4945 ;;		line 169 in file "mcc_generated_files/eusart.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4948 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4960 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4964 ;;Total ram usage:        2 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:    4
  4967 ;; This function calls:
  4968 ;;		Nothing
  4969 ;; This function is called by:
  4970 ;;		_EUSART_Initialize
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           
  4975                           ;psect for function _EUSART_SetOverrunErrorHandler
  4976  0C16                     _EUSART_SetOverrunErrorHandler:	
  4977                           
  4978                           ;eusart.c: 170: EUSART_OverrunErrorHandler = interruptHandler;
  4979                           
  4980                           ;incstack = 0
  4981                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  4982  0C16  0020               	movlb	0	; select bank0
  4983  0C17  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  4984  0C18  00D4               	movwf	_EUSART_OverrunErrorHandler+1
  4985  0C19  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  4986  0C1A  00D3               	movwf	_EUSART_OverrunErrorHandler
  4987  0C1B  0008               	return
  4988  0C1C                     __end_of_EUSART_SetOverrunErrorHandler:	
  4989                           
  4990                           	psect	text14
  4991  0C10                     __ptext14:	
  4992 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  4993 ;; Defined at:
  4994 ;;		line 165 in file "mcc_generated_files/eusart.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4997 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5009 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;Total ram usage:        2 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    4
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_EUSART_Initialize
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           
  5024                           ;psect for function _EUSART_SetFramingErrorHandler
  5025  0C10                     _EUSART_SetFramingErrorHandler:	
  5026                           
  5027                           ;eusart.c: 166: EUSART_FramingErrorHandler = interruptHandler;
  5028                           
  5029                           ;incstack = 0
  5030                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5031  0C10  0020               	movlb	0	; select bank0
  5032  0C11  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  5033  0C12  00D6               	movwf	_EUSART_FramingErrorHandler+1
  5034  0C13  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5035  0C14  00D5               	movwf	_EUSART_FramingErrorHandler
  5036  0C15  0008               	return
  5037  0C16                     __end_of_EUSART_SetFramingErrorHandler:	
  5038                           
  5039                           	psect	text15
  5040  0C0A                     __ptext15:	
  5041 ;; *************** function _EUSART_SetErrorHandler *****************
  5042 ;; Defined at:
  5043 ;;		line 173 in file "mcc_generated_files/eusart.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5046 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;		None
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  1    wreg      void 
  5051 ;; Registers used:
  5052 ;;		wreg
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5058 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5062 ;;Total ram usage:        2 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; Hardware stack levels required when called:    4
  5065 ;; This function calls:
  5066 ;;		Nothing
  5067 ;; This function is called by:
  5068 ;;		_EUSART_Initialize
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           
  5073                           ;psect for function _EUSART_SetErrorHandler
  5074  0C0A                     _EUSART_SetErrorHandler:	
  5075                           
  5076                           ;eusart.c: 174: EUSART_ErrorHandler = interruptHandler;
  5077                           
  5078                           ;incstack = 0
  5079                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5080  0C0A  0020               	movlb	0	; select bank0
  5081  0C0B  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  5082  0C0C  00D2               	movwf	_EUSART_ErrorHandler+1
  5083  0C0D  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5084  0C0E  00D1               	movwf	_EUSART_ErrorHandler
  5085  0C0F  0008               	return
  5086  0C10                     __end_of_EUSART_SetErrorHandler:	
  5087                           
  5088                           	psect	text16
  5089  0DB4                     __ptext16:	
  5090 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5091 ;; Defined at:
  5092 ;;		line 94 in file "mcc_generated_files/mtouch/mtouch.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;		None
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      unsigned char 
  5099 ;; Registers used:
  5100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;Total ram usage:        1 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:   10
  5113 ;; This function calls:
  5114 ;;		_MTOUCH_Button_ServiceAll
  5115 ;;		_MTOUCH_Sensor_SampleAll
  5116 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5117 ;;		_MTOUCH_Tick
  5118 ;;		_MTOUCH_needReburst
  5119 ;; This function is called by:
  5120 ;;		_main
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           
  5125                           ;psect for function _MTOUCH_Service_Mainloop
  5126  0DB4                     _MTOUCH_Service_Mainloop:	
  5127                           
  5128                           ;mtouch.c: 98: mtouch_time_toScan = 1;
  5129                           
  5130                           ;incstack = 0
  5131                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5132  0DB4  0020               	movlb	0	; select bank0
  5133  0DB5  01D8               	clrf	_mtouch_time_toScan
  5134  0DB6  0AD8               	incf	_mtouch_time_toScan,f
  5135                           
  5136                           ;mtouch.c: 101: {;mtouch.c: 102: if(MTOUCH_Sensor_SampleAll() == 0)
  5137                           
  5138                           ;mtouch.c: 100: if(mtouch_time_toScan)
  5139  0DB7  318D  259E  318D   	fcall	_MTOUCH_Sensor_SampleAll
  5140  0DBA  3A00               	xorlw	0
  5141  0DBB  1903               	btfsc	3,2
  5142  0DBC  0008               	return
  5143                           
  5144                           ;mtouch.c: 104: MTOUCH_Button_ServiceAll();
  5145  0DBD  318C  24AD  318D   	fcall	_MTOUCH_Button_ServiceAll
  5146                           
  5147                           ;mtouch.c: 105: mtouch_time_toScan = MTOUCH_needReburst();
  5148  0DC0  3180  2002  318D   	fcall	_MTOUCH_needReburst
  5149  0DC3  0020               	movlb	0	; select bank0
  5150  0DC4  00BD               	movwf	??_MTOUCH_Service_Mainloop
  5151  0DC5  083D               	movf	??_MTOUCH_Service_Mainloop,w
  5152  0DC6  00D8               	movwf	_mtouch_time_toScan
  5153                           
  5154                           ;mtouch.c: 106: MTOUCH_Sensor_Sampled_ResetAll();
  5155  0DC7  318D  2573  318D   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5156                           
  5157                           ;mtouch.c: 107: MTOUCH_Tick();
  5158  0DCA  318B  23F8         	fcall	_MTOUCH_Tick
  5159  0DCC  0008               	return
  5160  0DCD                     __end_of_MTOUCH_Service_Mainloop:	
  5161                           
  5162                           	psect	text17
  5163  0002                     __ptext17:	
  5164 ;; *************** function _MTOUCH_needReburst *****************
  5165 ;; Defined at:
  5166 ;;		line 131 in file "mcc_generated_files/mtouch/mtouch.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;		None
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  needReburst     1    0        unsigned char 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      unsigned char 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;Total ram usage:        1 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    4
  5187 ;; This function calls:
  5188 ;;		Nothing
  5189 ;; This function is called by:
  5190 ;;		_MTOUCH_Service_Mainloop
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           
  5195                           ;psect for function _MTOUCH_needReburst
  5196  0002                     _MTOUCH_needReburst:	
  5197                           
  5198                           ;mtouch.c: 135: return needReburst;
  5199                           
  5200                           ;incstack = 0
  5201                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  5202  0002  3000               	movlw	0
  5203  0003  0008               	return
  5204  0004                     __end_of_MTOUCH_needReburst:	
  5205                           
  5206                           	psect	text18
  5207  0BF8                     __ptext18:	
  5208 ;; *************** function _MTOUCH_Tick *****************
  5209 ;; Defined at:
  5210 ;;		line 121 in file "mcc_generated_files/mtouch/mtouch.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;		None
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      void 
  5217 ;; Registers used:
  5218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;Total ram usage:        0 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    6
  5231 ;; This function calls:
  5232 ;;		_MTOUCH_Button_Tick
  5233 ;; This function is called by:
  5234 ;;		_MTOUCH_Service_Mainloop
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function _MTOUCH_Tick
  5240  0BF8                     _MTOUCH_Tick:	
  5241                           
  5242                           ;mtouch.c: 123: MTOUCH_Button_Tick();
  5243                           
  5244                           ;incstack = 0
  5245                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5246  0BF8  3187  27AC         	fcall	_MTOUCH_Button_Tick
  5247  0BFA  0008               	return
  5248  0BFB                     __end_of_MTOUCH_Tick:	
  5249                           
  5250                           	psect	text19
  5251  07AC                     __ptext19:	
  5252 ;; *************** function _MTOUCH_Button_Tick *****************
  5253 ;; Defined at:
  5254 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  i               1    8[BANK0 ] unsigned char 
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;Total ram usage:        5 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    5
  5275 ;; This function calls:
  5276 ;;		_Button_Tick_helper
  5277 ;; This function is called by:
  5278 ;;		_MTOUCH_Tick
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _MTOUCH_Button_Tick
  5284  07AC                     _MTOUCH_Button_Tick:	
  5285                           
  5286                           ;mtouch_button.c: 326: uint8_t i;;mtouch_button.c: 327: for (i = 0; i < 6; i++)
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5290  07AC  0020               	movlb	0	; select bank0
  5291  07AD  01A8               	clrf	MTOUCH_Button_Tick@i
  5292  07AE                     l2882:	
  5293                           
  5294                           ;mtouch_button.c: 328: {;mtouch_button.c: 329: Button_Tick_helper(&mtouch_button[i]);
  5295  07AE  0828               	movf	MTOUCH_Button_Tick@i,w
  5296  07AF  00A4               	movwf	??_MTOUCH_Button_Tick
  5297  07B0  01A5               	clrf	??_MTOUCH_Button_Tick+1
  5298  07B1  0EA4               	swapf	??_MTOUCH_Button_Tick,f
  5299  07B2  0EA5               	swapf	??_MTOUCH_Button_Tick+1,f
  5300  07B3  30F0               	movlw	240
  5301  07B4  05A5               	andwf	??_MTOUCH_Button_Tick+1,f
  5302  07B5  0824               	movf	??_MTOUCH_Button_Tick,w
  5303  07B6  390F               	andlw	15
  5304  07B7  04A5               	iorwf	??_MTOUCH_Button_Tick+1,f
  5305  07B8  30F0               	movlw	240
  5306  07B9  05A4               	andwf	??_MTOUCH_Button_Tick,f
  5307  07BA  3090               	movlw	144
  5308  07BB  00A6               	movwf	??_MTOUCH_Button_Tick+2
  5309  07BC  3023               	movlw	35
  5310  07BD  00A7               	movwf	??_MTOUCH_Button_Tick+3
  5311  07BE  0824               	movf	??_MTOUCH_Button_Tick,w
  5312  07BF  0726               	addwf	??_MTOUCH_Button_Tick+2,w
  5313  07C0  00A0               	movwf	Button_Tick_helper@button
  5314  07C1  0825               	movf	??_MTOUCH_Button_Tick+1,w
  5315  07C2  3D27               	addwfc	??_MTOUCH_Button_Tick+3,w
  5316  07C3  00A1               	movwf	Button_Tick_helper@button+1
  5317  07C4  3187  275F  3187   	fcall	_Button_Tick_helper
  5318  07C7  3001               	movlw	1
  5319  07C8  0020               	movlb	0	; select bank0
  5320  07C9  00A4               	movwf	??_MTOUCH_Button_Tick
  5321  07CA  0824               	movf	??_MTOUCH_Button_Tick,w
  5322  07CB  07A8               	addwf	MTOUCH_Button_Tick@i,f
  5323  07CC  3006               	movlw	6
  5324  07CD  0228               	subwf	MTOUCH_Button_Tick@i,w
  5325  07CE  1803               	btfsc	3,0
  5326  07CF  0008               	return
  5327  07D0  2FAE               	goto	l2882
  5328  07D1                     __end_of_MTOUCH_Button_Tick:	
  5329                           
  5330                           	psect	text20
  5331  075F                     __ptext20:	
  5332 ;; *************** function _Button_Tick_helper *****************
  5333 ;; Defined at:
  5334 ;;		line 332 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  button          2    0[BANK0 ] PTR struct .
  5337 ;;		 -> mtouch_button(96), 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5349 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;Total ram usage:        4 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    4
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_MTOUCH_Button_Tick
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           
  5364                           ;psect for function _Button_Tick_helper
  5365  075F                     _Button_Tick_helper:	
  5366                           
  5367                           ;mtouch_button.c: 335: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  5371  075F  0020               	movlb	0	; select bank0
  5372  0760  0820               	movf	Button_Tick_helper@button,w
  5373  0761  0086               	movwf	6
  5374  0762  0821               	movf	Button_Tick_helper@button+1,w
  5375  0763  0087               	movwf	7
  5376  0764  3142               	addfsr 1,2
  5377  0765  3002               	movlw	2
  5378  0766  0601               	xorwf	1,w
  5379  0767  1D03               	btfss	3,2
  5380  0768  0008               	return
  5381                           
  5382                           ;mtouch_button.c: 336: {;mtouch_button.c: 337: (button->counter)++;
  5383  0769  0820               	movf	Button_Tick_helper@button,w
  5384  076A  0086               	movwf	6
  5385  076B  0821               	movf	Button_Tick_helper@button+1,w
  5386  076C  0087               	movwf	7
  5387  076D  314A               	addfsr 1,10
  5388  076E  3001               	movlw	1
  5389  076F  0781               	addwf	1,f
  5390  0770  3141               	addfsr 1,1
  5391  0771  1803               	skipnc
  5392  0772  0A81               	incf	1,f
  5393                           
  5394                           ;mtouch_button.c: 338: if (button->counter == (mtouch_button_statecounter_t)0)
  5395  0773  0820               	movf	Button_Tick_helper@button,w
  5396  0774  0086               	movwf	6
  5397  0775  0821               	movf	Button_Tick_helper@button+1,w
  5398  0776  0087               	movwf	7
  5399  0777  314A               	addfsr 1,10
  5400  0778  0016               	moviw fsr1++
  5401  0779  0401               	iorwf	1,w
  5402  077A  1D03               	btfss	3,2
  5403  077B  0008               	return
  5404                           
  5405                           ;mtouch_button.c: 339: {;mtouch_button.c: 340: button->counter = (mtouch_button_statecou
      +                          nter_t)0xFFFF;
  5406  077C  0820               	movf	Button_Tick_helper@button,w
  5407  077D  0086               	movwf	6
  5408  077E  0821               	movf	Button_Tick_helper@button+1,w
  5409  077F  0087               	movwf	7
  5410  0780  314A               	addfsr 1,10
  5411  0781  30FF               	movlw	255
  5412  0782  3FC0               	movwi [0]fsr1
  5413  0783  30FF               	movlw	255
  5414  0784  3FC1               	movwi [1]fsr1
  5415  0785  0008               	return
  5416  0786                     __end_of_Button_Tick_helper:	
  5417                           
  5418                           	psect	text21
  5419  0D73                     __ptext21:	
  5420 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  5421 ;; Defined at:
  5422 ;;		line 598 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;  sensor          1    2[BANK0 ] PTR struct .
  5427 ;;		 -> mtouch_sensor(63), 
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;Total ram usage:        2 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    5
  5444 ;; This function calls:
  5445 ;;		_Sensor_Sampled_Reset
  5446 ;; This function is called by:
  5447 ;;		_main
  5448 ;;		_MTOUCH_Initialize
  5449 ;;		_MTOUCH_Service_Mainloop
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  5455  0D73                     _MTOUCH_Sensor_Sampled_ResetAll:	
  5456                           
  5457                           ;mtouch_sensor.c: 600: mtouch_sensor_t* sensor;;mtouch_sensor.c: 601: for(sensor = &mtou
      +                          ch_sensor[0];sensor<= &mtouch_sensor[7-1];sensor++)
  5458                           
  5459                           ;incstack = 0
  5460                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  5461  0D73  3020               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  5462  0D74  0020               	movlb	0	; select bank0
  5463  0D75  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5464  0D76  0821               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5465  0D77  00A2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  5466  0D78                     L1:	
  5467  0D78  3056               	movlw	(low ((_mtouch_sensor| (0+256)+54)))& (0+255)
  5468  0D79  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5469  0D7A  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5470  0D7B  0221               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5471  0D7C  1C03               	btfss	3,0
  5472  0D7D  0008               	return
  5473                           
  5474                           ;mtouch_sensor.c: 602: {;mtouch_sensor.c: 603: Sensor_Sampled_Reset(sensor);
  5475  0D7E  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5476  0D7F  318C  2448  318D   	fcall	_Sensor_Sampled_Reset
  5477  0D82  3009               	movlw	9
  5478  0D83  0020               	movlb	0	; select bank0
  5479  0D84  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5480  0D85  0821               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5481  0D86  07A2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  5482  0D87  2D78               	goto	L1
  5483  0D88                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  5484                           
  5485                           	psect	text22
  5486  0C48                     __ptext22:	
  5487 ;; *************** function _Sensor_Sampled_Reset *****************
  5488 ;; Defined at:
  5489 ;;		line 615 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  sensor          1    wreg     PTR struct .
  5492 ;;		 -> mtouch_sensor(63), 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  sensor          1    0[BANK0 ] PTR struct .
  5495 ;;		 -> mtouch_sensor(63), 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      void 
  5498 ;; Registers used:
  5499 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5508 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5509 ;;Total ram usage:        1 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    4
  5512 ;; This function calls:
  5513 ;;		Nothing
  5514 ;; This function is called by:
  5515 ;;		_MTOUCH_Sensor_Initialize
  5516 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _Sensor_Sampled_Reset
  5522  0C48                     _Sensor_Sampled_Reset:	
  5523                           
  5524                           ;incstack = 0
  5525                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5526                           ;Sensor_Sampled_Reset@sensor stored from wreg
  5527  0C48  0020               	movlb	0	; select bank0
  5528  0C49  00A0               	movwf	Sensor_Sampled_Reset@sensor
  5529                           
  5530                           ;mtouch_sensor.c: 617: sensor->sampled = 0;
  5531  0C4A  0820               	movf	Sensor_Sampled_Reset@sensor,w
  5532  0C4B  3E08               	addlw	8
  5533  0C4C  0086               	movwf	6
  5534  0C4D  3001               	movlw	1	; select bank2/3
  5535  0C4E  0087               	movwf	7
  5536  0C4F  1081               	bcf	1,1
  5537  0C50  0008               	return
  5538  0C51                     __end_of_Sensor_Sampled_Reset:	
  5539                           
  5540                           	psect	text23
  5541  0D9E                     __ptext23:	
  5542 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  5543 ;; Defined at:
  5544 ;;		line 201 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;		None
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;  sensor          1   28[BANK0 ] enum E4132
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      unsigned char 
  5551 ;; Registers used:
  5552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;Total ram usage:        2 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    9
  5565 ;; This function calls:
  5566 ;;		_Sensor_Service
  5567 ;; This function is called by:
  5568 ;;		_MTOUCH_Service_Mainloop
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           
  5573                           ;psect for function _MTOUCH_Sensor_SampleAll
  5574  0D9E                     _MTOUCH_Sensor_SampleAll:	
  5575                           
  5576                           ;mtouch_sensor.c: 203: enum mtouch_sensor_names sensor;;mtouch_sensor.c: 204: for (senso
      +                          r = 0; sensor < 7; sensor++)
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5580  0D9E  0020               	movlb	0	; select bank0
  5581  0D9F  01BC               	clrf	MTOUCH_Sensor_SampleAll@sensor
  5582  0DA0                     l3148:	
  5583                           
  5584                           ;mtouch_sensor.c: 205: {;mtouch_sensor.c: 206: if(Sensor_Service(sensor)!= MTOUCH_SENSOR
      +                          _ERROR_none)
  5585  0DA0  083C               	movf	MTOUCH_Sensor_SampleAll@sensor,w
  5586  0DA1  3186  2681  318D   	fcall	_Sensor_Service
  5587  0DA4  3A00               	xorlw	0
  5588  0DA5  1903               	skipnz
  5589  0DA6  2DA9               	goto	l3154
  5590                           
  5591                           ;mtouch_sensor.c: 207: return 0;
  5592  0DA7  3000               	movlw	0
  5593  0DA8  0008               	return
  5594  0DA9                     l3154:	
  5595  0DA9  3001               	movlw	1
  5596  0DAA  0020               	movlb	0	; select bank0
  5597  0DAB  00BB               	movwf	??_MTOUCH_Sensor_SampleAll
  5598  0DAC  083B               	movf	??_MTOUCH_Sensor_SampleAll,w
  5599  0DAD  07BC               	addwf	MTOUCH_Sensor_SampleAll@sensor,f
  5600  0DAE  3007               	movlw	7
  5601  0DAF  023C               	subwf	MTOUCH_Sensor_SampleAll@sensor,w
  5602  0DB0  1C03               	skipc
  5603  0DB1  2DA0               	goto	l3148
  5604                           
  5605                           ;mtouch_sensor.c: 208: };mtouch_sensor.c: 209: return 1;
  5606  0DB2  3001               	movlw	1
  5607  0DB3  0008               	return
  5608  0DB4                     __end_of_MTOUCH_Sensor_SampleAll:	
  5609                           
  5610                           	psect	text24
  5611  0681                     __ptext24:	
  5612 ;; *************** function _Sensor_Service *****************
  5613 ;; Defined at:
  5614 ;;		line 218 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;  name            1    wreg     enum E4132
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  name            1   24[BANK0 ] enum E4132
  5619 ;;  sensor          1   26[BANK0 ] PTR struct .
  5620 ;;		 -> mtouch_sensor(63), 
  5621 ;;  error           1   25[BANK0 ] enum E4140
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      enum E4140
  5624 ;; Registers used:
  5625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5635 ;;Total ram usage:        5 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    8
  5638 ;; This function calls:
  5639 ;;		_Sensor_Acquisition
  5640 ;;		_Sensor_DefaultCallback
  5641 ;;		_Sensor_RawSample_Update
  5642 ;;		_Sensor_isEnabled
  5643 ;;		_Sensor_setSampled
  5644 ;;		___bmul
  5645 ;; This function is called by:
  5646 ;;		_MTOUCH_Sensor_SampleAll
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _Sensor_Service
  5652  0681                     _Sensor_Service:	
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5656                           ;Sensor_Service@name stored from wreg
  5657  0681  0020               	movlb	0	; select bank0
  5658  0682  00B8               	movwf	Sensor_Service@name
  5659                           
  5660                           ;mtouch_sensor.c: 220: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  5661  0683  3009               	movlw	9
  5662  0684  00B6               	movwf	??_Sensor_Service
  5663  0685  0836               	movf	??_Sensor_Service,w
  5664  0686  00A0               	movwf	___bmul@multiplicand
  5665  0687  0838               	movf	Sensor_Service@name,w
  5666  0688  318C  24EF  3186   	fcall	___bmul
  5667  068B  3E20               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  5668  068C  0020               	movlb	0	; select bank0
  5669  068D  00B7               	movwf	??_Sensor_Service+1
  5670  068E  0837               	movf	??_Sensor_Service+1,w
  5671  068F  00BA               	movwf	Sensor_Service@sensor
  5672                           
  5673                           ;mtouch_sensor.c: 221: enum mtouch_sensor_error error = Sensor_Acquisition(sensor);
  5674  0690  083A               	movf	Sensor_Service@sensor,w
  5675  0691  3185  2599  3186   	fcall	_Sensor_Acquisition
  5676  0694  0020               	movlb	0	; select bank0
  5677  0695  00B6               	movwf	??_Sensor_Service
  5678  0696  0836               	movf	??_Sensor_Service,w
  5679  0697  00B9               	movwf	Sensor_Service@error
  5680                           
  5681                           ;mtouch_sensor.c: 224: switch(error)
  5682  0698  2EB3               	goto	l3040
  5683  0699                     l3032:	
  5684                           
  5685                           ;mtouch_sensor.c: 227: {;mtouch_sensor.c: 228: if(Sensor_isEnabled(sensor))
  5686  0699  083A               	movf	Sensor_Service@sensor,w
  5687  069A  318C  248F  3186   	fcall	_Sensor_isEnabled
  5688  069D  3A00               	xorlw	0
  5689  069E  1903               	skipnz
  5690  069F  2EC1               	goto	l3042
  5691                           
  5692                           ;mtouch_sensor.c: 229: {;mtouch_sensor.c: 230: Sensor_RawSample_Update(sensor);
  5693  06A0  0020               	movlb	0	; select bank0
  5694  06A1  083A               	movf	Sensor_Service@sensor,w
  5695  06A2  318D  25E7  3186   	fcall	_Sensor_RawSample_Update
  5696                           
  5697                           ;mtouch_sensor.c: 231: Sensor_setSampled(sensor);
  5698  06A5  0020               	movlb	0	; select bank0
  5699  06A6  083A               	movf	Sensor_Service@sensor,w
  5700  06A7  318C  243F  3186   	fcall	_Sensor_setSampled
  5701                           
  5702                           ;mtouch_sensor.c: 232: callback_sampled(name);
  5703  06AA  0020               	movlb	0	; select bank0
  5704  06AB  0838               	movf	Sensor_Service@name,w
  5705  06AC  00B6               	movwf	??_Sensor_Service
  5706  06AD  0836               	movf	??_Sensor_Service,w
  5707  06AE  00A0               	movwf	Sensor_DefaultCallback@sensor
  5708  06AF  318B  23EF  3186   	fcall	_Sensor_DefaultCallback
  5709  06B2  2EC1               	goto	l3042
  5710  06B3                     l3040:	
  5711  06B3  0839               	movf	Sensor_Service@error,w
  5712                           
  5713                           ; Switch size 1, requested type "simple"
  5714                           ; Number of cases is 4, Range of values is 0 to 255
  5715                           ; switch strategies available:
  5716                           ; Name         Instructions Cycles
  5717                           ; simple_byte           13     7 (average)
  5718                           ; jumptable            260     6 (fixed)
  5719                           ;	Chosen strategy is simple_byte
  5720  06B4  3A00               	xorlw	0	; case 0
  5721  06B5  1903               	skipnz
  5722  06B6  2E99               	goto	l3032
  5723  06B7  3AFD               	xorlw	253	; case 253
  5724  06B8  1903               	skipnz
  5725  06B9  2EC1               	goto	l3042
  5726  06BA  3A03               	xorlw	3	; case 254
  5727  06BB  1903               	skipnz
  5728  06BC  2EC1               	goto	l3042
  5729  06BD  3A01               	xorlw	1	; case 255
  5730  06BE  1903               	skipnz
  5731  06BF  2EC1               	goto	l3042
  5732  06C0  2EC1               	goto	l3042
  5733  06C1                     l3042:	
  5734                           
  5735                           ;mtouch_sensor.c: 244: return error;
  5736  06C1  0020               	movlb	0	; select bank0
  5737  06C2  0839               	movf	Sensor_Service@error,w
  5738  06C3  0008               	return
  5739  06C4                     __end_of_Sensor_Service:	
  5740                           
  5741                           	psect	text25
  5742  0C3F                     __ptext25:	
  5743 ;; *************** function _Sensor_setSampled *****************
  5744 ;; Defined at:
  5745 ;;		line 620 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  sensor          1    wreg     PTR struct .
  5748 ;;		 -> mtouch_sensor(63), 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  sensor          1    0[BANK0 ] PTR struct .
  5751 ;;		 -> mtouch_sensor(63), 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5765 ;;Total ram usage:        1 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    4
  5768 ;; This function calls:
  5769 ;;		Nothing
  5770 ;; This function is called by:
  5771 ;;		_Sensor_Service
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           
  5776                           ;psect for function _Sensor_setSampled
  5777  0C3F                     _Sensor_setSampled:	
  5778                           
  5779                           ;incstack = 0
  5780                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5781                           ;Sensor_setSampled@sensor stored from wreg
  5782  0C3F  0020               	movlb	0	; select bank0
  5783  0C40  00A0               	movwf	Sensor_setSampled@sensor
  5784                           
  5785                           ;mtouch_sensor.c: 622: sensor->sampled = 1;
  5786  0C41  0820               	movf	Sensor_setSampled@sensor,w
  5787  0C42  3E08               	addlw	8
  5788  0C43  0086               	movwf	6
  5789  0C44  3001               	movlw	1	; select bank2/3
  5790  0C45  0087               	movwf	7
  5791  0C46  1481               	bsf	1,1
  5792  0C47  0008               	return
  5793  0C48                     __end_of_Sensor_setSampled:	
  5794                           
  5795                           	psect	text26
  5796  0DE7                     __ptext26:	
  5797 ;; *************** function _Sensor_RawSample_Update *****************
  5798 ;; Defined at:
  5799 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  sensor          1    wreg     PTR struct .
  5802 ;;		 -> mtouch_sensor(63), 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  sensor          1    0[BANK0 ] PTR struct .
  5805 ;;		 -> mtouch_sensor(63), 
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  1    wreg      void 
  5808 ;; Registers used:
  5809 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;Total ram usage:        1 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    4
  5822 ;; This function calls:
  5823 ;;		Nothing
  5824 ;; This function is called by:
  5825 ;;		_Sensor_Service
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           
  5830                           ;psect for function _Sensor_RawSample_Update
  5831  0DE7                     _Sensor_RawSample_Update:	
  5832                           
  5833                           ;incstack = 0
  5834                           ; Regs used in _Sensor_RawSample_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  5835                           ;Sensor_RawSample_Update@sensor stored from wreg
  5836  0DE7  0020               	movlb	0	; select bank0
  5837  0DE8  00A0               	movwf	Sensor_RawSample_Update@sensor
  5838                           
  5839                           ;mtouch_sensor.c: 483: if (INTCONbits.GIE == (uint8_t)1)
  5840  0DE9  1F8B               	btfss	11,7	;volatile
  5841  0DEA  2DF7               	goto	l2730
  5842                           
  5843                           ;mtouch_sensor.c: 484: {;mtouch_sensor.c: 485: INTCONbits.GIE = (uint8_t)0;
  5844  0DEB  138B               	bcf	11,7	;volatile
  5845                           
  5846                           ;mtouch_sensor.c: 486: sensor->rawSample = packet_sample;
  5847  0DEC  0820               	movf	Sensor_RawSample_Update@sensor,w
  5848  0DED  3E06               	addlw	6
  5849  0DEE  0086               	movwf	6
  5850  0DEF  3001               	movlw	1	; select bank2/3
  5851  0DF0  0087               	movwf	7
  5852  0DF1  084F               	movf	_packet_sample,w
  5853  0DF2  3FC0               	movwi [0]fsr1
  5854  0DF3  0850               	movf	_packet_sample+1,w
  5855  0DF4  3FC1               	movwi [1]fsr1
  5856                           
  5857                           ;mtouch_sensor.c: 487: INTCONbits.GIE = (uint8_t)1;
  5858  0DF5  178B               	bsf	11,7	;volatile
  5859                           
  5860                           ;mtouch_sensor.c: 488: }
  5861  0DF6  0008               	return
  5862  0DF7                     l2730:	
  5863                           
  5864                           ;mtouch_sensor.c: 489: else;mtouch_sensor.c: 490: {;mtouch_sensor.c: 491: sensor->rawSam
      +                          ple = packet_sample;
  5865  0DF7  0820               	movf	Sensor_RawSample_Update@sensor,w
  5866  0DF8  3E06               	addlw	6
  5867  0DF9  0086               	movwf	6
  5868  0DFA  3001               	movlw	1	; select bank2/3
  5869  0DFB  0087               	movwf	7
  5870  0DFC  084F               	movf	_packet_sample,w
  5871  0DFD  3FC0               	movwi [0]fsr1
  5872  0DFE  0850               	movf	_packet_sample+1,w
  5873  0DFF  3FC1               	movwi [1]fsr1
  5874  0E00  0008               	return
  5875  0E01                     __end_of_Sensor_RawSample_Update:	
  5876                           
  5877                           	psect	text27
  5878  0BEF                     __ptext27:	
  5879 ;; *************** function _Sensor_DefaultCallback *****************
  5880 ;; Defined at:
  5881 ;;		line 501 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  sensor          1    0[BANK0 ] enum E4132
  5884 ;; Auto vars:     Size  Location     Type
  5885 ;;		None
  5886 ;; Return value:  Size  Location     Type
  5887 ;;                  1    wreg      void 
  5888 ;; Registers used:
  5889 ;;		None
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5895 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5898 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5899 ;;Total ram usage:        1 bytes
  5900 ;; Hardware stack levels used:    1
  5901 ;; Hardware stack levels required when called:    4
  5902 ;; This function calls:
  5903 ;;		Nothing
  5904 ;; This function is called by:
  5905 ;;		_Sensor_Service
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _Sensor_DefaultCallback
  5911  0BEF                     _Sensor_DefaultCallback:	
  5912                           
  5913                           ;incstack = 0
  5914                           ; Regs used in _Sensor_DefaultCallback: []
  5915  0BEF  0008               	return
  5916  0BF0                     __end_of_Sensor_DefaultCallback:	
  5917                           
  5918                           	psect	text28
  5919  0599                     __ptext28:	
  5920 ;; *************** function _Sensor_Acquisition *****************
  5921 ;; Defined at:
  5922 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  sensor          1    wreg     PTR struct .
  5925 ;;		 -> mtouch_sensor(63), 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  sensor          1   21[BANK0 ] PTR struct .
  5928 ;;		 -> mtouch_sensor(63), 
  5929 ;;  retry           1   20[BANK0 ] unsigned char 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      enum E4140
  5932 ;; Registers used:
  5933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;Total ram usage:        4 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    7
  5946 ;; This function calls:
  5947 ;;		_Sensor_Acq_ExecutePacket
  5948 ;;		_Sensor_Scanfrequency_Evaluation
  5949 ;;		_Sensor_isEnabled
  5950 ;;		_Sensor_setActive
  5951 ;;		_Sensor_setInactive
  5952 ;;		_abs
  5953 ;; This function is called by:
  5954 ;;		_Sensor_Service
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           
  5959                           ;psect for function _Sensor_Acquisition
  5960  0599                     _Sensor_Acquisition:	
  5961                           
  5962                           ;incstack = 0
  5963                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5964                           ;Sensor_Acquisition@sensor stored from wreg
  5965  0599  0020               	movlb	0	; select bank0
  5966  059A  00B5               	movwf	Sensor_Acquisition@sensor
  5967                           
  5968                           ;mtouch_sensor.c: 261: uint8_t retry = (uint8_t)5;
  5969  059B  3005               	movlw	5
  5970  059C  00B2               	movwf	??_Sensor_Acquisition
  5971  059D  0832               	movf	??_Sensor_Acquisition,w
  5972  059E  00B4               	movwf	Sensor_Acquisition@retry
  5973                           
  5974                           ;mtouch_sensor.c: 263: if(!Sensor_isEnabled(sensor))
  5975  059F  0835               	movf	Sensor_Acquisition@sensor,w
  5976  05A0  318C  248F  3185   	fcall	_Sensor_isEnabled
  5977  05A3  3A00               	xorlw	0
  5978  05A4  1D03               	skipz
  5979  05A5  2DB0               	goto	l2704
  5980  05A6                     l2694:	
  5981                           
  5982                           ;mtouch_sensor.c: 264: return MTOUCH_SENSOR_ERROR_none;
  5983  05A6  3000               	movlw	0
  5984  05A7  0008               	return
  5985  05A8                     l2698:	
  5986                           
  5987                           ;mtouch_sensor.c: 267: {;mtouch_sensor.c: 268: retry--;
  5988  05A8  3001               	movlw	1
  5989  05A9  0020               	movlb	0	; select bank0
  5990  05AA  02B4               	subwf	Sensor_Acquisition@retry,f
  5991                           
  5992                           ;mtouch_sensor.c: 269: if(retry == 0)
  5993  05AB  0834               	movf	Sensor_Acquisition@retry,w
  5994  05AC  1D03               	btfss	3,2
  5995  05AD  2DB0               	goto	l2704
  5996                           
  5997                           ;mtouch_sensor.c: 270: {;mtouch_sensor.c: 271: return MTOUCH_SENSOR_ERROR_tooManyRetries
      +                          ;
  5998  05AE  30FC               	movlw	252
  5999  05AF  0008               	return
  6000  05B0                     l2704:	
  6001  05B0  0020               	movlb	0	; select bank0
  6002  05B1  0835               	movf	Sensor_Acquisition@sensor,w
  6003  05B2  3183  232B  3185   	fcall	_Sensor_Acq_ExecutePacket
  6004  05B5  3A00               	xorlw	0
  6005  05B6  1D03               	skipz
  6006  05B7  2DA8               	goto	l2698
  6007                           
  6008                           ;mtouch_sensor.c: 272: };mtouch_sensor.c: 273: };mtouch_sensor.c: 275: if((mtouch_sensor
      +                          _packetsample_t)abs(packet_sample - sensor->rawSample) > (mtouch_sensor_packetsample_t)(
      +                          sensor->oversampling)<<2)
  6009  05B8  0020               	movlb	0	; select bank0
  6010  05B9  0835               	movf	Sensor_Acquisition@sensor,w
  6011  05BA  3E06               	addlw	6
  6012  05BB  0086               	movwf	6
  6013  05BC  3001               	movlw	1	; select bank2/3
  6014  05BD  0087               	movwf	7
  6015  05BE  3F40               	moviw [0]fsr1
  6016  05BF  024F               	subwf	_packet_sample,w
  6017  05C0  00A0               	movwf	abs@a
  6018  05C1  3F41               	moviw [1]fsr1
  6019  05C2  3B50               	subwfb	_packet_sample+1,w
  6020  05C3  00A1               	movwf	abs@a+1
  6021  05C4  318C  249E  3185   	fcall	_abs
  6022  05C7  0020               	movlb	0	; select bank0
  6023  05C8  0835               	movf	Sensor_Acquisition@sensor,w
  6024  05C9  3E05               	addlw	5
  6025  05CA  0086               	movwf	6
  6026  05CB  3001               	movlw	1	; select bank2/3
  6027  05CC  0087               	movwf	7
  6028  05CD  0801               	movf	1,w
  6029  05CE  00B2               	movwf	??_Sensor_Acquisition
  6030  05CF  01B3               	clrf	??_Sensor_Acquisition+1
  6031  05D0  35B2               	lslf	??_Sensor_Acquisition,f
  6032  05D1  0DB3               	rlf	??_Sensor_Acquisition+1,f
  6033  05D2  35B2               	lslf	??_Sensor_Acquisition,f
  6034  05D3  0DB3               	rlf	??_Sensor_Acquisition+1,f
  6035  05D4  0821               	movf	?_abs+1,w
  6036  05D5  0233               	subwf	??_Sensor_Acquisition+1,w
  6037  05D6  1D03               	skipz
  6038  05D7  2DDA               	goto	u1315
  6039  05D8  0820               	movf	?_abs,w
  6040  05D9  0232               	subwf	??_Sensor_Acquisition,w
  6041  05DA                     u1315:	
  6042  05DA  1803               	skipnc
  6043  05DB  2DE5               	goto	l2716
  6044                           
  6045                           ;mtouch_sensor.c: 276: {;mtouch_sensor.c: 277: Sensor_setActive(sensor);
  6046  05DC  0835               	movf	Sensor_Acquisition@sensor,w
  6047  05DD  318C  242D  3185   	fcall	_Sensor_setActive
  6048                           
  6049                           ;mtouch_sensor.c: 278: return Sensor_Scanfrequency_Evaluation(sensor);
  6050  05E0  0020               	movlb	0	; select bank0
  6051  05E1  0835               	movf	Sensor_Acquisition@sensor,w
  6052  05E2  3184  246E         	fcall	_Sensor_Scanfrequency_Evaluation
  6053  05E4  0008               	return
  6054  05E5                     l2716:	
  6055                           
  6056                           ;mtouch_sensor.c: 280: else;mtouch_sensor.c: 281: {;mtouch_sensor.c: 282: Sensor_setInac
      +                          tive(sensor);
  6057  05E5  0835               	movf	Sensor_Acquisition@sensor,w
  6058  05E6  318C  2436  3185   	fcall	_Sensor_setInactive
  6059  05E9  2DA6               	goto	l2694
  6060  05EA                     __end_of_Sensor_Acquisition:	
  6061                           
  6062                           	psect	text29
  6063  0C9E                     __ptext29:	
  6064 ;; *************** function _abs *****************
  6065 ;; Defined at:
  6066 ;;		line 4 in file "/Applications/microchip/xc8/v2.05/pic/sources/c90/common/abs.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;  a               2    0[BANK0 ] int 
  6069 ;; Auto vars:     Size  Location     Type
  6070 ;;		None
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  2    0[BANK0 ] int 
  6073 ;; Registers used:
  6074 ;;		wreg, status,2, status,0
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6080 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;Total ram usage:        4 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:    4
  6087 ;; This function calls:
  6088 ;;		Nothing
  6089 ;; This function is called by:
  6090 ;;		_Sensor_Acquisition
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           
  6095                           ;psect for function _abs
  6096  0C9E                     _abs:	
  6097                           
  6098                           ;incstack = 0
  6099                           ; Regs used in _abs: [wreg+status,2+status,0]
  6100  0C9E  0020               	movlb	0	; select bank0
  6101  0C9F  1FA1               	btfss	abs@a+1,7
  6102  0CA0  0008               	return
  6103  0CA1  0920               	comf	abs@a,w
  6104  0CA2  00A2               	movwf	??_abs
  6105  0CA3  0921               	comf	abs@a+1,w
  6106  0CA4  00A3               	movwf	??_abs+1
  6107  0CA5  0AA2               	incf	??_abs,f
  6108  0CA6  1903               	skipnz
  6109  0CA7  0AA3               	incf	??_abs+1,f
  6110  0CA8  0822               	movf	??_abs,w
  6111  0CA9  00A0               	movwf	?_abs
  6112  0CAA  0823               	movf	??_abs+1,w
  6113  0CAB  00A1               	movwf	?_abs+1
  6114  0CAC  0008               	return
  6115  0CAD                     __end_of_abs:	
  6116                           
  6117                           	psect	text30
  6118  0C36                     __ptext30:	
  6119 ;; *************** function _Sensor_setInactive *****************
  6120 ;; Defined at:
  6121 ;;		line 566 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  sensor          1    wreg     PTR struct .
  6124 ;;		 -> mtouch_sensor(63), 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;  sensor          1    0[BANK0 ] PTR struct .
  6127 ;;		 -> mtouch_sensor(63), 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  1    wreg      void 
  6130 ;; Registers used:
  6131 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;Total ram usage:        1 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    4
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_Sensor_Acquisition
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _Sensor_setInactive
  6153  0C36                     _Sensor_setInactive:	
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  6157                           ;Sensor_setInactive@sensor stored from wreg
  6158  0C36  0020               	movlb	0	; select bank0
  6159  0C37  00A0               	movwf	Sensor_setInactive@sensor
  6160                           
  6161                           ;mtouch_sensor.c: 568: sensor->acitve = 0;
  6162  0C38  0820               	movf	Sensor_setInactive@sensor,w
  6163  0C39  3E08               	addlw	8
  6164  0C3A  0086               	movwf	6
  6165  0C3B  3001               	movlw	1	; select bank2/3
  6166  0C3C  0087               	movwf	7
  6167  0C3D  1101               	bcf	1,2
  6168  0C3E  0008               	return
  6169  0C3F                     __end_of_Sensor_setInactive:	
  6170                           
  6171                           	psect	text31
  6172  0C2D                     __ptext31:	
  6173 ;; *************** function _Sensor_setActive *****************
  6174 ;; Defined at:
  6175 ;;		line 561 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  sensor          1    wreg     PTR struct .
  6178 ;;		 -> mtouch_sensor(63), 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;  sensor          1    0[BANK0 ] PTR struct .
  6181 ;;		 -> mtouch_sensor(63), 
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;Total ram usage:        1 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    4
  6198 ;; This function calls:
  6199 ;;		Nothing
  6200 ;; This function is called by:
  6201 ;;		_Sensor_Acquisition
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205                           
  6206                           ;psect for function _Sensor_setActive
  6207  0C2D                     _Sensor_setActive:	
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  6211                           ;Sensor_setActive@sensor stored from wreg
  6212  0C2D  0020               	movlb	0	; select bank0
  6213  0C2E  00A0               	movwf	Sensor_setActive@sensor
  6214                           
  6215                           ;mtouch_sensor.c: 563: sensor->acitve = 1;
  6216  0C2F  0820               	movf	Sensor_setActive@sensor,w
  6217  0C30  3E08               	addlw	8
  6218  0C31  0086               	movwf	6
  6219  0C32  3001               	movlw	1	; select bank2/3
  6220  0C33  0087               	movwf	7
  6221  0C34  1501               	bsf	1,2
  6222  0C35  0008               	return
  6223  0C36                     __end_of_Sensor_setActive:	
  6224                           
  6225                           	psect	text32
  6226  0C8F                     __ptext32:	
  6227 ;; *************** function _Sensor_isEnabled *****************
  6228 ;; Defined at:
  6229 ;;		line 546 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;  sensor          1    wreg     PTR struct .
  6232 ;;		 -> mtouch_sensor(63), 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  sensor          1    0[BANK0 ] PTR struct .
  6235 ;;		 -> mtouch_sensor(63), 
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      unsigned char 
  6238 ;; Registers used:
  6239 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;Total ram usage:        1 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:    4
  6252 ;; This function calls:
  6253 ;;		Nothing
  6254 ;; This function is called by:
  6255 ;;		_Sensor_Service
  6256 ;;		_Sensor_Acquisition
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _Sensor_isEnabled
  6262  0C8F                     _Sensor_isEnabled:	
  6263                           
  6264                           ;incstack = 0
  6265                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  6266                           ;Sensor_isEnabled@sensor stored from wreg
  6267  0C8F  0020               	movlb	0	; select bank0
  6268  0C90  00A0               	movwf	Sensor_isEnabled@sensor
  6269                           
  6270                           ;mtouch_sensor.c: 548: if(sensor!=(0))
  6271  0C91  0820               	movf	Sensor_isEnabled@sensor,w
  6272  0C92  1903               	btfsc	3,2
  6273  0C93  2C9C               	goto	l2592
  6274                           
  6275                           ;mtouch_sensor.c: 549: return (bool)sensor->enabled;
  6276  0C94  0820               	movf	Sensor_isEnabled@sensor,w
  6277  0C95  3E08               	addlw	8
  6278  0C96  0086               	movwf	6
  6279  0C97  3001               	movlw	1	; select bank2/3
  6280  0C98  0087               	movwf	7
  6281  0C99  0801               	movf	1,w
  6282  0C9A  3901               	andlw	1
  6283  0C9B  0008               	return
  6284  0C9C                     l2592:	
  6285                           
  6286                           ;mtouch_sensor.c: 550: else;mtouch_sensor.c: 551: return 0;
  6287  0C9C  3000               	movlw	0
  6288  0C9D  0008               	return
  6289  0C9E                     __end_of_Sensor_isEnabled:	
  6290                           
  6291                           	psect	text33
  6292  046E                     __ptext33:	
  6293 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  6294 ;; Defined at:
  6295 ;;		line 414 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  sensor          1    wreg     PTR struct .
  6298 ;;		 -> mtouch_sensor(63), 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  sensor          1   14[BANK0 ] PTR struct .
  6301 ;;		 -> mtouch_sensor(63), 
  6302 ;;  best_packet_    2   12[BANK0 ] unsigned int 
  6303 ;;  packet_noise    2   10[BANK0 ] unsigned int 
  6304 ;;  i               1   17[BANK0 ] unsigned char 
  6305 ;;  retry           1   16[BANK0 ] unsigned char 
  6306 ;;  best_sample_    1   15[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      enum E4140
  6309 ;; Registers used:
  6310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;Total ram usage:       10 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    6
  6323 ;; This function calls:
  6324 ;;		_Sensor_Acq_ExecutePacket
  6325 ;; This function is called by:
  6326 ;;		_Sensor_Acquisition
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           
  6331                           ;psect for function _Sensor_Scanfrequency_Evaluation
  6332  046E                     _Sensor_Scanfrequency_Evaluation:	
  6333                           
  6334                           ;incstack = 0
  6335                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6336                           ;Sensor_Scanfrequency_Evaluation@sensor stored from wreg
  6337  046E  0020               	movlb	0	; select bank0
  6338  046F  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor
  6339                           
  6340                           ;mtouch_sensor.c: 416: uint8_t i;;mtouch_sensor.c: 417: const mtouch_sensor_sampleperiod
      +                          _t frequency_hop[5] = {3,13,14,20,13};;mtouch_sensor.c: 418: mtouch_sensor_packetnoise_t
      +                           packet_noise_Max;;mtouch_sensor.c: 419: mtouch_sensor_sampleperiod_t best_sample_period
      +                          ;;mtouch_sensor.c: 420: mtouch_sensor_packetsample_t best_packet_sample;;mtouch_sensor.c
      +                          : 421: uint8_t retry;;mtouch_sensor.c: 423: packet_noise_Max = packet_noise + (packet_no
      +                          ise>>2);
  6341  0470  084E               	movf	_packet_noise+1,w
  6342  0471  00A9               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  6343  0472  084D               	movf	_packet_noise,w
  6344  0473  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  6345  0474  36A9               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  6346  0475  0CA8               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  6347  0476  36A9               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  6348  0477  0CA8               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  6349  0478  084D               	movf	_packet_noise,w
  6350  0479  0728               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  6351  047A  00AA               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  6352  047B  084E               	movf	_packet_noise+1,w
  6353  047C  3D29               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  6354  047D  00AB               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6355                           
  6356                           ;mtouch_sensor.c: 424: best_sample_period = sample_period;
  6357  047E  086A               	movf	_sample_period,w
  6358  047F  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  6359  0480  0828               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6360  0481  00AF               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  6361                           
  6362                           ;mtouch_sensor.c: 425: best_packet_sample = packet_sample;
  6363  0482  0850               	movf	_packet_sample+1,w
  6364  0483  00AD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  6365  0484  084F               	movf	_packet_sample,w
  6366  0485  00AC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  6367                           
  6368                           ;mtouch_sensor.c: 428: for(i=(uint8_t)0;i<(uint8_t)5;i++)
  6369  0486  01B1               	clrf	Sensor_Scanfrequency_Evaluation@i
  6370  0487                     l2616:	
  6371                           
  6372                           ;mtouch_sensor.c: 429: {;mtouch_sensor.c: 430: sample_period += frequency_hop[i];
  6373  0487  0831               	movf	Sensor_Scanfrequency_Evaluation@i,w
  6374  0488  3E00               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  6375  0489  0084               	movwf	4
  6376  048A  3090               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  6377  048B  1803               	skipnc
  6378  048C  3E01               	addlw	1
  6379  048D  0085               	movwf	5
  6380  048E  0800               	movf	0,w	;code access
  6381  048F  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  6382  0490  0828               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6383  0491  07EA               	addwf	_sample_period,f
  6384                           
  6385                           ;mtouch_sensor.c: 436: else if(sample_period < ((mtouch_sensor_sampleperiod_t)200))
  6386                           
  6387                           ;mtouch_sensor.c: 431: if(sample_period > ((mtouch_sensor_sampleperiod_t)255))
  6388  0492  30C8               	movlw	200
  6389  0493  026A               	subwf	_sample_period,w
  6390  0494  1803               	skipnc
  6391  0495  2C9A               	goto	l2624
  6392                           
  6393                           ;mtouch_sensor.c: 437: {;mtouch_sensor.c: 438: sample_period += ((mtouch_sensor_samplepe
      +                          riod_t)200);
  6394  0496  30C8               	movlw	200
  6395  0497  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  6396  0498  0828               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6397  0499  07EA               	addwf	_sample_period,f
  6398  049A                     l2624:	
  6399                           
  6400                           ;mtouch_sensor.c: 439: };mtouch_sensor.c: 441: retry = (uint8_t)5;
  6401  049A  3005               	movlw	5
  6402  049B  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  6403  049C  0828               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6404  049D  00B0               	movwf	Sensor_Scanfrequency_Evaluation@retry
  6405  049E                     l2632:	
  6406                           ;mtouch_sensor.c: 443: while(Sensor_Acq_ExecutePacket(sensor))
  6407                           
  6408  049E  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor,w
  6409  049F  3183  232B  3184   	fcall	_Sensor_Acq_ExecutePacket
  6410  04A2  3A00               	xorlw	0
  6411  04A3  1903               	btfsc	3,2
  6412  04A4  2CAD               	goto	l2634
  6413                           
  6414                           ;mtouch_sensor.c: 444: {;mtouch_sensor.c: 445: retry--;
  6415  04A5  3001               	movlw	1
  6416  04A6  0020               	movlb	0	; select bank0
  6417  04A7  02B0               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  6418                           
  6419                           ;mtouch_sensor.c: 446: if(retry == 0)
  6420  04A8  0830               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  6421  04A9  1D03               	btfss	3,2
  6422  04AA  2C9E               	goto	l2632
  6423                           
  6424                           ;mtouch_sensor.c: 447: {;mtouch_sensor.c: 448: return MTOUCH_SENSOR_ERROR_tooManyRetries
      +                          ;
  6425  04AB  30FC               	movlw	252
  6426  04AC  0008               	return
  6427  04AD                     l2634:	
  6428                           
  6429                           ;mtouch_sensor.c: 449: };mtouch_sensor.c: 450: };mtouch_sensor.c: 452: if(packet_noise_M
      +                          ax < packet_noise)
  6430  04AD  0020               	movlb	0	; select bank0
  6431  04AE  084E               	movf	_packet_noise+1,w
  6432  04AF  022B               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  6433  04B0  1D03               	skipz
  6434  04B1  2CB4               	goto	u1215
  6435  04B2  084D               	movf	_packet_noise,w
  6436  04B3  022A               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  6437  04B4                     u1215:	
  6438  04B4  1803               	skipnc
  6439  04B5  2CC2               	goto	l2638
  6440                           
  6441                           ;mtouch_sensor.c: 453: {;mtouch_sensor.c: 454: packet_noise_Max = packet_noise;
  6442  04B6  084E               	movf	_packet_noise+1,w
  6443  04B7  00AB               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6444  04B8  084D               	movf	_packet_noise,w
  6445  04B9  00AA               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  6446                           
  6447                           ;mtouch_sensor.c: 455: best_sample_period = sample_period;
  6448  04BA  086A               	movf	_sample_period,w
  6449  04BB  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  6450  04BC  0828               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6451  04BD  00AF               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  6452                           
  6453                           ;mtouch_sensor.c: 456: best_packet_sample = packet_sample;
  6454  04BE  0850               	movf	_packet_sample+1,w
  6455  04BF  00AD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  6456  04C0  084F               	movf	_packet_sample,w
  6457  04C1  00AC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  6458  04C2                     l2638:	
  6459  04C2  3001               	movlw	1
  6460  04C3  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  6461  04C4  0828               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6462  04C5  07B1               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  6463  04C6  3005               	movlw	5
  6464  04C7  0231               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  6465  04C8  1C03               	skipc
  6466  04C9  2C87               	goto	l2616
  6467                           
  6468                           ;mtouch_sensor.c: 457: };mtouch_sensor.c: 458: };mtouch_sensor.c: 460: sample_period = b
      +                          est_sample_period;
  6469  04CA  082F               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  6470  04CB  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  6471  04CC  0828               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6472  04CD  00EA               	movwf	_sample_period
  6473                           
  6474                           ;mtouch_sensor.c: 461: packet_sample = best_packet_sample;
  6475  04CE  082D               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  6476  04CF  00D0               	movwf	_packet_sample+1
  6477  04D0  082C               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  6478  04D1  00CF               	movwf	_packet_sample
  6479                           
  6480                           ;mtouch_sensor.c: 463: return MTOUCH_SENSOR_ERROR_none;
  6481  04D2  3000               	movlw	0
  6482  04D3  0008               	return
  6483  04D4                     __end_of_Sensor_Scanfrequency_Evaluation:	
  6484                           
  6485                           	psect	text34
  6486  032B                     __ptext34:	
  6487 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  6488 ;; Defined at:
  6489 ;;		line 294 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;  sensor          1    wreg     PTR struct .
  6492 ;;		 -> mtouch_sensor(63), 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  sensor          1    7[BANK0 ] PTR struct .
  6495 ;;		 -> mtouch_sensor(63), 
  6496 ;;  error           1    6[BANK0 ] enum E4140
  6497 ;;  ADCON2_temp     1    5[BANK0 ] unsigned char 
  6498 ;;  ADCON1_temp     1    4[BANK0 ] unsigned char 
  6499 ;;  ADCON0_temp     1    3[BANK0 ] unsigned char 
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  1    wreg      enum E4140
  6502 ;; Registers used:
  6503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;Total ram usage:        6 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    5
  6516 ;; This function calls:
  6517 ;;		_MTOUCH_Sensor_Scan_Initialize
  6518 ;;		_Sensor_setScanFunction
  6519 ;;		_TMR2_LoadPeriodRegister
  6520 ;;		_TMR2_SetInterruptHandler
  6521 ;;		_TMR2_StartTimer
  6522 ;;		_TMR2_StopTimer
  6523 ;; This function is called by:
  6524 ;;		_Sensor_Acquisition
  6525 ;;		_Sensor_Scanfrequency_Evaluation
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function _Sensor_Acq_ExecutePacket
  6531  032B                     _Sensor_Acq_ExecutePacket:	
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6535                           ;Sensor_Acq_ExecutePacket@sensor stored from wreg
  6536  032B  0020               	movlb	0	; select bank0
  6537  032C  00A7               	movwf	Sensor_Acq_ExecutePacket@sensor
  6538                           
  6539                           ;mtouch_sensor.c: 297: if(!(INTCONbits.GIE & INTCONbits.PEIE))
  6540  032D  0E0B               	swapf	11,w	;volatile
  6541  032E  0C89               	rrf	9,f
  6542  032F  0C89               	rrf	9,f
  6543  0330  3901               	andlw	1
  6544  0331  00A2               	movwf	??_Sensor_Acq_ExecutePacket
  6545  0332  0D0B               	rlf	11,w	;volatile
  6546  0333  0D0B               	rlf	11,w	;volatile
  6547  0334  3901               	andlw	1
  6548  0335  0522               	andwf	??_Sensor_Acq_ExecutePacket,w
  6549  0336  1D03               	btfss	3,2
  6550  0337  2B3A               	goto	l2520
  6551                           
  6552                           ;mtouch_sensor.c: 298: return MTOUCH_SENSOR_ERROR_interrupt_notEnabled;
  6553  0338  30FE               	movlw	254
  6554  0339  0008               	return
  6555  033A                     l2520:	
  6556                           
  6557                           ;mtouch_sensor.c: 300: enum mtouch_sensor_error error = MTOUCH_SENSOR_ERROR_none;
  6558  033A  01A6               	clrf	Sensor_Acq_ExecutePacket@error
  6559                           
  6560                           ;mtouch_sensor.c: 301: uint8_t ADCON0_temp;;mtouch_sensor.c: 302: uint8_t ADCON1_temp;;m
      +                          touch_sensor.c: 303: uint8_t ADCON2_temp;;mtouch_sensor.c: 306: ADCON0_temp = ADCON0;
  6561  033B  0021               	movlb	1	; select bank1
  6562  033C  081D               	movf	29,w	;volatile
  6563  033D  0020               	movlb	0	; select bank0
  6564  033E  00A2               	movwf	??_Sensor_Acq_ExecutePacket
  6565  033F  0822               	movf	??_Sensor_Acq_ExecutePacket,w
  6566  0340  00A3               	movwf	Sensor_Acq_ExecutePacket@ADCON0_temp
  6567                           
  6568                           ;mtouch_sensor.c: 307: ADCON1_temp = ADCON1;
  6569  0341  0021               	movlb	1	; select bank1
  6570  0342  081E               	movf	30,w	;volatile
  6571  0343  0020               	movlb	0	; select bank0
  6572  0344  00A2               	movwf	??_Sensor_Acq_ExecutePacket
  6573  0345  0822               	movf	??_Sensor_Acq_ExecutePacket,w
  6574  0346  00A4               	movwf	Sensor_Acq_ExecutePacket@ADCON1_temp
  6575                           
  6576                           ;mtouch_sensor.c: 308: ADCON2_temp = ADCON2;
  6577  0347  0021               	movlb	1	; select bank1
  6578  0348  081F               	movf	31,w	;volatile
  6579  0349  0020               	movlb	0	; select bank0
  6580  034A  00A2               	movwf	??_Sensor_Acq_ExecutePacket
  6581  034B  0822               	movf	??_Sensor_Acq_ExecutePacket,w
  6582  034C  00A5               	movwf	Sensor_Acq_ExecutePacket@ADCON2_temp
  6583                           
  6584                           ;mtouch_sensor.c: 309: MTOUCH_Sensor_Scan_Initialize();
  6585  034D  318C  2424  3183   	fcall	_MTOUCH_Sensor_Scan_Initialize
  6586                           
  6587                           ;mtouch_sensor.c: 312: Sensor_setScanFunction(sensor);
  6588  0350  0020               	movlb	0	; select bank0
  6589  0351  0827               	movf	Sensor_Acq_ExecutePacket@sensor,w
  6590  0352  318D  255F  3183   	fcall	_Sensor_setScanFunction
  6591                           
  6592                           ;mtouch_sensor.c: 314: currentScannSensor = sensor->sensor_name;
  6593  0355  0020               	movlb	0	; select bank0
  6594  0356  0827               	movf	Sensor_Acq_ExecutePacket@sensor,w
  6595  0357  0086               	movwf	6
  6596  0358  3001               	movlw	1	; select bank2/3
  6597  0359  0087               	movwf	7
  6598  035A  0801               	movf	1,w
  6599  035B  00A2               	movwf	??_Sensor_Acq_ExecutePacket
  6600  035C  0822               	movf	??_Sensor_Acq_ExecutePacket,w
  6601  035D  00FD               	movwf	_currentScannSensor
  6602                           
  6603                           ;mtouch_sensor.c: 315: packet_counter = sensor->oversampling;
  6604  035E  0827               	movf	Sensor_Acq_ExecutePacket@sensor,w
  6605  035F  0086               	movwf	6
  6606  0360  3001               	movlw	1	; select bank2/3
  6607  0361  0087               	movwf	7
  6608  0362  3001               	movlw	1	; select bank2/3
  6609  0363  3F45               	moviw [5]fsr1
  6610  0364  00FC               	movwf	_packet_counter
  6611                           
  6612                           ;mtouch_sensor.c: 316: packet_sample = 0;
  6613  0365  01CF               	clrf	_packet_sample
  6614  0366  01D0               	clrf	_packet_sample+1
  6615                           
  6616                           ;mtouch_sensor.c: 317: sensor_globalFlags.packet_done = 0;
  6617  0367  1057               	bcf	_sensor_globalFlags,0	;volatile
  6618                           
  6619                           ;mtouch_sensor.c: 318: packet_noise = 0;
  6620  0368  01CD               	clrf	_packet_noise
  6621  0369  01CE               	clrf	_packet_noise+1
  6622                           
  6623                           ;mtouch_sensor.c: 320: TMR2_SetInterruptHandler(Sensor_Acq_ExecuteScan);
  6624  036A  30A4               	movlw	low _Sensor_Acq_ExecuteScan
  6625  036B  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  6626  036C  3002               	movlw	high _Sensor_Acq_ExecuteScan
  6627  036D  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  6628  036E  318C  2404  3183   	fcall	_TMR2_SetInterruptHandler
  6629                           
  6630                           ;mtouch_sensor.c: 321: TMR2_LoadPeriodRegister(sample_period);
  6631  0371  0020               	movlb	0	; select bank0
  6632  0372  086A               	movf	_sample_period,w
  6633  0373  318B  23FF  3183   	fcall	_TMR2_LoadPeriodRegister
  6634                           
  6635                           ;mtouch_sensor.c: 322: TMR2_StartTimer();
  6636  0376  318B  23F2  3183   	fcall	_TMR2_StartTimer
  6637                           
  6638                           ;mtouch_sensor.c: 324: sensor_globalFlags.interrupted = 0;
  6639  0379  0020               	movlb	0	; select bank0
  6640  037A  10D7               	bcf	_sensor_globalFlags,1	;volatile
  6641  037B                     l535:	
  6642  037B  1F11               	btfss	17,6	;volatile
  6643                           
  6644                           ;mtouch_sensor.c: 330: {;mtouch_sensor.c: 331: if(sensor_globalFlags.packet_done == (uin
      +                          t8_t)1)
  6645  037C  1857               	btfsc	_sensor_globalFlags,0	;volatile
  6646  037D  2B7F               	goto	l538
  6647  037E  2B7B               	goto	l535
  6648  037F                     l538:	
  6649                           
  6650                           ;mtouch_sensor.c: 333: };mtouch_sensor.c: 334: PIR1bits.ADIF = 0;
  6651  037F  1311               	bcf	17,6	;volatile
  6652                           
  6653                           ;mtouch_sensor.c: 335: } while(sensor_globalFlags.packet_done == 0);
  6654  0380  1C57               	btfss	_sensor_globalFlags,0	;volatile
  6655  0381  2B7B               	goto	l535
  6656                           
  6657                           ;mtouch_sensor.c: 338: TMR2_StopTimer();
  6658  0382  318B  23F5  3183   	fcall	_TMR2_StopTimer
  6659                           
  6660                           ;mtouch_sensor.c: 339: ADCON0 = ADCON0_temp;
  6661  0385  0020               	movlb	0	; select bank0
  6662  0386  0823               	movf	Sensor_Acq_ExecutePacket@ADCON0_temp,w
  6663  0387  0021               	movlb	1	; select bank1
  6664  0388  009D               	movwf	29	;volatile
  6665                           
  6666                           ;mtouch_sensor.c: 340: ADCON1 = ADCON1_temp;
  6667  0389  0020               	movlb	0	; select bank0
  6668  038A  0824               	movf	Sensor_Acq_ExecutePacket@ADCON1_temp,w
  6669  038B  0021               	movlb	1	; select bank1
  6670  038C  009E               	movwf	30	;volatile
  6671                           
  6672                           ;mtouch_sensor.c: 341: ADCON2 = ADCON2_temp;
  6673  038D  0020               	movlb	0	; select bank0
  6674  038E  0825               	movf	Sensor_Acq_ExecutePacket@ADCON2_temp,w
  6675  038F  0021               	movlb	1	; select bank1
  6676  0390  009F               	movwf	31	;volatile
  6677                           
  6678                           ;mtouch_sensor.c: 343: if(sensor_globalFlags.interrupted)
  6679  0391  0020               	movlb	0	; select bank0
  6680  0392  1CD7               	btfss	_sensor_globalFlags,1	;volatile
  6681  0393  2B98               	goto	l540
  6682                           
  6683                           ;mtouch_sensor.c: 344: {;mtouch_sensor.c: 345: error = MTOUCH_SENSOR_ERROR_interruptedSc
      +                          an;
  6684  0394  30FA               	movlw	250
  6685  0395  00A2               	movwf	??_Sensor_Acq_ExecutePacket
  6686  0396  0822               	movf	??_Sensor_Acq_ExecutePacket,w
  6687  0397  00A6               	movwf	Sensor_Acq_ExecutePacket@error
  6688  0398                     l540:	
  6689                           
  6690                           ;mtouch_sensor.c: 346: };mtouch_sensor.c: 348: return error;
  6691  0398  0826               	movf	Sensor_Acq_ExecutePacket@error,w
  6692  0399  0008               	return
  6693  039A                     __end_of_Sensor_Acq_ExecutePacket:	
  6694                           
  6695                           	psect	text35
  6696  0BF5                     __ptext35:	
  6697 ;; *************** function _TMR2_StopTimer *****************
  6698 ;; Defined at:
  6699 ;;		line 93 in file "mcc_generated_files/tmr2.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;		None
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;		None
  6704 ;; Return value:  Size  Location     Type
  6705 ;;                  1    wreg      void 
  6706 ;; Registers used:
  6707 ;;		None
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;Total ram usage:        0 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:    4
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_Sensor_Acq_ExecutePacket
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           
  6728                           ;psect for function _TMR2_StopTimer
  6729  0BF5                     _TMR2_StopTimer:	
  6730                           
  6731                           ;tmr2.c: 96: T2CONbits.TMR2ON = 0;
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _TMR2_StopTimer: []
  6735  0BF5  0020               	movlb	0	; select bank0
  6736  0BF6  111C               	bcf	28,2	;volatile
  6737  0BF7  0008               	return
  6738  0BF8                     __end_of_TMR2_StopTimer:	
  6739                           
  6740                           	psect	text36
  6741  0BF2                     __ptext36:	
  6742 ;; *************** function _TMR2_StartTimer *****************
  6743 ;; Defined at:
  6744 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;		None
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;		None
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		None
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;Total ram usage:        0 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    4
  6765 ;; This function calls:
  6766 ;;		Nothing
  6767 ;; This function is called by:
  6768 ;;		_Sensor_Acq_ExecutePacket
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           
  6773                           ;psect for function _TMR2_StartTimer
  6774  0BF2                     _TMR2_StartTimer:	
  6775                           
  6776                           ;tmr2.c: 90: T2CONbits.TMR2ON = 1;
  6777                           
  6778                           ;incstack = 0
  6779                           ; Regs used in _TMR2_StartTimer: []
  6780  0BF2  0020               	movlb	0	; select bank0
  6781  0BF3  151C               	bsf	28,2	;volatile
  6782  0BF4  0008               	return
  6783  0BF5                     __end_of_TMR2_StartTimer:	
  6784                           
  6785                           	psect	text37
  6786  0C04                     __ptext37:	
  6787 ;; *************** function _TMR2_SetInterruptHandler *****************
  6788 ;; Defined at:
  6789 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6792 ;;		 -> Sensor_Acq_ExecuteScan(1), TMR2_DefaultInterruptHandler(1), 
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;		None
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      void 
  6797 ;; Registers used:
  6798 ;;		wreg
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6804 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6808 ;;Total ram usage:        2 bytes
  6809 ;; Hardware stack levels used:    1
  6810 ;; Hardware stack levels required when called:    4
  6811 ;; This function calls:
  6812 ;;		Nothing
  6813 ;; This function is called by:
  6814 ;;		_TMR2_Initialize
  6815 ;;		_Sensor_Acq_ExecutePacket
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           
  6820                           ;psect for function _TMR2_SetInterruptHandler
  6821  0C04                     _TMR2_SetInterruptHandler:	
  6822                           
  6823                           ;tmr2.c: 133: TMR2_InterruptHandler = InterruptHandler;
  6824                           
  6825                           ;incstack = 0
  6826                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  6827  0C04  0020               	movlb	0	; select bank0
  6828  0C05  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  6829  0C06  00F9               	movwf	_TMR2_InterruptHandler+1
  6830  0C07  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  6831  0C08  00F8               	movwf	_TMR2_InterruptHandler
  6832  0C09  0008               	return
  6833  0C0A                     __end_of_TMR2_SetInterruptHandler:	
  6834                           
  6835                           	psect	text38
  6836  0BFF                     __ptext38:	
  6837 ;; *************** function _TMR2_LoadPeriodRegister *****************
  6838 ;; Defined at:
  6839 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;  periodVal       1    wreg     unsigned char 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;  periodVal       1    0[BANK0 ] unsigned char 
  6844 ;; Return value:  Size  Location     Type
  6845 ;;                  1    wreg      void 
  6846 ;; Registers used:
  6847 ;;		wreg
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;Total ram usage:        1 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; Hardware stack levels required when called:    4
  6860 ;; This function calls:
  6861 ;;		Nothing
  6862 ;; This function is called by:
  6863 ;;		_Sensor_Acq_ExecutePacket
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           
  6868                           ;psect for function _TMR2_LoadPeriodRegister
  6869  0BFF                     _TMR2_LoadPeriodRegister:	
  6870                           
  6871                           ;incstack = 0
  6872                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  6873                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  6874  0BFF  0020               	movlb	0	; select bank0
  6875  0C00  00A0               	movwf	TMR2_LoadPeriodRegister@periodVal
  6876                           
  6877                           ;tmr2.c: 116: PR2 = periodVal;
  6878  0C01  0820               	movf	TMR2_LoadPeriodRegister@periodVal,w
  6879  0C02  009B               	movwf	27	;volatile
  6880  0C03  0008               	return
  6881  0C04                     __end_of_TMR2_LoadPeriodRegister:	
  6882                           
  6883                           	psect	text39
  6884  0D5F                     __ptext39:	
  6885 ;; *************** function _Sensor_setScanFunction *****************
  6886 ;; Defined at:
  6887 ;;		line 513 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  sensor          1    wreg     PTR struct .
  6890 ;;		 -> mtouch_sensor(63), 
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;  sensor          1    0[BANK0 ] PTR struct .
  6893 ;;		 -> mtouch_sensor(63), 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  1    wreg      void 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;Total ram usage:        1 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    4
  6910 ;; This function calls:
  6911 ;;		Nothing
  6912 ;; This function is called by:
  6913 ;;		_Sensor_Acq_ExecutePacket
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           
  6918                           ;psect for function _Sensor_setScanFunction
  6919  0D5F                     _Sensor_setScanFunction:	
  6920                           
  6921                           ;incstack = 0
  6922                           ; Regs used in _Sensor_setScanFunction: [wreg+fsr1l+fsr1h+status,2+status,0]
  6923                           ;Sensor_setScanFunction@sensor stored from wreg
  6924  0D5F  0020               	movlb	0	; select bank0
  6925  0D60  00A0               	movwf	Sensor_setScanFunction@sensor
  6926                           
  6927                           ;mtouch_sensor.c: 515: Sensor_scanA = sensor->scanA;
  6928  0D61  0A20               	incf	Sensor_setScanFunction@sensor,w
  6929  0D62  0086               	movwf	6
  6930  0D63  3001               	movlw	1	; select bank2/3
  6931  0D64  0087               	movwf	7
  6932  0D65  3F40               	moviw [0]fsr1
  6933  0D66  00E6               	movwf	_Sensor_scanA
  6934  0D67  3F41               	moviw [1]fsr1
  6935  0D68  00E7               	movwf	_Sensor_scanA+1
  6936                           
  6937                           ;mtouch_sensor.c: 516: Sensor_scanB = sensor->scanB;
  6938  0D69  0820               	movf	Sensor_setScanFunction@sensor,w
  6939  0D6A  3E03               	addlw	3
  6940  0D6B  0086               	movwf	6
  6941  0D6C  3001               	movlw	1	; select bank2/3
  6942  0D6D  0087               	movwf	7
  6943  0D6E  3F40               	moviw [0]fsr1
  6944  0D6F  00E4               	movwf	_Sensor_scanB
  6945  0D70  3F41               	moviw [1]fsr1
  6946  0D71  00E5               	movwf	_Sensor_scanB+1
  6947  0D72  0008               	return
  6948  0D73                     __end_of_Sensor_setScanFunction:	
  6949                           
  6950                           	psect	text40
  6951  0C24                     __ptext40:	
  6952 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  6953 ;; Defined at:
  6954 ;;		line 184 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;		None
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;		None
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      void 
  6961 ;; Registers used:
  6962 ;;		wreg, status,2, status,0
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;Total ram usage:        0 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:    4
  6975 ;; This function calls:
  6976 ;;		Nothing
  6977 ;; This function is called by:
  6978 ;;		_MTOUCH_Initialize
  6979 ;;		_Sensor_Acq_ExecutePacket
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           
  6984                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  6985  0C24                     _MTOUCH_Sensor_Scan_Initialize:	
  6986                           
  6987                           ;mtouch_sensor.c: 186: T2CONbits.T2CKPS = 0x0;
  6988                           
  6989                           ;incstack = 0
  6990                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  6991  0C24  30FC               	movlw	-4
  6992  0C25  0020               	movlb	0	; select bank0
  6993  0C26  059C               	andwf	28,f	;volatile
  6994                           
  6995                           ;mtouch_sensor.c: 188: ADCON0 = (uint8_t)0;
  6996  0C27  0021               	movlb	1	; select bank1
  6997  0C28  019D               	clrf	29	;volatile
  6998                           
  6999                           ;mtouch_sensor.c: 189: ADCON1 = (uint8_t)( 0x1<<7 | 0x2<<4 | 0x0 );
  7000  0C29  30A0               	movlw	160
  7001  0C2A  009E               	movwf	30	;volatile
  7002                           
  7003                           ;mtouch_sensor.c: 190: ADCON2 = (uint8_t)0;
  7004  0C2B  019F               	clrf	31	;volatile
  7005  0C2C  0008               	return
  7006  0C2D                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  7007                           
  7008                           	psect	text41
  7009  0CAD                     __ptext41:	
  7010 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  7011 ;; Defined at:
  7012 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;		None
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  button          1   28[BANK0 ] enum E4133
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  1    wreg      void 
  7019 ;; Registers used:
  7020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;Total ram usage:        2 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    9
  7033 ;; This function calls:
  7034 ;;		_Button_Service
  7035 ;; This function is called by:
  7036 ;;		_MTOUCH_Service_Mainloop
  7037 ;; This function uses a non-reentrant model
  7038 ;;
  7039                           
  7040                           
  7041                           ;psect for function _MTOUCH_Button_ServiceAll
  7042  0CAD                     _MTOUCH_Button_ServiceAll:	
  7043                           
  7044                           ;mtouch_button.c: 218: enum mtouch_button_names button;;mtouch_button.c: 221: for (butto
      +                          n = 0; button < 6; button++)
  7045                           
  7046                           ;incstack = 0
  7047                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7048  0CAD  0020               	movlb	0	; select bank0
  7049  0CAE  01BC               	clrf	MTOUCH_Button_ServiceAll@button
  7050  0CAF                     l3168:	
  7051                           
  7052                           ;mtouch_button.c: 222: {;mtouch_button.c: 223: Button_Service(button);
  7053  0CAF  083C               	movf	MTOUCH_Button_ServiceAll@button,w
  7054  0CB0  3184  2407  318C   	fcall	_Button_Service
  7055  0CB3  3001               	movlw	1
  7056  0CB4  0020               	movlb	0	; select bank0
  7057  0CB5  00BB               	movwf	??_MTOUCH_Button_ServiceAll
  7058  0CB6  083B               	movf	??_MTOUCH_Button_ServiceAll,w
  7059  0CB7  07BC               	addwf	MTOUCH_Button_ServiceAll@button,f
  7060  0CB8  3006               	movlw	6
  7061  0CB9  023C               	subwf	MTOUCH_Button_ServiceAll@button,w
  7062  0CBA  1803               	btfsc	3,0
  7063  0CBB  0008               	return
  7064  0CBC  2CAF               	goto	l3168
  7065  0CBD                     __end_of_MTOUCH_Button_ServiceAll:	
  7066                           
  7067                           	psect	text42
  7068  0407                     __ptext42:	
  7069 ;; *************** function _Button_Service *****************
  7070 ;; Defined at:
  7071 ;;		line 227 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;  name            1    wreg     enum E4133
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;  name            1   24[BANK0 ] enum E4133
  7076 ;;  button          2   25[BANK0 ] PTR struct .
  7077 ;;		 -> mtouch_button(96), 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;Total ram usage:        7 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    8
  7094 ;; This function calls:
  7095 ;;		_Button_Deviation_Update
  7096 ;;		_Button_Reading_Update
  7097 ;;		_Button_State_Initializing
  7098 ;;		_Button_State_NotPressed
  7099 ;;		_Button_State_Pressed
  7100 ;;		_MTOUCH_Button_Initialize
  7101 ;;		_MTOUCH_Sensor_isCalibrated
  7102 ;;		_MTOUCH_Sensor_wasSampled
  7103 ;; This function is called by:
  7104 ;;		_MTOUCH_Button_ServiceAll
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           
  7109                           ;psect for function _Button_Service
  7110  0407                     _Button_Service:	
  7111                           
  7112                           ;incstack = 0
  7113                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7114                           ;Button_Service@name stored from wreg
  7115  0407  0020               	movlb	0	; select bank0
  7116  0408  00B8               	movwf	Button_Service@name
  7117                           
  7118                           ;mtouch_button.c: 229: mtouch_button_t* button = &mtouch_button[name];
  7119  0409  0838               	movf	Button_Service@name,w
  7120  040A  00B4               	movwf	??_Button_Service
  7121  040B  01B5               	clrf	??_Button_Service+1
  7122  040C  0EB4               	swapf	??_Button_Service,f
  7123  040D  0EB5               	swapf	??_Button_Service+1,f
  7124  040E  30F0               	movlw	240
  7125  040F  05B5               	andwf	??_Button_Service+1,f
  7126  0410  0834               	movf	??_Button_Service,w
  7127  0411  390F               	andlw	15
  7128  0412  04B5               	iorwf	??_Button_Service+1,f
  7129  0413  30F0               	movlw	240
  7130  0414  05B4               	andwf	??_Button_Service,f
  7131  0415  3090               	movlw	144
  7132  0416  00B6               	movwf	??_Button_Service+2
  7133  0417  3023               	movlw	35
  7134  0418  00B7               	movwf	??_Button_Service+3
  7135  0419  0834               	movf	??_Button_Service,w
  7136  041A  0736               	addwf	??_Button_Service+2,w
  7137  041B  00B9               	movwf	Button_Service@button
  7138  041C  0835               	movf	??_Button_Service+1,w
  7139  041D  3D37               	addwfc	??_Button_Service+3,w
  7140  041E  00BA               	movwf	Button_Service@button+1
  7141                           
  7142                           ;mtouch_button.c: 231: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  7143  041F  0839               	movf	Button_Service@button,w
  7144  0420  0086               	movwf	6
  7145  0421  083A               	movf	Button_Service@button+1,w
  7146  0422  0087               	movwf	7
  7147  0423  3141               	addfsr 1,1
  7148  0424  0801               	movf	1,w
  7149  0425  318D  2588  3184   	fcall	_MTOUCH_Sensor_wasSampled
  7150  0428  3A00               	xorlw	0
  7151  0429  1903               	skipnz
  7152  042A  0008               	return
  7153  042B  0020               	movlb	0	; select bank0
  7154  042C  0839               	movf	Button_Service@button,w
  7155  042D  0086               	movwf	6
  7156  042E  083A               	movf	Button_Service@button+1,w
  7157  042F  0087               	movwf	7
  7158  0430  3141               	addfsr 1,1
  7159  0431  0801               	movf	1,w
  7160  0432  318B  23F0  3184   	fcall	_MTOUCH_Sensor_isCalibrated
  7161  0435  3A00               	xorlw	0
  7162  0436  1903               	skipnz
  7163  0437  0008               	return
  7164                           
  7165                           ;mtouch_button.c: 232: {;mtouch_button.c: 233: Button_Reading_Update(button);
  7166  0438  0020               	movlb	0	; select bank0
  7167  0439  083A               	movf	Button_Service@button+1,w
  7168  043A  00AD               	movwf	Button_Reading_Update@button+1
  7169  043B  0839               	movf	Button_Service@button,w
  7170  043C  00AC               	movwf	Button_Reading_Update@button
  7171  043D  318D  254B  3184   	fcall	_Button_Reading_Update
  7172                           
  7173                           ;mtouch_button.c: 234: Button_Deviation_Update(button);
  7174  0440  0020               	movlb	0	; select bank0
  7175  0441  083A               	movf	Button_Service@button+1,w
  7176  0442  00A1               	movwf	Button_Deviation_Update@button+1
  7177  0443  0839               	movf	Button_Service@button,w
  7178  0444  00A0               	movwf	Button_Deviation_Update@button
  7179  0445  3182  221B  3184   	fcall	_Button_Deviation_Update
  7180                           
  7181                           ;mtouch_button.c: 236: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  7182  0448  0020               	movlb	0	; select bank0
  7183  0449  0839               	movf	Button_Service@button,w
  7184  044A  0086               	movwf	6
  7185  044B  083A               	movf	Button_Service@button+1,w
  7186  044C  0087               	movwf	7
  7187  044D  3142               	addfsr 1,2
  7188  044E  3003               	movlw	3
  7189  044F  0201               	subwf	1,w
  7190  0450  1C03               	skipc
  7191  0451  2C5A               	goto	l3058
  7192                           
  7193                           ;mtouch_button.c: 237: {;mtouch_button.c: 238: MTOUCH_Button_Initialize(button->name);
  7194  0452  0839               	movf	Button_Service@button,w
  7195  0453  0086               	movwf	6
  7196  0454  083A               	movf	Button_Service@button+1,w
  7197  0455  0087               	movwf	7
  7198  0456  0801               	movf	1,w
  7199  0457  3186  263B  3184   	fcall	_MTOUCH_Button_Initialize
  7200  045A                     l3058:	
  7201                           
  7202                           ;mtouch_button.c: 239: };mtouch_button.c: 240: Button_StateMachine[(uint8_t)button->stat
      +                          e](button);
  7203  045A  0020               	movlb	0	; select bank0
  7204  045B  083A               	movf	Button_Service@button+1,w
  7205  045C  00AF               	movwf	Button_State_Pressed@button+1
  7206  045D  0839               	movf	Button_Service@button,w
  7207  045E  00AE               	movwf	Button_State_Pressed@button
  7208  045F  0839               	movf	Button_Service@button,w
  7209  0460  0086               	movwf	6
  7210  0461  083A               	movf	Button_Service@button+1,w
  7211  0462  0087               	movwf	7
  7212  0463  3142               	addfsr 1,2
  7213  0464  3501               	lslf	1,w
  7214  0465  3E5A               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  7215  0466  0086               	movwf	6
  7216  0467  0187               	clrf	7
  7217  0468  3F41               	moviw [1]fsr1
  7218  0469  008A               	movwf	10
  7219  046A  3F40               	moviw [0]fsr1
  7220  046B  000A               	callw
  7221  046C  3184               	pagesel	$
  7222  046D  0008               	return
  7223  046E                     __end_of_Button_Service:	
  7224                           
  7225                           	psect	text43
  7226  0D88                     __ptext43:	
  7227 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  7228 ;; Defined at:
  7229 ;;		line 607 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;  sensor          1    wreg     enum E4132
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;  sensor          1    5[BANK0 ] enum E4132
  7234 ;; Return value:  Size  Location     Type
  7235 ;;                  1    wreg      unsigned char 
  7236 ;; Registers used:
  7237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;Total ram usage:        2 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    5
  7250 ;; This function calls:
  7251 ;;		___bmul
  7252 ;; This function is called by:
  7253 ;;		_Button_Service
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           
  7258                           ;psect for function _MTOUCH_Sensor_wasSampled
  7259  0D88                     _MTOUCH_Sensor_wasSampled:	
  7260                           
  7261                           ;incstack = 0
  7262                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7263                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  7264  0D88  0020               	movlb	0	; select bank0
  7265  0D89  00A5               	movwf	MTOUCH_Sensor_wasSampled@sensor
  7266                           
  7267                           ;mtouch_sensor.c: 609: if(sensor < 7)
  7268  0D8A  3007               	movlw	7
  7269  0D8B  0225               	subwf	MTOUCH_Sensor_wasSampled@sensor,w
  7270  0D8C  1803               	skipnc
  7271  0D8D  2D9C               	goto	l2746
  7272                           
  7273                           ;mtouch_sensor.c: 610: return (bool)mtouch_sensor[sensor].sampled;
  7274  0D8E  3009               	movlw	9
  7275  0D8F  00A4               	movwf	??_MTOUCH_Sensor_wasSampled
  7276  0D90  0824               	movf	??_MTOUCH_Sensor_wasSampled,w
  7277  0D91  00A0               	movwf	___bmul@multiplicand
  7278  0D92  0825               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  7279  0D93  318C  24EF         	fcall	___bmul
  7280  0D95  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  7281  0D96  0086               	movwf	6
  7282  0D97  3001               	movlw	1	; select bank2/3
  7283  0D98  0087               	movwf	7
  7284  0D99  0C01               	rrf	1,w
  7285  0D9A  3901               	andlw	1
  7286  0D9B  0008               	return
  7287  0D9C                     l2746:	
  7288                           
  7289                           ;mtouch_sensor.c: 611: else;mtouch_sensor.c: 612: return 0;
  7290  0D9C  3000               	movlw	0
  7291  0D9D  0008               	return
  7292  0D9E                     __end_of_MTOUCH_Sensor_wasSampled:	
  7293                           
  7294                           	psect	text44
  7295  0BF0                     __ptext44:	
  7296 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  7297 ;; Defined at:
  7298 ;;		line 580 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  sensor          1    wreg     enum E4132
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;  sensor          1    0[COMMON] enum E4132
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  1    wreg      unsigned char 
  7305 ;; Registers used:
  7306 ;;		wreg
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;Total ram usage:        0 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; Hardware stack levels required when called:    4
  7319 ;; This function calls:
  7320 ;;		Nothing
  7321 ;; This function is called by:
  7322 ;;		_Button_Service
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           
  7327                           ;psect for function _MTOUCH_Sensor_isCalibrated
  7328  0BF0                     _MTOUCH_Sensor_isCalibrated:	
  7329                           
  7330                           ;mtouch_sensor.c: 583: return 1;
  7331                           
  7332                           ;incstack = 0
  7333                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg]
  7334  0BF0  3001               	movlw	1
  7335  0BF1  0008               	return
  7336  0BF2                     __end_of_MTOUCH_Sensor_isCalibrated:	
  7337                           
  7338                           	psect	text45
  7339  005A                     __ptext45:	
  7340 ;; *************** function _Button_State_NotPressed *****************
  7341 ;; Defined at:
  7342 ;;		line 264 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  button          2   14[BANK0 ] PTR struct .
  7345 ;;		 -> mtouch_button(96), 
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      void 
  7350 ;; Registers used:
  7351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7357 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;Total ram usage:        4 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; Hardware stack levels required when called:    6
  7364 ;; This function calls:
  7365 ;;		_Button_Baseline_Update
  7366 ;;		_Button_DefaultCallback
  7367 ;;		_MTOUCH_Button_Initialize
  7368 ;; This function is called by:
  7369 ;;		_Button_Service
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _Button_State_NotPressed
  7375  005A                     _Button_State_NotPressed:	
  7376                           
  7377                           ;mtouch_button.c: 267: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
  7378                           
  7379                           ;incstack = 0
  7380                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7381  005A  0020               	movlb	0	; select bank0
  7382  005B  082E               	movf	Button_State_NotPressed@button,w
  7383  005C  0086               	movwf	6
  7384  005D  082F               	movf	Button_State_NotPressed@button+1,w
  7385  005E  0087               	movwf	7
  7386  005F  3149               	addfsr 1,9
  7387  0060  0801               	movf	1,w
  7388  0061  3A80               	xorlw	128
  7389  0062  00B0               	movwf	??_Button_State_NotPressed
  7390  0063  082E               	movf	Button_State_NotPressed@button,w
  7391  0064  0086               	movwf	6
  7392  0065  082F               	movf	Button_State_NotPressed@button+1,w
  7393  0066  0087               	movwf	7
  7394  0067  314E               	addfsr 1,14
  7395  0068  0301               	decf	1,w
  7396  0069  3AFF               	xorlw	255
  7397  006A  3A80               	xorlw	128
  7398  006B  02B0               	subwf	??_Button_State_NotPressed,f
  7399  006C  1803               	skipnc
  7400  006D  2899               	goto	l2796
  7401                           
  7402                           ;mtouch_button.c: 268: {;mtouch_button.c: 269: (button->counter)++;
  7403  006E  082E               	movf	Button_State_NotPressed@button,w
  7404  006F  0086               	movwf	6
  7405  0070  082F               	movf	Button_State_NotPressed@button+1,w
  7406  0071  0087               	movwf	7
  7407  0072  314A               	addfsr 1,10
  7408  0073  3001               	movlw	1
  7409  0074  0781               	addwf	1,f
  7410  0075  3141               	addfsr 1,1
  7411  0076  1803               	skipnc
  7412  0077  0A81               	incf	1,f
  7413                           
  7414                           ;mtouch_button.c: 270: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64))
  7415  0078  082E               	movf	Button_State_NotPressed@button,w
  7416  0079  0086               	movwf	6
  7417  007A  082F               	movf	Button_State_NotPressed@button+1,w
  7418  007B  0087               	movwf	7
  7419  007C  314A               	addfsr 1,10
  7420  007D  3F40               	moviw [0]fsr1
  7421  007E  00B0               	movwf	??_Button_State_NotPressed
  7422  007F  3F41               	moviw [1]fsr1
  7423  0080  00B1               	movwf	??_Button_State_NotPressed+1
  7424  0081  3000               	movlw	0
  7425  0082  0231               	subwf	??_Button_State_NotPressed+1,w
  7426  0083  3041               	movlw	65
  7427  0084  1903               	skipnz
  7428  0085  0230               	subwf	??_Button_State_NotPressed,w
  7429  0086  1C03               	skipc
  7430  0087  28DB               	goto	l2806
  7431                           
  7432                           ;mtouch_button.c: 271: {;mtouch_button.c: 272: button->counter = (mtouch_button_statecou
      +                          nter_t)0;
  7433  0088  082E               	movf	Button_State_NotPressed@button,w
  7434  0089  0086               	movwf	6
  7435  008A  082F               	movf	Button_State_NotPressed@button+1,w
  7436  008B  0087               	movwf	7
  7437  008C  314A               	addfsr 1,10
  7438  008D  3000               	movlw	0
  7439  008E  3FC0               	movwi [0]fsr1
  7440  008F  3FC1               	movwi [1]fsr1
  7441                           
  7442                           ;mtouch_button.c: 273: MTOUCH_Button_Initialize(button->name);
  7443  0090  082E               	movf	Button_State_NotPressed@button,w
  7444  0091  0086               	movwf	6
  7445  0092  082F               	movf	Button_State_NotPressed@button+1,w
  7446  0093  0087               	movwf	7
  7447  0094  0801               	movf	1,w
  7448  0095  3186  263B  3180   	fcall	_MTOUCH_Button_Initialize
  7449  0098  28DB               	goto	l2806
  7450  0099                     l2796:	
  7451                           
  7452                           ;mtouch_button.c: 277: else if ((button->deviation) > (button->threshold))
  7453  0099  082E               	movf	Button_State_NotPressed@button,w
  7454  009A  0086               	movwf	6
  7455  009B  082F               	movf	Button_State_NotPressed@button+1,w
  7456  009C  0087               	movwf	7
  7457  009D  3149               	addfsr 1,9
  7458  009E  0801               	movf	1,w
  7459  009F  00B0               	movwf	??_Button_State_NotPressed
  7460  00A0  01B1               	clrf	??_Button_State_NotPressed+1
  7461  00A1  1BB0               	btfsc	??_Button_State_NotPressed,7
  7462  00A2  03B1               	decf	??_Button_State_NotPressed+1,f
  7463  00A3  082E               	movf	Button_State_NotPressed@button,w
  7464  00A4  0086               	movwf	6
  7465  00A5  082F               	movf	Button_State_NotPressed@button+1,w
  7466  00A6  0087               	movwf	7
  7467  00A7  314E               	addfsr 1,14
  7468  00A8  0831               	movf	??_Button_State_NotPressed+1,w
  7469  00A9  3A80               	xorlw	128
  7470  00AA  3C80               	sublw	128
  7471  00AB  1D03               	skipz
  7472  00AC  28AF               	goto	u1445
  7473  00AD  0830               	movf	??_Button_State_NotPressed,w
  7474  00AE  0201               	subwf	1,w
  7475  00AF                     u1445:	
  7476  00AF  1803               	skipnc
  7477  00B0  28D2               	goto	l2804
  7478                           
  7479                           ;mtouch_button.c: 278: {;mtouch_button.c: 280: button->state = MTOUCH_BUTTON_STATE_press
      +                          ed;
  7480  00B1  0020               	movlb	0	; select bank0
  7481  00B2  082E               	movf	Button_State_NotPressed@button,w
  7482  00B3  3E02               	addlw	2
  7483  00B4  00B0               	movwf	??_Button_State_NotPressed
  7484  00B5  3000               	movlw	0
  7485  00B6  3D2F               	addwfc	Button_State_NotPressed@button+1,w
  7486  00B7  00B1               	movwf	??_Button_State_NotPressed+1
  7487  00B8  0830               	movf	??_Button_State_NotPressed,w
  7488  00B9  0086               	movwf	6
  7489  00BA  0831               	movf	??_Button_State_NotPressed+1,w
  7490  00BB  0087               	movwf	7
  7491  00BC  3002               	movlw	2
  7492  00BD  0081               	movwf	1
  7493                           
  7494                           ;mtouch_button.c: 281: button->counter = (mtouch_button_statecounter_t)0;
  7495  00BE  082E               	movf	Button_State_NotPressed@button,w
  7496  00BF  0086               	movwf	6
  7497  00C0  082F               	movf	Button_State_NotPressed@button+1,w
  7498  00C1  0087               	movwf	7
  7499  00C2  314A               	addfsr 1,10
  7500  00C3  3000               	movlw	0
  7501  00C4  3FC0               	movwi [0]fsr1
  7502  00C5  3FC1               	movwi [1]fsr1
  7503                           
  7504                           ;mtouch_button.c: 282: callback_pressed(button->name);
  7505  00C6  082E               	movf	Button_State_NotPressed@button,w
  7506  00C7  0086               	movwf	6
  7507  00C8  082F               	movf	Button_State_NotPressed@button+1,w
  7508  00C9  0087               	movwf	7
  7509  00CA  0801               	movf	1,w
  7510  00CB  00B0               	movwf	??_Button_State_NotPressed
  7511  00CC  0830               	movf	??_Button_State_NotPressed,w
  7512  00CD  00A0               	movwf	Button_DefaultCallback@button
  7513  00CE  318B  23ED  3180   	fcall	_Button_DefaultCallback
  7514                           
  7515                           ;mtouch_button.c: 283: }
  7516  00D1  28DB               	goto	l2806
  7517  00D2                     l2804:	
  7518                           
  7519                           ;mtouch_button.c: 284: else;mtouch_button.c: 285: {;mtouch_button.c: 287: button->counte
      +                          r = (mtouch_button_statecounter_t)0;
  7520  00D2  0020               	movlb	0	; select bank0
  7521  00D3  082E               	movf	Button_State_NotPressed@button,w
  7522  00D4  0086               	movwf	6
  7523  00D5  082F               	movf	Button_State_NotPressed@button+1,w
  7524  00D6  0087               	movwf	7
  7525  00D7  314A               	addfsr 1,10
  7526  00D8  3000               	movlw	0
  7527  00D9  3FC0               	movwi [0]fsr1
  7528  00DA  3FC1               	movwi [1]fsr1
  7529  00DB                     l2806:	
  7530                           
  7531                           ;mtouch_button.c: 288: };mtouch_button.c: 292: (button->baseline_count)++;
  7532  00DB  0020               	movlb	0	; select bank0
  7533  00DC  082E               	movf	Button_State_NotPressed@button,w
  7534  00DD  0086               	movwf	6
  7535  00DE  082F               	movf	Button_State_NotPressed@button+1,w
  7536  00DF  0087               	movwf	7
  7537  00E0  314C               	addfsr 1,12
  7538  00E1  3001               	movlw	1
  7539  00E2  0781               	addwf	1,f
  7540  00E3  3141               	addfsr 1,1
  7541  00E4  1803               	skipnc
  7542  00E5  0A81               	incf	1,f
  7543                           
  7544                           ;mtouch_button.c: 293: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64))
  7545  00E6  082E               	movf	Button_State_NotPressed@button,w
  7546  00E7  0086               	movwf	6
  7547  00E8  082F               	movf	Button_State_NotPressed@button+1,w
  7548  00E9  0087               	movwf	7
  7549  00EA  314C               	addfsr 1,12
  7550  00EB  0016               	moviw fsr1++
  7551  00EC  3A40               	xorlw	64
  7552  00ED  00B0               	movwf	??_Button_State_NotPressed
  7553  00EE  0016               	moviw fsr1++
  7554  00EF  04B0               	iorwf	??_Button_State_NotPressed,f
  7555  00F0  1D03               	btfss	3,2
  7556  00F1  0008               	return
  7557                           
  7558                           ;mtouch_button.c: 294: {;mtouch_button.c: 295: button->baseline_count = (mtouch_button_b
      +                          aselinecounter_t)0;
  7559  00F2  082E               	movf	Button_State_NotPressed@button,w
  7560  00F3  0086               	movwf	6
  7561  00F4  082F               	movf	Button_State_NotPressed@button+1,w
  7562  00F5  0087               	movwf	7
  7563  00F6  314C               	addfsr 1,12
  7564  00F7  3000               	movlw	0
  7565  00F8  3FC0               	movwi [0]fsr1
  7566  00F9  3FC1               	movwi [1]fsr1
  7567                           
  7568                           ;mtouch_button.c: 296: Button_Baseline_Update(button);
  7569  00FA  082F               	movf	Button_State_NotPressed@button+1,w
  7570  00FB  00A1               	movwf	Button_Baseline_Update@button+1
  7571  00FC  082E               	movf	Button_State_NotPressed@button,w
  7572  00FD  00A0               	movwf	Button_Baseline_Update@button
  7573  00FE  3181  2101         	fcall	_Button_Baseline_Update
  7574  0100  0008               	return
  7575  0101                     __end_of_Button_State_NotPressed:	
  7576                           
  7577                           	psect	text46
  7578  039A                     __ptext46:	
  7579 ;; *************** function _Button_State_Initializing *****************
  7580 ;; Defined at:
  7581 ;;		line 244 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  button          2   14[BANK0 ] PTR struct .
  7584 ;;		 -> mtouch_button(96), 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7596 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;Total ram usage:        6 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    7
  7603 ;; This function calls:
  7604 ;;		_Button_Baseline_Initialize
  7605 ;;		_Button_Baseline_Update
  7606 ;; This function is called by:
  7607 ;;		_Button_Service
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           
  7612                           ;psect for function _Button_State_Initializing
  7613  039A                     _Button_State_Initializing:	
  7614                           
  7615                           ;mtouch_button.c: 247: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16)/2)
  7616                           
  7617                           ;incstack = 0
  7618                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7619  039A  0020               	movlb	0	; select bank0
  7620  039B  082E               	movf	Button_State_Initializing@button,w
  7621  039C  0086               	movwf	6
  7622  039D  082F               	movf	Button_State_Initializing@button+1,w
  7623  039E  0087               	movwf	7
  7624  039F  314A               	addfsr 1,10
  7625  03A0  3F40               	moviw [0]fsr1
  7626  03A1  00B0               	movwf	??_Button_State_Initializing
  7627  03A2  3F41               	moviw [1]fsr1
  7628  03A3  00B1               	movwf	??_Button_State_Initializing+1
  7629  03A4  3000               	movlw	0
  7630  03A5  0231               	subwf	??_Button_State_Initializing+1,w
  7631  03A6  3009               	movlw	9
  7632  03A7  1903               	skipnz
  7633  03A8  0230               	subwf	??_Button_State_Initializing,w
  7634  03A9  1803               	skipnc
  7635  03AA  2BB3               	goto	l2776
  7636                           
  7637                           ;mtouch_button.c: 248: {;mtouch_button.c: 249: Button_Baseline_Initialize(button);
  7638  03AB  082F               	movf	Button_State_Initializing@button+1,w
  7639  03AC  00A9               	movwf	Button_Baseline_Initialize@button+1
  7640  03AD  082E               	movf	Button_State_Initializing@button,w
  7641  03AE  00A8               	movwf	Button_Baseline_Initialize@button
  7642  03AF  3187  2703  3183   	fcall	_Button_Baseline_Initialize
  7643                           
  7644                           ;mtouch_button.c: 250: } else {
  7645  03B2  2BBA               	goto	l2778
  7646  03B3                     l2776:	
  7647                           
  7648                           ;mtouch_button.c: 251: Button_Baseline_Update(button);
  7649  03B3  082F               	movf	Button_State_Initializing@button+1,w
  7650  03B4  00A1               	movwf	Button_Baseline_Update@button+1
  7651  03B5  082E               	movf	Button_State_Initializing@button,w
  7652  03B6  00A0               	movwf	Button_Baseline_Update@button
  7653  03B7  3181  2101  3183   	fcall	_Button_Baseline_Update
  7654  03BA                     l2778:	
  7655                           
  7656                           ;mtouch_button.c: 252: };mtouch_button.c: 255: (button->counter)++;
  7657  03BA  0020               	movlb	0	; select bank0
  7658  03BB  082E               	movf	Button_State_Initializing@button,w
  7659  03BC  0086               	movwf	6
  7660  03BD  082F               	movf	Button_State_Initializing@button+1,w
  7661  03BE  0087               	movwf	7
  7662  03BF  314A               	addfsr 1,10
  7663  03C0  3001               	movlw	1
  7664  03C1  0781               	addwf	1,f
  7665  03C2  3141               	addfsr 1,1
  7666  03C3  1803               	skipnc
  7667  03C4  0A81               	incf	1,f
  7668                           
  7669                           ;mtouch_button.c: 256: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16))
  7670  03C5  082E               	movf	Button_State_Initializing@button,w
  7671  03C6  0086               	movwf	6
  7672  03C7  082F               	movf	Button_State_Initializing@button+1,w
  7673  03C8  0087               	movwf	7
  7674  03C9  314A               	addfsr 1,10
  7675  03CA  3F40               	moviw [0]fsr1
  7676  03CB  00B0               	movwf	??_Button_State_Initializing
  7677  03CC  3F41               	moviw [1]fsr1
  7678  03CD  00B1               	movwf	??_Button_State_Initializing+1
  7679  03CE  3000               	movlw	0
  7680  03CF  0231               	subwf	??_Button_State_Initializing+1,w
  7681  03D0  3010               	movlw	16
  7682  03D1  1903               	skipnz
  7683  03D2  0230               	subwf	??_Button_State_Initializing,w
  7684  03D3  1C03               	skipc
  7685  03D4  0008               	return
  7686                           
  7687                           ;mtouch_button.c: 257: {;mtouch_button.c: 258: button->reading = (mtouch_button_reading_
      +                          t)((button->baseline)>>((uint8_t)4));
  7688  03D5  082E               	movf	Button_State_Initializing@button,w
  7689  03D6  0086               	movwf	6
  7690  03D7  082F               	movf	Button_State_Initializing@button+1,w
  7691  03D8  0087               	movwf	7
  7692  03D9  3145               	addfsr 1,5
  7693  03DA  3F40               	moviw [0]fsr1
  7694  03DB  00B0               	movwf	??_Button_State_Initializing
  7695  03DC  3F41               	moviw [1]fsr1
  7696  03DD  00B1               	movwf	??_Button_State_Initializing+1
  7697  03DE  3F42               	moviw [2]fsr1
  7698  03DF  00B2               	movwf	??_Button_State_Initializing+2
  7699  03E0  3F43               	moviw [3]fsr1
  7700  03E1  00B3               	movwf	??_Button_State_Initializing+3
  7701  03E2  3004               	movlw	4
  7702  03E3                     u1415:	
  7703  03E3  36B3               	lsrf	??_Button_State_Initializing+3,f
  7704  03E4  0CB2               	rrf	??_Button_State_Initializing+2,f
  7705  03E5  0CB1               	rrf	??_Button_State_Initializing+1,f
  7706  03E6  0CB0               	rrf	??_Button_State_Initializing,f
  7707  03E7  0B89               	decfsz	9,f
  7708  03E8  2BE3               	goto	u1415
  7709  03E9  082E               	movf	Button_State_Initializing@button,w
  7710  03EA  0086               	movwf	6
  7711  03EB  082F               	movf	Button_State_Initializing@button+1,w
  7712  03EC  0087               	movwf	7
  7713  03ED  3143               	addfsr 1,3
  7714  03EE  0830               	movf	??_Button_State_Initializing,w
  7715  03EF  3FC0               	movwi [0]fsr1
  7716  03F0  0831               	movf	??_Button_State_Initializing+1,w
  7717  03F1  3FC1               	movwi [1]fsr1
  7718                           
  7719                           ;mtouch_button.c: 259: button->state = MTOUCH_BUTTON_STATE_notPressed;
  7720  03F2  082E               	movf	Button_State_Initializing@button,w
  7721  03F3  3E02               	addlw	2
  7722  03F4  00B0               	movwf	??_Button_State_Initializing
  7723  03F5  3000               	movlw	0
  7724  03F6  3D2F               	addwfc	Button_State_Initializing@button+1,w
  7725  03F7  00B1               	movwf	??_Button_State_Initializing+1
  7726  03F8  0830               	movf	??_Button_State_Initializing,w
  7727  03F9  0086               	movwf	6
  7728  03FA  0831               	movf	??_Button_State_Initializing+1,w
  7729  03FB  0087               	movwf	7
  7730  03FC  3001               	movlw	1
  7731  03FD  0081               	movwf	1
  7732                           
  7733                           ;mtouch_button.c: 260: button->counter = (mtouch_button_statecounter_t)0;
  7734  03FE  082E               	movf	Button_State_Initializing@button,w
  7735  03FF  0086               	movwf	6
  7736  0400  082F               	movf	Button_State_Initializing@button+1,w
  7737  0401  0087               	movwf	7
  7738  0402  314A               	addfsr 1,10
  7739  0403  3000               	movlw	0
  7740  0404  3FC0               	movwi [0]fsr1
  7741  0405  3FC1               	movwi [1]fsr1
  7742  0406  0008               	return
  7743  0407                     __end_of_Button_State_Initializing:	
  7744                           
  7745                           	psect	text47
  7746  04D4                     __ptext47:	
  7747 ;; *************** function _Button_State_Pressed *****************
  7748 ;; Defined at:
  7749 ;;		line 300 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;  button          2   14[BANK0 ] PTR struct .
  7752 ;;		 -> mtouch_button(96), 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;		None
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  1    wreg      void 
  7757 ;; Registers used:
  7758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7764 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;Total ram usage:        4 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    6
  7771 ;; This function calls:
  7772 ;;		_Button_DefaultCallback
  7773 ;;		_MTOUCH_Button_Initialize
  7774 ;; This function is called by:
  7775 ;;		_Button_Service
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           
  7780                           ;psect for function _Button_State_Pressed
  7781  04D4                     _Button_State_Pressed:	
  7782                           
  7783                           ;mtouch_button.c: 303: if ((button->counter) >= ((mtouch_button_statecounter_t)100))
  7784                           
  7785                           ;incstack = 0
  7786                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7787  04D4  0020               	movlb	0	; select bank0
  7788  04D5  082E               	movf	Button_State_Pressed@button,w
  7789  04D6  0086               	movwf	6
  7790  04D7  082F               	movf	Button_State_Pressed@button+1,w
  7791  04D8  0087               	movwf	7
  7792  04D9  314A               	addfsr 1,10
  7793  04DA  3F40               	moviw [0]fsr1
  7794  04DB  00B0               	movwf	??_Button_State_Pressed
  7795  04DC  3F41               	moviw [1]fsr1
  7796  04DD  00B1               	movwf	??_Button_State_Pressed+1
  7797  04DE  3000               	movlw	0
  7798  04DF  0231               	subwf	??_Button_State_Pressed+1,w
  7799  04E0  3064               	movlw	100
  7800  04E1  1903               	skipnz
  7801  04E2  0230               	subwf	??_Button_State_Pressed,w
  7802  04E3  1C03               	skipc
  7803  04E4  2CF9               	goto	l2818
  7804                           
  7805                           ;mtouch_button.c: 304: {;mtouch_button.c: 305: MTOUCH_Button_Initialize(button->name);
  7806  04E5  082E               	movf	Button_State_Pressed@button,w
  7807  04E6  0086               	movwf	6
  7808  04E7  082F               	movf	Button_State_Pressed@button+1,w
  7809  04E8  0087               	movwf	7
  7810  04E9  0801               	movf	1,w
  7811  04EA  3186  263B  3184   	fcall	_MTOUCH_Button_Initialize
  7812                           
  7813                           ;mtouch_button.c: 306: callback_notPressed(button->name);
  7814  04ED  0020               	movlb	0	; select bank0
  7815  04EE  082E               	movf	Button_State_Pressed@button,w
  7816  04EF  0086               	movwf	6
  7817  04F0  082F               	movf	Button_State_Pressed@button+1,w
  7818  04F1  0087               	movwf	7
  7819  04F2  0801               	movf	1,w
  7820  04F3  00B0               	movwf	??_Button_State_Pressed
  7821  04F4  0830               	movf	??_Button_State_Pressed,w
  7822  04F5  00A0               	movwf	Button_DefaultCallback@button
  7823  04F6  318B  23ED         	fcall	_Button_DefaultCallback
  7824                           
  7825                           ;mtouch_button.c: 307: }
  7826  04F8  0008               	return
  7827  04F9                     l2818:	
  7828                           
  7829                           ;mtouch_button.c: 310: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)- ((button->threshold) >> HYST_50_PERCENT)))
  7830  04F9  082E               	movf	Button_State_Pressed@button,w
  7831  04FA  0086               	movwf	6
  7832  04FB  082F               	movf	Button_State_Pressed@button+1,w
  7833  04FC  0087               	movwf	7
  7834  04FD  3149               	addfsr 1,9
  7835  04FE  0801               	movf	1,w
  7836  04FF  3A80               	xorlw	128
  7837  0500  00B0               	movwf	??_Button_State_Pressed
  7838  0501  082E               	movf	Button_State_Pressed@button,w
  7839  0502  0086               	movwf	6
  7840  0503  082F               	movf	Button_State_Pressed@button+1,w
  7841  0504  0087               	movwf	7
  7842  0505  314E               	addfsr 1,14
  7843  0506  082E               	movf	Button_State_Pressed@button,w
  7844  0507  0084               	movwf	4
  7845  0508  082F               	movf	Button_State_Pressed@button+1,w
  7846  0509  0085               	movwf	5
  7847  050A  310E               	addfsr 0,14
  7848  050B  3600               	lsrf	0,w
  7849  050C  0201               	subwf	1,w
  7850  050D  3A80               	xorlw	128
  7851  050E  02B0               	subwf	??_Button_State_Pressed,f
  7852  050F  1803               	skipnc
  7853  0510  0008               	return
  7854                           
  7855                           ;mtouch_button.c: 311: {;mtouch_button.c: 312: button->state = MTOUCH_BUTTON_STATE_notPr
      +                          essed;
  7856  0511  082E               	movf	Button_State_Pressed@button,w
  7857  0512  3E02               	addlw	2
  7858  0513  00B0               	movwf	??_Button_State_Pressed
  7859  0514  3000               	movlw	0
  7860  0515  3D2F               	addwfc	Button_State_Pressed@button+1,w
  7861  0516  00B1               	movwf	??_Button_State_Pressed+1
  7862  0517  0830               	movf	??_Button_State_Pressed,w
  7863  0518  0086               	movwf	6
  7864  0519  0831               	movf	??_Button_State_Pressed+1,w
  7865  051A  0087               	movwf	7
  7866  051B  3001               	movlw	1
  7867  051C  0081               	movwf	1
  7868                           
  7869                           ;mtouch_button.c: 313: button->counter = (mtouch_button_statecounter_t)0;
  7870  051D  082E               	movf	Button_State_Pressed@button,w
  7871  051E  0086               	movwf	6
  7872  051F  082F               	movf	Button_State_Pressed@button+1,w
  7873  0520  0087               	movwf	7
  7874  0521  314A               	addfsr 1,10
  7875  0522  3000               	movlw	0
  7876  0523  3FC0               	movwi [0]fsr1
  7877  0524  3FC1               	movwi [1]fsr1
  7878                           
  7879                           ;mtouch_button.c: 314: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024);
  7880  0525  082E               	movf	Button_State_Pressed@button,w
  7881  0526  0086               	movwf	6
  7882  0527  082F               	movf	Button_State_Pressed@button+1,w
  7883  0528  0087               	movwf	7
  7884  0529  314C               	addfsr 1,12
  7885  052A  30FF               	movlw	255
  7886  052B  3FC0               	movwi [0]fsr1
  7887  052C  30FB               	movlw	251
  7888  052D  3FC1               	movwi [1]fsr1
  7889                           
  7890                           ;mtouch_button.c: 315: callback_notPressed(button->name);
  7891  052E  082E               	movf	Button_State_Pressed@button,w
  7892  052F  0086               	movwf	6
  7893  0530  082F               	movf	Button_State_Pressed@button+1,w
  7894  0531  0087               	movwf	7
  7895  0532  0801               	movf	1,w
  7896  0533  00B0               	movwf	??_Button_State_Pressed
  7897  0534  0830               	movf	??_Button_State_Pressed,w
  7898  0535  00A0               	movwf	Button_DefaultCallback@button
  7899  0536  318B  23ED         	fcall	_Button_DefaultCallback
  7900  0538  0008               	return
  7901  0539                     __end_of_Button_State_Pressed:	
  7902                           
  7903                           	psect	text48
  7904  063B                     __ptext48:	
  7905 ;; *************** function _MTOUCH_Button_Initialize *****************
  7906 ;; Defined at:
  7907 ;;		line 186 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7908 ;; Parameters:    Size  Location     Type
  7909 ;;  name            1    wreg     enum E4133
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;  name            1    4[BANK0 ] enum E4133
  7912 ;;  button          2    5[BANK0 ] PTR struct .
  7913 ;;		 -> mtouch_button(96), 
  7914 ;; Return value:  Size  Location     Type
  7915 ;;                  1    wreg      void 
  7916 ;; Registers used:
  7917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7925 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7926 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;Total ram usage:        7 bytes
  7928 ;; Hardware stack levels used:    1
  7929 ;; Hardware stack levels required when called:    5
  7930 ;; This function calls:
  7931 ;;		_MTOUCH_Sensor_Calibrate
  7932 ;; This function is called by:
  7933 ;;		_MTOUCH_Button_InitializeAll
  7934 ;;		_Button_Service
  7935 ;;		_Button_State_NotPressed
  7936 ;;		_Button_State_Pressed
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _MTOUCH_Button_Initialize
  7942  063B                     _MTOUCH_Button_Initialize:	
  7943                           
  7944                           ;incstack = 0
  7945                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7946                           ;MTOUCH_Button_Initialize@name stored from wreg
  7947  063B  0020               	movlb	0	; select bank0
  7948  063C  00A4               	movwf	MTOUCH_Button_Initialize@name
  7949                           
  7950                           ;mtouch_button.c: 188: mtouch_button_t* button = &mtouch_button[name];
  7951  063D  0824               	movf	MTOUCH_Button_Initialize@name,w
  7952  063E  00A0               	movwf	??_MTOUCH_Button_Initialize
  7953  063F  01A1               	clrf	??_MTOUCH_Button_Initialize+1
  7954  0640  0EA0               	swapf	??_MTOUCH_Button_Initialize,f
  7955  0641  0EA1               	swapf	??_MTOUCH_Button_Initialize+1,f
  7956  0642  30F0               	movlw	240
  7957  0643  05A1               	andwf	??_MTOUCH_Button_Initialize+1,f
  7958  0644  0820               	movf	??_MTOUCH_Button_Initialize,w
  7959  0645  390F               	andlw	15
  7960  0646  04A1               	iorwf	??_MTOUCH_Button_Initialize+1,f
  7961  0647  30F0               	movlw	240
  7962  0648  05A0               	andwf	??_MTOUCH_Button_Initialize,f
  7963  0649  3090               	movlw	144
  7964  064A  00A2               	movwf	??_MTOUCH_Button_Initialize+2
  7965  064B  3023               	movlw	35
  7966  064C  00A3               	movwf	??_MTOUCH_Button_Initialize+3
  7967  064D  0820               	movf	??_MTOUCH_Button_Initialize,w
  7968  064E  0722               	addwf	??_MTOUCH_Button_Initialize+2,w
  7969  064F  00A5               	movwf	MTOUCH_Button_Initialize@button
  7970  0650  0821               	movf	??_MTOUCH_Button_Initialize+1,w
  7971  0651  3D23               	addwfc	??_MTOUCH_Button_Initialize+3,w
  7972  0652  00A6               	movwf	MTOUCH_Button_Initialize@button+1
  7973                           
  7974                           ;mtouch_button.c: 190: button->state = MTOUCH_BUTTON_STATE_initializing;
  7975  0653  0825               	movf	MTOUCH_Button_Initialize@button,w
  7976  0654  0086               	movwf	6
  7977  0655  0826               	movf	MTOUCH_Button_Initialize@button+1,w
  7978  0656  0087               	movwf	7
  7979  0657  3142               	addfsr 1,2
  7980  0658  0181               	clrf	1
  7981                           
  7982                           ;mtouch_button.c: 191: button->baseline = (mtouch_button_baseline_t)0;
  7983  0659  0825               	movf	MTOUCH_Button_Initialize@button,w
  7984  065A  3E05               	addlw	5
  7985  065B  00A0               	movwf	??_MTOUCH_Button_Initialize
  7986  065C  3000               	movlw	0
  7987  065D  3D26               	addwfc	MTOUCH_Button_Initialize@button+1,w
  7988  065E  00A1               	movwf	??_MTOUCH_Button_Initialize+1
  7989  065F  0820               	movf	??_MTOUCH_Button_Initialize,w
  7990  0660  0086               	movwf	6
  7991  0661  0821               	movf	??_MTOUCH_Button_Initialize+1,w
  7992  0662  0087               	movwf	7
  7993  0663  3000               	movlw	0
  7994  0664  3FC0               	movwi [0]fsr1
  7995  0665  3FC1               	movwi [1]fsr1
  7996  0666  3FC2               	movwi [2]fsr1
  7997  0667  3FC3               	movwi [3]fsr1
  7998                           
  7999                           ;mtouch_button.c: 192: button->counter = (mtouch_button_statecounter_t)0;
  8000  0668  0825               	movf	MTOUCH_Button_Initialize@button,w
  8001  0669  0086               	movwf	6
  8002  066A  0826               	movf	MTOUCH_Button_Initialize@button+1,w
  8003  066B  0087               	movwf	7
  8004  066C  314A               	addfsr 1,10
  8005  066D  3000               	movlw	0
  8006  066E  3FC0               	movwi [0]fsr1
  8007  066F  3FC1               	movwi [1]fsr1
  8008                           
  8009                           ;mtouch_button.c: 193: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  8010  0670  0825               	movf	MTOUCH_Button_Initialize@button,w
  8011  0671  0086               	movwf	6
  8012  0672  0826               	movf	MTOUCH_Button_Initialize@button+1,w
  8013  0673  0087               	movwf	7
  8014  0674  314C               	addfsr 1,12
  8015  0675  3000               	movlw	0
  8016  0676  3FC0               	movwi [0]fsr1
  8017  0677  3FC1               	movwi [1]fsr1
  8018                           
  8019                           ;mtouch_button.c: 195: MTOUCH_Sensor_Calibrate(button->sensor);
  8020  0678  0825               	movf	MTOUCH_Button_Initialize@button,w
  8021  0679  0086               	movwf	6
  8022  067A  0826               	movf	MTOUCH_Button_Initialize@button+1,w
  8023  067B  0087               	movwf	7
  8024  067C  3141               	addfsr 1,1
  8025  067D  0801               	movf	1,w
  8026  067E  318B  23EE         	fcall	_MTOUCH_Sensor_Calibrate
  8027  0680  0008               	return
  8028  0681                     __end_of_MTOUCH_Button_Initialize:	
  8029                           
  8030                           	psect	text49
  8031  0BEE                     __ptext49:	
  8032 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  8033 ;; Defined at:
  8034 ;;		line 586 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  sensor          1    wreg     enum E4132
  8037 ;; Auto vars:     Size  Location     Type
  8038 ;;  sensor          1    0[COMMON] enum E4132
  8039 ;; Return value:  Size  Location     Type
  8040 ;;                  1    wreg      void 
  8041 ;; Registers used:
  8042 ;;		wreg
  8043 ;; Tracked objects:
  8044 ;;		On entry : 0/0
  8045 ;;		On exit  : 0/0
  8046 ;;		Unchanged: 0/0
  8047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;Total ram usage:        0 bytes
  8053 ;; Hardware stack levels used:    1
  8054 ;; Hardware stack levels required when called:    4
  8055 ;; This function calls:
  8056 ;;		Nothing
  8057 ;; This function is called by:
  8058 ;;		_MTOUCH_Button_Initialize
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           
  8063                           ;psect for function _MTOUCH_Sensor_Calibrate
  8064  0BEE                     _MTOUCH_Sensor_Calibrate:	
  8065                           
  8066                           ;incstack = 0
  8067                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
  8068  0BEE  0008               	return
  8069  0BEF                     __end_of_MTOUCH_Sensor_Calibrate:	
  8070                           
  8071                           	psect	text50
  8072  0BED                     __ptext50:	
  8073 ;; *************** function _Button_DefaultCallback *****************
  8074 ;; Defined at:
  8075 ;;		line 552 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  button          1    0[BANK0 ] enum E4133
  8078 ;; Auto vars:     Size  Location     Type
  8079 ;;		None
  8080 ;; Return value:  Size  Location     Type
  8081 ;;                  1    wreg      void 
  8082 ;; Registers used:
  8083 ;;		None
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8089 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;Total ram usage:        1 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; Hardware stack levels required when called:    4
  8096 ;; This function calls:
  8097 ;;		Nothing
  8098 ;; This function is called by:
  8099 ;;		_Button_State_NotPressed
  8100 ;;		_Button_State_Pressed
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           
  8105                           ;psect for function _Button_DefaultCallback
  8106  0BED                     _Button_DefaultCallback:	
  8107                           
  8108                           ;incstack = 0
  8109                           ; Regs used in _Button_DefaultCallback: []
  8110  0BED  0008               	return
  8111  0BEE                     __end_of_Button_DefaultCallback:	
  8112                           
  8113                           	psect	text51
  8114  0101                     __ptext51:	
  8115 ;; *************** function _Button_Baseline_Update *****************
  8116 ;; Defined at:
  8117 ;;		line 508 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;  button          2    0[BANK0 ] PTR struct .
  8120 ;;		 -> mtouch_button(96), 
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;		None
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  1    wreg      void 
  8125 ;; Registers used:
  8126 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8132 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;Total ram usage:        8 bytes
  8137 ;; Hardware stack levels used:    1
  8138 ;; Hardware stack levels required when called:    4
  8139 ;; This function calls:
  8140 ;;		Nothing
  8141 ;; This function is called by:
  8142 ;;		_Button_State_Initializing
  8143 ;;		_Button_State_NotPressed
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           
  8148                           ;psect for function _Button_Baseline_Update
  8149  0101                     _Button_Baseline_Update:	
  8150                           
  8151                           ;mtouch_button.c: 510: if (GIE == (uint8_t)1)
  8152                           
  8153                           ;incstack = 0
  8154                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  8155  0101  1F8B               	btfss	11,7	;volatile
  8156  0102  294B               	goto	l2674
  8157                           
  8158                           ;mtouch_button.c: 511: {;mtouch_button.c: 512: GIE = (uint8_t)0;
  8159  0103  138B               	bcf	11,7	;volatile
  8160                           
  8161                           ;mtouch_button.c: 513: button->baseline -= (button->baseline) >> ((uint8_t)4);
  8162  0104  0020               	movlb	0	; select bank0
  8163  0105  0820               	movf	Button_Baseline_Update@button,w
  8164  0106  0086               	movwf	6
  8165  0107  0821               	movf	Button_Baseline_Update@button+1,w
  8166  0108  0087               	movwf	7
  8167  0109  3145               	addfsr 1,5
  8168  010A  3F40               	moviw [0]fsr1
  8169  010B  00A2               	movwf	??_Button_Baseline_Update
  8170  010C  3F41               	moviw [1]fsr1
  8171  010D  00A3               	movwf	??_Button_Baseline_Update+1
  8172  010E  3F42               	moviw [2]fsr1
  8173  010F  00A4               	movwf	??_Button_Baseline_Update+2
  8174  0110  3F43               	moviw [3]fsr1
  8175  0111  00A5               	movwf	??_Button_Baseline_Update+3
  8176  0112  3004               	movlw	4
  8177  0113                     u1255:	
  8178  0113  36A5               	lsrf	??_Button_Baseline_Update+3,f
  8179  0114  0CA4               	rrf	??_Button_Baseline_Update+2,f
  8180  0115  0CA3               	rrf	??_Button_Baseline_Update+1,f
  8181  0116  0CA2               	rrf	??_Button_Baseline_Update,f
  8182  0117  0B89               	decfsz	9,f
  8183  0118  2913               	goto	u1255
  8184  0119  0820               	movf	Button_Baseline_Update@button,w
  8185  011A  0086               	movwf	6
  8186  011B  0821               	movf	Button_Baseline_Update@button+1,w
  8187  011C  0087               	movwf	7
  8188  011D  3145               	addfsr 1,5
  8189  011E  0822               	movf	??_Button_Baseline_Update,w
  8190  011F  0281               	subwf	1,f
  8191  0120  3141               	addfsr 1,1
  8192  0121  0823               	movf	??_Button_Baseline_Update+1,w
  8193  0122  3B81               	subwfb	1,f
  8194  0123  3141               	addfsr 1,1
  8195  0124  0824               	movf	??_Button_Baseline_Update+2,w
  8196  0125  3B81               	subwfb	1,f
  8197  0126  3141               	addfsr 1,1
  8198  0127  0825               	movf	??_Button_Baseline_Update+3,w
  8199  0128  3B81               	subwfb	1,f
  8200  0129  317D               	addfsr 1,-3
  8201                           
  8202                           ;mtouch_button.c: 514: button->baseline += button->reading;
  8203  012A  0820               	movf	Button_Baseline_Update@button,w
  8204  012B  0086               	movwf	6
  8205  012C  0821               	movf	Button_Baseline_Update@button+1,w
  8206  012D  0087               	movwf	7
  8207  012E  3143               	addfsr 1,3
  8208  012F  3F40               	moviw [0]fsr1
  8209  0130  00A2               	movwf	??_Button_Baseline_Update
  8210  0131  3F41               	moviw [1]fsr1
  8211  0132  00A3               	movwf	??_Button_Baseline_Update+1
  8212  0133  0822               	movf	??_Button_Baseline_Update,w
  8213  0134  00A4               	movwf	??_Button_Baseline_Update+2
  8214  0135  0823               	movf	??_Button_Baseline_Update+1,w
  8215  0136  00A5               	movwf	??_Button_Baseline_Update+3
  8216  0137  01A6               	clrf	??_Button_Baseline_Update+4
  8217  0138  01A7               	clrf	??_Button_Baseline_Update+5
  8218  0139  0820               	movf	Button_Baseline_Update@button,w
  8219  013A  0086               	movwf	6
  8220  013B  0821               	movf	Button_Baseline_Update@button+1,w
  8221  013C  0087               	movwf	7
  8222  013D  3145               	addfsr 1,5
  8223  013E  0824               	movf	??_Button_Baseline_Update+2,w
  8224  013F  0781               	addwf	1,f
  8225  0140  3141               	addfsr 1,1
  8226  0141  0825               	movf	??_Button_Baseline_Update+3,w
  8227  0142  3D81               	addwfc	1,f
  8228  0143  3141               	addfsr 1,1
  8229  0144  0826               	movf	??_Button_Baseline_Update+4,w
  8230  0145  3D81               	addwfc	1,f
  8231  0146  3141               	addfsr 1,1
  8232  0147  0827               	movf	??_Button_Baseline_Update+5,w
  8233  0148  3D81               	addwfc	1,f
  8234                           
  8235                           ;mtouch_button.c: 515: GIE = (uint8_t)1;
  8236  0149  178B               	bsf	11,7	;volatile
  8237                           
  8238                           ;mtouch_button.c: 516: }
  8239  014A  0008               	return
  8240  014B                     l2674:	
  8241                           
  8242                           ;mtouch_button.c: 517: else;mtouch_button.c: 518: {;mtouch_button.c: 519: button->baseli
      +                          ne -= (button->baseline) >> ((uint8_t)4);
  8243  014B  0020               	movlb	0	; select bank0
  8244  014C  0820               	movf	Button_Baseline_Update@button,w
  8245  014D  0086               	movwf	6
  8246  014E  0821               	movf	Button_Baseline_Update@button+1,w
  8247  014F  0087               	movwf	7
  8248  0150  3145               	addfsr 1,5
  8249  0151  3F40               	moviw [0]fsr1
  8250  0152  00A2               	movwf	??_Button_Baseline_Update
  8251  0153  3F41               	moviw [1]fsr1
  8252  0154  00A3               	movwf	??_Button_Baseline_Update+1
  8253  0155  3F42               	moviw [2]fsr1
  8254  0156  00A4               	movwf	??_Button_Baseline_Update+2
  8255  0157  3F43               	moviw [3]fsr1
  8256  0158  00A5               	movwf	??_Button_Baseline_Update+3
  8257  0159  3004               	movlw	4
  8258  015A                     u1265:	
  8259  015A  36A5               	lsrf	??_Button_Baseline_Update+3,f
  8260  015B  0CA4               	rrf	??_Button_Baseline_Update+2,f
  8261  015C  0CA3               	rrf	??_Button_Baseline_Update+1,f
  8262  015D  0CA2               	rrf	??_Button_Baseline_Update,f
  8263  015E  0B89               	decfsz	9,f
  8264  015F  295A               	goto	u1265
  8265  0160  0820               	movf	Button_Baseline_Update@button,w
  8266  0161  0086               	movwf	6
  8267  0162  0821               	movf	Button_Baseline_Update@button+1,w
  8268  0163  0087               	movwf	7
  8269  0164  3145               	addfsr 1,5
  8270  0165  0822               	movf	??_Button_Baseline_Update,w
  8271  0166  0281               	subwf	1,f
  8272  0167  3141               	addfsr 1,1
  8273  0168  0823               	movf	??_Button_Baseline_Update+1,w
  8274  0169  3B81               	subwfb	1,f
  8275  016A  3141               	addfsr 1,1
  8276  016B  0824               	movf	??_Button_Baseline_Update+2,w
  8277  016C  3B81               	subwfb	1,f
  8278  016D  3141               	addfsr 1,1
  8279  016E  0825               	movf	??_Button_Baseline_Update+3,w
  8280  016F  3B81               	subwfb	1,f
  8281  0170  317D               	addfsr 1,-3
  8282                           
  8283                           ;mtouch_button.c: 520: button->baseline += button->reading;
  8284  0171  0820               	movf	Button_Baseline_Update@button,w
  8285  0172  0086               	movwf	6
  8286  0173  0821               	movf	Button_Baseline_Update@button+1,w
  8287  0174  0087               	movwf	7
  8288  0175  3143               	addfsr 1,3
  8289  0176  3F40               	moviw [0]fsr1
  8290  0177  00A2               	movwf	??_Button_Baseline_Update
  8291  0178  3F41               	moviw [1]fsr1
  8292  0179  00A3               	movwf	??_Button_Baseline_Update+1
  8293  017A  0822               	movf	??_Button_Baseline_Update,w
  8294  017B  00A4               	movwf	??_Button_Baseline_Update+2
  8295  017C  0823               	movf	??_Button_Baseline_Update+1,w
  8296  017D  00A5               	movwf	??_Button_Baseline_Update+3
  8297  017E  01A6               	clrf	??_Button_Baseline_Update+4
  8298  017F  01A7               	clrf	??_Button_Baseline_Update+5
  8299  0180  0820               	movf	Button_Baseline_Update@button,w
  8300  0181  0086               	movwf	6
  8301  0182  0821               	movf	Button_Baseline_Update@button+1,w
  8302  0183  0087               	movwf	7
  8303  0184  3145               	addfsr 1,5
  8304  0185  0824               	movf	??_Button_Baseline_Update+2,w
  8305  0186  0781               	addwf	1,f
  8306  0187  3141               	addfsr 1,1
  8307  0188  0825               	movf	??_Button_Baseline_Update+3,w
  8308  0189  3D81               	addwfc	1,f
  8309  018A  3141               	addfsr 1,1
  8310  018B  0826               	movf	??_Button_Baseline_Update+4,w
  8311  018C  3D81               	addwfc	1,f
  8312  018D  3141               	addfsr 1,1
  8313  018E  0827               	movf	??_Button_Baseline_Update+5,w
  8314  018F  3D81               	addwfc	1,f
  8315  0190  0008               	return
  8316  0191                     __end_of_Button_Baseline_Update:	
  8317                           
  8318                           	psect	text52
  8319  0703                     __ptext52:	
  8320 ;; *************** function _Button_Baseline_Initialize *****************
  8321 ;; Defined at:
  8322 ;;		line 502 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;  button          2    8[BANK0 ] PTR struct .
  8325 ;;		 -> mtouch_button(96), 
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;		None
  8328 ;; Return value:  Size  Location     Type
  8329 ;;                  1    wreg      void 
  8330 ;; Registers used:
  8331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8332 ;; Tracked objects:
  8333 ;;		On entry : 0/0
  8334 ;;		On exit  : 0/0
  8335 ;;		Unchanged: 0/0
  8336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8337 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;Total ram usage:        6 bytes
  8342 ;; Hardware stack levels used:    1
  8343 ;; Hardware stack levels required when called:    6
  8344 ;; This function calls:
  8345 ;;		_MTOUCH_Sensor_RawSample_Get
  8346 ;; This function is called by:
  8347 ;;		_Button_State_Initializing
  8348 ;; This function uses a non-reentrant model
  8349 ;;
  8350                           
  8351                           
  8352                           ;psect for function _Button_Baseline_Initialize
  8353  0703                     _Button_Baseline_Initialize:	
  8354                           
  8355                           ;mtouch_button.c: 504: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
  8356                           
  8357                           ;incstack = 0
  8358                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8359  0703  0020               	movlb	0	; select bank0
  8360  0704  0828               	movf	Button_Baseline_Initialize@button,w
  8361  0705  0086               	movwf	6
  8362  0706  0829               	movf	Button_Baseline_Initialize@button+1,w
  8363  0707  0087               	movwf	7
  8364  0708  3141               	addfsr 1,1
  8365  0709  0801               	movf	1,w
  8366  070A  318D  25CD  3187   	fcall	_MTOUCH_Sensor_RawSample_Get
  8367  070D  0020               	movlb	0	; select bank0
  8368  070E  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  8369  070F  00AA               	movwf	??_Button_Baseline_Initialize
  8370  0710  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  8371  0711  00AB               	movwf	??_Button_Baseline_Initialize+1
  8372  0712  01AC               	clrf	??_Button_Baseline_Initialize+2
  8373  0713  01AD               	clrf	??_Button_Baseline_Initialize+3
  8374  0714  0828               	movf	Button_Baseline_Initialize@button,w
  8375  0715  0086               	movwf	6
  8376  0716  0829               	movf	Button_Baseline_Initialize@button+1,w
  8377  0717  0087               	movwf	7
  8378  0718  3145               	addfsr 1,5
  8379  0719  082A               	movf	??_Button_Baseline_Initialize,w
  8380  071A  3FC0               	movwi [0]fsr1
  8381  071B  082B               	movf	??_Button_Baseline_Initialize+1,w
  8382  071C  3FC1               	movwi [1]fsr1
  8383  071D  082C               	movf	??_Button_Baseline_Initialize+2,w
  8384  071E  3FC2               	movwi [2]fsr1
  8385  071F  082D               	movf	??_Button_Baseline_Initialize+3,w
  8386  0720  3FC3               	movwi [3]fsr1
  8387                           
  8388                           ;mtouch_button.c: 505: button->baseline <<= ((uint8_t)4);
  8389  0721  0828               	movf	Button_Baseline_Initialize@button,w
  8390  0722  0086               	movwf	6
  8391  0723  0829               	movf	Button_Baseline_Initialize@button+1,w
  8392  0724  0087               	movwf	7
  8393  0725  3145               	addfsr 1,5
  8394  0726  3004               	movlw	4
  8395  0727                     u1235:	
  8396  0727  3581               	lslf	1,f
  8397  0728  3141               	addfsr 1,1
  8398  0729  0D81               	rlf	1,f
  8399  072A  3141               	addfsr 1,1
  8400  072B  0D81               	rlf	1,f
  8401  072C  3141               	addfsr 1,1
  8402  072D  0D81               	rlf	1,f
  8403  072E  317D               	addfsr 1,-3
  8404  072F  0B89               	decfsz	9,f
  8405  0730  2F27               	goto	u1235
  8406  0731  0008               	return
  8407  0732                     __end_of_Button_Baseline_Initialize:	
  8408                           
  8409                           	psect	text53
  8410  0D4B                     __ptext53:	
  8411 ;; *************** function _Button_Reading_Update *****************
  8412 ;; Defined at:
  8413 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;  button          2   12[BANK0 ] PTR struct .
  8416 ;;		 -> mtouch_button(96), 
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;		None
  8419 ;; Return value:  Size  Location     Type
  8420 ;;                  1    wreg      void 
  8421 ;; Registers used:
  8422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8423 ;; Tracked objects:
  8424 ;;		On entry : 0/0
  8425 ;;		On exit  : 0/0
  8426 ;;		Unchanged: 0/0
  8427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8428 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;Total ram usage:        2 bytes
  8433 ;; Hardware stack levels used:    1
  8434 ;; Hardware stack levels required when called:    7
  8435 ;; This function calls:
  8436 ;;		_Button_Reading_Update_Helper
  8437 ;; This function is called by:
  8438 ;;		_Button_Service
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           
  8443                           ;psect for function _Button_Reading_Update
  8444  0D4B                     _Button_Reading_Update:	
  8445                           
  8446                           ;mtouch_button.c: 477: if (GIE == (uint8_t) 1)
  8447                           
  8448                           ;incstack = 0
  8449                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8450  0D4B  1F8B               	btfss	11,7	;volatile
  8451  0D4C  2D57               	goto	l2758
  8452                           
  8453                           ;mtouch_button.c: 478: {;mtouch_button.c: 479: GIE = (uint8_t) 0;
  8454  0D4D  138B               	bcf	11,7	;volatile
  8455                           
  8456                           ;mtouch_button.c: 480: Button_Reading_Update_Helper(button);
  8457  0D4E  0020               	movlb	0	; select bank0
  8458  0D4F  082D               	movf	Button_Reading_Update@button+1,w
  8459  0D50  00A9               	movwf	Button_Reading_Update_Helper@button+1
  8460  0D51  082C               	movf	Button_Reading_Update@button,w
  8461  0D52  00A8               	movwf	Button_Reading_Update_Helper@button
  8462  0D53  3185  25EA         	fcall	_Button_Reading_Update_Helper
  8463                           
  8464                           ;mtouch_button.c: 481: GIE = (uint8_t) 1;
  8465  0D55  178B               	bsf	11,7	;volatile
  8466                           
  8467                           ;mtouch_button.c: 482: }
  8468  0D56  0008               	return
  8469  0D57                     l2758:	
  8470                           
  8471                           ;mtouch_button.c: 483: else;mtouch_button.c: 484: {;mtouch_button.c: 485: Button_Reading
      +                          _Update_Helper(button);
  8472  0D57  0020               	movlb	0	; select bank0
  8473  0D58  082D               	movf	Button_Reading_Update@button+1,w
  8474  0D59  00A9               	movwf	Button_Reading_Update_Helper@button+1
  8475  0D5A  082C               	movf	Button_Reading_Update@button,w
  8476  0D5B  00A8               	movwf	Button_Reading_Update_Helper@button
  8477  0D5C  3185  25EA         	fcall	_Button_Reading_Update_Helper
  8478  0D5E  0008               	return
  8479  0D5F                     __end_of_Button_Reading_Update:	
  8480                           
  8481                           	psect	text54
  8482  05EA                     __ptext54:	
  8483 ;; *************** function _Button_Reading_Update_Helper *****************
  8484 ;; Defined at:
  8485 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;  button          2    8[BANK0 ] PTR struct .
  8488 ;;		 -> mtouch_button(96), 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;		None
  8491 ;; Return value:  Size  Location     Type
  8492 ;;                  1    wreg      void 
  8493 ;; Registers used:
  8494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;Total ram usage:        4 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    6
  8507 ;; This function calls:
  8508 ;;		_MTOUCH_Sensor_RawSample_Get
  8509 ;; This function is called by:
  8510 ;;		_Button_Reading_Update
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           
  8515                           ;psect for function _Button_Reading_Update_Helper
  8516  05EA                     _Button_Reading_Update_Helper:	
  8517                           
  8518                           ;mtouch_button.c: 491: if (button->state != MTOUCH_BUTTON_STATE_initializing)
  8519                           
  8520                           ;incstack = 0
  8521                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  8522  05EA  0020               	movlb	0	; select bank0
  8523  05EB  0828               	movf	Button_Reading_Update_Helper@button,w
  8524  05EC  0086               	movwf	6
  8525  05ED  0829               	movf	Button_Reading_Update_Helper@button+1,w
  8526  05EE  0087               	movwf	7
  8527  05EF  3142               	addfsr 1,2
  8528  05F0  0801               	movf	1,w
  8529  05F1  1903               	btfsc	3,2
  8530  05F2  2E28               	goto	l2684
  8531                           
  8532                           ;mtouch_button.c: 492: {;mtouch_button.c: 493: button->reading -= button->reading>>(uint
      +                          8_t)2;
  8533  05F3  0828               	movf	Button_Reading_Update_Helper@button,w
  8534  05F4  0086               	movwf	6
  8535  05F5  0829               	movf	Button_Reading_Update_Helper@button+1,w
  8536  05F6  0087               	movwf	7
  8537  05F7  3143               	addfsr 1,3
  8538  05F8  3F40               	moviw [0]fsr1
  8539  05F9  00AA               	movwf	??_Button_Reading_Update_Helper
  8540  05FA  3F41               	moviw [1]fsr1
  8541  05FB  00AB               	movwf	??_Button_Reading_Update_Helper+1
  8542  05FC  36AB               	lsrf	??_Button_Reading_Update_Helper+1,f
  8543  05FD  0CAA               	rrf	??_Button_Reading_Update_Helper,f
  8544  05FE  36AB               	lsrf	??_Button_Reading_Update_Helper+1,f
  8545  05FF  0CAA               	rrf	??_Button_Reading_Update_Helper,f
  8546  0600  0828               	movf	Button_Reading_Update_Helper@button,w
  8547  0601  0086               	movwf	6
  8548  0602  0829               	movf	Button_Reading_Update_Helper@button+1,w
  8549  0603  0087               	movwf	7
  8550  0604  3143               	addfsr 1,3
  8551  0605  082A               	movf	??_Button_Reading_Update_Helper,w
  8552  0606  0281               	subwf	1,f
  8553  0607  3141               	addfsr 1,1
  8554  0608  082B               	movf	??_Button_Reading_Update_Helper+1,w
  8555  0609  3B81               	subwfb	1,f
  8556  060A  317F               	addfsr 1,-1
  8557                           
  8558                           ;mtouch_button.c: 494: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           (uint8_t)2;
  8559  060B  0828               	movf	Button_Reading_Update_Helper@button,w
  8560  060C  0086               	movwf	6
  8561  060D  0829               	movf	Button_Reading_Update_Helper@button+1,w
  8562  060E  0087               	movwf	7
  8563  060F  3141               	addfsr 1,1
  8564  0610  0801               	movf	1,w
  8565  0611  318D  25CD         	fcall	_MTOUCH_Sensor_RawSample_Get
  8566  0613  0020               	movlb	0	; select bank0
  8567  0614  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  8568  0615  00AA               	movwf	??_Button_Reading_Update_Helper
  8569  0616  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  8570  0617  00AB               	movwf	??_Button_Reading_Update_Helper+1
  8571  0618  36AB               	lsrf	??_Button_Reading_Update_Helper+1,f
  8572  0619  0CAA               	rrf	??_Button_Reading_Update_Helper,f
  8573  061A  36AB               	lsrf	??_Button_Reading_Update_Helper+1,f
  8574  061B  0CAA               	rrf	??_Button_Reading_Update_Helper,f
  8575  061C  0828               	movf	Button_Reading_Update_Helper@button,w
  8576  061D  0086               	movwf	6
  8577  061E  0829               	movf	Button_Reading_Update_Helper@button+1,w
  8578  061F  0087               	movwf	7
  8579  0620  3143               	addfsr 1,3
  8580  0621  082A               	movf	??_Button_Reading_Update_Helper,w
  8581  0622  0781               	addwf	1,f
  8582  0623  3141               	addfsr 1,1
  8583  0624  082B               	movf	??_Button_Reading_Update_Helper+1,w
  8584  0625  3D81               	addwfc	1,f
  8585  0626  317F               	addfsr 1,-1
  8586                           
  8587                           ;mtouch_button.c: 495: }
  8588  0627  0008               	return
  8589  0628                     l2684:	
  8590                           
  8591                           ;mtouch_button.c: 496: else;mtouch_button.c: 497: {;mtouch_button.c: 498: button->readin
      +                          g = MTOUCH_Sensor_RawSample_Get(button->sensor);
  8592  0628  0828               	movf	Button_Reading_Update_Helper@button,w
  8593  0629  0086               	movwf	6
  8594  062A  0829               	movf	Button_Reading_Update_Helper@button+1,w
  8595  062B  0087               	movwf	7
  8596  062C  3141               	addfsr 1,1
  8597  062D  0801               	movf	1,w
  8598  062E  318D  25CD         	fcall	_MTOUCH_Sensor_RawSample_Get
  8599  0630  0020               	movlb	0	; select bank0
  8600  0631  0828               	movf	Button_Reading_Update_Helper@button,w
  8601  0632  0086               	movwf	6
  8602  0633  0829               	movf	Button_Reading_Update_Helper@button+1,w
  8603  0634  0087               	movwf	7
  8604  0635  3143               	addfsr 1,3
  8605  0636  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  8606  0637  3FC0               	movwi [0]fsr1
  8607  0638  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  8608  0639  3FC1               	movwi [1]fsr1
  8609  063A  0008               	return
  8610  063B                     __end_of_Button_Reading_Update_Helper:	
  8611                           
  8612                           	psect	text55
  8613  0DCD                     __ptext55:	
  8614 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  8615 ;; Defined at:
  8616 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;  name            1    wreg     enum E4132
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  name            1    7[BANK0 ] enum E4132
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  2    4[BANK0 ] unsigned int 
  8623 ;; Registers used:
  8624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;Total ram usage:        4 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    5
  8637 ;; This function calls:
  8638 ;;		___bmul
  8639 ;; This function is called by:
  8640 ;;		_Button_Reading_Update_Helper
  8641 ;;		_Button_Baseline_Initialize
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           
  8646                           ;psect for function _MTOUCH_Sensor_RawSample_Get
  8647  0DCD                     _MTOUCH_Sensor_RawSample_Get:	
  8648                           
  8649                           ;incstack = 0
  8650                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8651                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
  8652  0DCD  0020               	movlb	0	; select bank0
  8653  0DCE  00A7               	movwf	MTOUCH_Sensor_RawSample_Get@name
  8654                           
  8655                           ;mtouch_sensor.c: 473: if (name < 7)
  8656  0DCF  3007               	movlw	7
  8657  0DD0  0227               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
  8658  0DD1  1803               	skipnc
  8659  0DD2  2DE4               	goto	l2574
  8660                           
  8661                           ;mtouch_sensor.c: 474: {;mtouch_sensor.c: 475: return mtouch_sensor[name].rawSample;
  8662  0DD3  3009               	movlw	9
  8663  0DD4  00A6               	movwf	??_MTOUCH_Sensor_RawSample_Get
  8664  0DD5  0826               	movf	??_MTOUCH_Sensor_RawSample_Get,w
  8665  0DD6  00A0               	movwf	___bmul@multiplicand
  8666  0DD7  0827               	movf	MTOUCH_Sensor_RawSample_Get@name,w
  8667  0DD8  318C  24EF         	fcall	___bmul
  8668  0DDA  3E26               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
  8669  0DDB  0086               	movwf	6
  8670  0DDC  3001               	movlw	1	; select bank2/3
  8671  0DDD  0087               	movwf	7
  8672  0DDE  3F40               	moviw [0]fsr1
  8673  0DDF  0020               	movlb	0	; select bank0
  8674  0DE0  00A4               	movwf	?_MTOUCH_Sensor_RawSample_Get
  8675  0DE1  3F41               	moviw [1]fsr1
  8676  0DE2  00A5               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
  8677  0DE3  0008               	return
  8678  0DE4                     l2574:	
  8679                           
  8680                           ;mtouch_sensor.c: 477: else;mtouch_sensor.c: 478: return (mtouch_sensor_sample_t)0;
  8681  0DE4  01A4               	clrf	?_MTOUCH_Sensor_RawSample_Get
  8682  0DE5  01A5               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
  8683  0DE6  0008               	return
  8684  0DE7                     __end_of_MTOUCH_Sensor_RawSample_Get:	
  8685                           
  8686                           	psect	text56
  8687  0CEF                     __ptext56:	
  8688 ;; *************** function ___bmul *****************
  8689 ;; Defined at:
  8690 ;;		line 4 in file "/Applications/microchip/xc8/v2.05/pic/sources/c90/common/Umul8.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;  multiplier      1    wreg     unsigned char 
  8693 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8696 ;;  product         1    2[BANK0 ] unsigned char 
  8697 ;; Return value:  Size  Location     Type
  8698 ;;                  1    wreg      unsigned char 
  8699 ;; Registers used:
  8700 ;;		wreg, status,2, status,0
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8706 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;Total ram usage:        4 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    4
  8713 ;; This function calls:
  8714 ;;		Nothing
  8715 ;; This function is called by:
  8716 ;;		_MTOUCH_Sensor_Initialize
  8717 ;;		_Sensor_Service
  8718 ;;		_Sensor_Acq_ExecuteScan
  8719 ;;		_MTOUCH_Sensor_RawSample_Get
  8720 ;;		_MTOUCH_Sensor_Enable
  8721 ;;		_MTOUCH_Sensor_wasSampled
  8722 ;;		_MTOUCH_Sensor_Disable
  8723 ;;		_MTOUCH_Sensor_isEnabled
  8724 ;;		_MTOUCH_Sensor_isActive
  8725 ;;		_MTOUCH_Sensor_Oversampling_Get
  8726 ;;		_MTOUCH_Sensor_Oversampling_Set
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           
  8731                           ;psect for function ___bmul
  8732  0CEF                     ___bmul:	
  8733                           
  8734                           ;incstack = 0
  8735                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8736                           ;___bmul@multiplier stored from wreg
  8737  0CEF  0020               	movlb	0	; select bank0
  8738  0CF0  00A3               	movwf	___bmul@multiplier
  8739  0CF1  01A2               	clrf	___bmul@product
  8740  0CF2                     l2502:	
  8741  0CF2  1C23               	btfss	___bmul@multiplier,0
  8742  0CF3  2CF8               	goto	l2506
  8743  0CF4  0820               	movf	___bmul@multiplicand,w
  8744  0CF5  00A1               	movwf	??___bmul
  8745  0CF6  0821               	movf	??___bmul,w
  8746  0CF7  07A2               	addwf	___bmul@product,f
  8747  0CF8                     l2506:	
  8748  0CF8  1003               	clrc
  8749  0CF9  0DA0               	rlf	___bmul@multiplicand,f
  8750  0CFA  1003               	clrc
  8751  0CFB  0CA3               	rrf	___bmul@multiplier,f
  8752  0CFC  0823               	movf	___bmul@multiplier,w
  8753  0CFD  1D03               	btfss	3,2
  8754  0CFE  2CF2               	goto	l2502
  8755  0CFF  0822               	movf	___bmul@product,w
  8756  0D00  0008               	return
  8757  0D01                     __end_of___bmul:	
  8758                           
  8759                           	psect	text57
  8760  021B                     __ptext57:	
  8761 ;; *************** function _Button_Deviation_Update *****************
  8762 ;; Defined at:
  8763 ;;		line 426 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8764 ;; Parameters:    Size  Location     Type
  8765 ;;  button          2    0[BANK0 ] PTR struct .
  8766 ;;		 -> mtouch_button(96), 
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;  deviation       4   12[BANK0 ] long 
  8769 ;; Return value:  Size  Location     Type
  8770 ;;                  1    wreg      void 
  8771 ;; Registers used:
  8772 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8773 ;; Tracked objects:
  8774 ;;		On entry : 0/0
  8775 ;;		On exit  : 0/0
  8776 ;;		Unchanged: 0/0
  8777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8778 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;Total ram usage:       16 bytes
  8783 ;; Hardware stack levels used:    1
  8784 ;; Hardware stack levels required when called:    4
  8785 ;; This function calls:
  8786 ;;		Nothing
  8787 ;; This function is called by:
  8788 ;;		_Button_Service
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           
  8793                           ;psect for function _Button_Deviation_Update
  8794  021B                     _Button_Deviation_Update:	
  8795                           
  8796                           ;mtouch_button.c: 428: int32_t deviation;;mtouch_button.c: 430: deviation = (int32_t)((i
      +                          nt32_t)(button->reading) - (int32_t)((button->baseline)>>((uint8_t)4)));
  8797                           
  8798                           ;incstack = 0
  8799                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  8800  021B  0020               	movlb	0	; select bank0
  8801  021C  0820               	movf	Button_Deviation_Update@button,w
  8802  021D  0086               	movwf	6
  8803  021E  0821               	movf	Button_Deviation_Update@button+1,w
  8804  021F  0087               	movwf	7
  8805  0220  3145               	addfsr 1,5
  8806  0221  3F40               	moviw [0]fsr1
  8807  0222  00A2               	movwf	??_Button_Deviation_Update
  8808  0223  3F41               	moviw [1]fsr1
  8809  0224  00A3               	movwf	??_Button_Deviation_Update+1
  8810  0225  3F42               	moviw [2]fsr1
  8811  0226  00A4               	movwf	??_Button_Deviation_Update+2
  8812  0227  3F43               	moviw [3]fsr1
  8813  0228  00A5               	movwf	??_Button_Deviation_Update+3
  8814  0229  3004               	movlw	4
  8815  022A                     u1355:	
  8816  022A  36A5               	lsrf	??_Button_Deviation_Update+3,f
  8817  022B  0CA4               	rrf	??_Button_Deviation_Update+2,f
  8818  022C  0CA3               	rrf	??_Button_Deviation_Update+1,f
  8819  022D  0CA2               	rrf	??_Button_Deviation_Update,f
  8820  022E  0B89               	decfsz	9,f
  8821  022F  2A2A               	goto	u1355
  8822  0230  0820               	movf	Button_Deviation_Update@button,w
  8823  0231  0086               	movwf	6
  8824  0232  0821               	movf	Button_Deviation_Update@button+1,w
  8825  0233  0087               	movwf	7
  8826  0234  3143               	addfsr 1,3
  8827  0235  3F40               	moviw [0]fsr1
  8828  0236  00A6               	movwf	??_Button_Deviation_Update+4
  8829  0237  3F41               	moviw [1]fsr1
  8830  0238  00A7               	movwf	??_Button_Deviation_Update+5
  8831  0239  0826               	movf	??_Button_Deviation_Update+4,w
  8832  023A  00A8               	movwf	??_Button_Deviation_Update+6
  8833  023B  0827               	movf	??_Button_Deviation_Update+5,w
  8834  023C  00A9               	movwf	??_Button_Deviation_Update+7
  8835  023D  01AA               	clrf	??_Button_Deviation_Update+8
  8836  023E  01AB               	clrf	??_Button_Deviation_Update+9
  8837  023F  0822               	movf	??_Button_Deviation_Update,w
  8838  0240  02A8               	subwf	??_Button_Deviation_Update+6,f
  8839  0241  0823               	movf	??_Button_Deviation_Update+1,w
  8840  0242  3BA9               	subwfb	??_Button_Deviation_Update+7,f
  8841  0243  0824               	movf	??_Button_Deviation_Update+2,w
  8842  0244  3BAA               	subwfb	??_Button_Deviation_Update+8,f
  8843  0245  0825               	movf	??_Button_Deviation_Update+3,w
  8844  0246  3BAB               	subwfb	??_Button_Deviation_Update+9,f
  8845  0247  082B               	movf	??_Button_Deviation_Update+9,w
  8846  0248  00AF               	movwf	Button_Deviation_Update@deviation+3
  8847  0249  082A               	movf	??_Button_Deviation_Update+8,w
  8848  024A  00AE               	movwf	Button_Deviation_Update@deviation+2
  8849  024B  0829               	movf	??_Button_Deviation_Update+7,w
  8850  024C  00AD               	movwf	Button_Deviation_Update@deviation+1
  8851  024D  0828               	movf	??_Button_Deviation_Update+6,w
  8852  024E  00AC               	movwf	Button_Deviation_Update@deviation
  8853                           
  8854                           ;mtouch_button.c: 433: deviation = deviation >> (button->scaling);
  8855  024F  082C               	movf	Button_Deviation_Update@deviation,w
  8856  0250  00A2               	movwf	??_Button_Deviation_Update
  8857  0251  082D               	movf	Button_Deviation_Update@deviation+1,w
  8858  0252  00A3               	movwf	??_Button_Deviation_Update+1
  8859  0253  082E               	movf	Button_Deviation_Update@deviation+2,w
  8860  0254  00A4               	movwf	??_Button_Deviation_Update+2
  8861  0255  082F               	movf	Button_Deviation_Update@deviation+3,w
  8862  0256  00A5               	movwf	??_Button_Deviation_Update+3
  8863  0257  0820               	movf	Button_Deviation_Update@button,w
  8864  0258  0086               	movwf	6
  8865  0259  0821               	movf	Button_Deviation_Update@button+1,w
  8866  025A  0087               	movwf	7
  8867  025B  314F               	addfsr 1,15
  8868  025C  0A01               	incf	1,w
  8869  025D  2A62               	goto	u1360
  8870  025E                     u1365:	
  8871  025E  37A5               	asrf	??_Button_Deviation_Update+3,f
  8872  025F  0CA4               	rrf	??_Button_Deviation_Update+2,f
  8873  0260  0CA3               	rrf	??_Button_Deviation_Update+1,f
  8874  0261  0CA2               	rrf	??_Button_Deviation_Update,f
  8875  0262                     u1360:	
  8876  0262  0B89               	decfsz	9,f
  8877  0263  2A5E               	goto	u1365
  8878  0264  0825               	movf	??_Button_Deviation_Update+3,w
  8879  0265  00AF               	movwf	Button_Deviation_Update@deviation+3
  8880  0266  0824               	movf	??_Button_Deviation_Update+2,w
  8881  0267  00AE               	movwf	Button_Deviation_Update@deviation+2
  8882  0268  0823               	movf	??_Button_Deviation_Update+1,w
  8883  0269  00AD               	movwf	Button_Deviation_Update@deviation+1
  8884  026A  0822               	movf	??_Button_Deviation_Update,w
  8885  026B  00AC               	movwf	Button_Deviation_Update@deviation
  8886                           
  8887                           ;mtouch_button.c: 436: if (deviation > ((127)))
  8888  026C  1BAF               	btfsc	Button_Deviation_Update@deviation+3,7
  8889  026D  2A83               	goto	l2766
  8890  026E  082F               	movf	Button_Deviation_Update@deviation+3,w
  8891  026F  1D03               	btfss	3,2
  8892  0270  2A7B               	goto	l2764
  8893  0271  082E               	movf	Button_Deviation_Update@deviation+2,w
  8894  0272  1D03               	btfss	3,2
  8895  0273  2A7B               	goto	l2764
  8896  0274  082D               	movf	Button_Deviation_Update@deviation+1,w
  8897  0275  1D03               	btfss	3,2
  8898  0276  2A7B               	goto	l2764
  8899  0277  3080               	movlw	128
  8900  0278  022C               	subwf	Button_Deviation_Update@deviation,w
  8901  0279  1C03               	btfss	3,0
  8902  027A  2A83               	goto	l2766
  8903  027B                     l2764:	
  8904                           
  8905                           ;mtouch_button.c: 437: {;mtouch_button.c: 438: deviation = ((127));
  8906  027B  3000               	movlw	0
  8907  027C  00AF               	movwf	Button_Deviation_Update@deviation+3
  8908  027D  3000               	movlw	0
  8909  027E  00AE               	movwf	Button_Deviation_Update@deviation+2
  8910  027F  3000               	movlw	0
  8911  0280  00AD               	movwf	Button_Deviation_Update@deviation+1
  8912  0281  307F               	movlw	127
  8913  0282  00AC               	movwf	Button_Deviation_Update@deviation
  8914  0283                     l2766:	
  8915                           
  8916                           ;mtouch_button.c: 439: };mtouch_button.c: 440: if (deviation < ((-128)))
  8917  0283  1FAF               	btfss	Button_Deviation_Update@deviation+3,7
  8918  0284  2A97               	goto	l2770
  8919  0285  3080               	movlw	128
  8920  0286  022C               	subwf	Button_Deviation_Update@deviation,w
  8921  0287  30FF               	movlw	255
  8922  0288  3B2D               	subwfb	Button_Deviation_Update@deviation+1,w
  8923  0289  30FF               	movlw	255
  8924  028A  3B2E               	subwfb	Button_Deviation_Update@deviation+2,w
  8925  028B  30FF               	movlw	255
  8926  028C  3B2F               	subwfb	Button_Deviation_Update@deviation+3,w
  8927  028D  1803               	btfsc	3,0
  8928  028E  2A97               	goto	l2770
  8929                           
  8930                           ;mtouch_button.c: 441: {;mtouch_button.c: 442: deviation = ((-128));
  8931  028F  30FF               	movlw	255
  8932  0290  00AF               	movwf	Button_Deviation_Update@deviation+3
  8933  0291  30FF               	movlw	255
  8934  0292  00AE               	movwf	Button_Deviation_Update@deviation+2
  8935  0293  30FF               	movlw	255
  8936  0294  00AD               	movwf	Button_Deviation_Update@deviation+1
  8937  0295  3080               	movlw	128
  8938  0296  00AC               	movwf	Button_Deviation_Update@deviation
  8939  0297                     l2770:	
  8940                           
  8941                           ;mtouch_button.c: 443: };mtouch_button.c: 445: button->deviation = (mtouch_button_deviat
      +                          ion_t)deviation;
  8942  0297  0820               	movf	Button_Deviation_Update@button,w
  8943  0298  3E09               	addlw	9
  8944  0299  00A2               	movwf	??_Button_Deviation_Update
  8945  029A  3000               	movlw	0
  8946  029B  3D21               	addwfc	Button_Deviation_Update@button+1,w
  8947  029C  00A3               	movwf	??_Button_Deviation_Update+1
  8948  029D  0822               	movf	??_Button_Deviation_Update,w
  8949  029E  0086               	movwf	6
  8950  029F  0823               	movf	??_Button_Deviation_Update+1,w
  8951  02A0  0087               	movwf	7
  8952  02A1  082C               	movf	Button_Deviation_Update@deviation,w
  8953  02A2  0081               	movwf	1
  8954  02A3  0008               	return
  8955  02A4                     __end_of_Button_Deviation_Update:	
  8956                           
  8957                           	psect	text58
  8958  0786                     __ptext58:	
  8959 ;; *************** function _MTOUCH_Button_isPressed *****************
  8960 ;; Defined at:
  8961 ;;		line 401 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  name            1    wreg     enum E4133
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;  name            1    4[BANK0 ] enum E4133
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      unsigned char 
  8968 ;; Registers used:
  8969 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;Total ram usage:        5 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    4
  8982 ;; This function calls:
  8983 ;;		Nothing
  8984 ;; This function is called by:
  8985 ;;		_main
  8986 ;;		_MTOUCH_Button_Buttonmask_Get
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           
  8991                           ;psect for function _MTOUCH_Button_isPressed
  8992  0786                     _MTOUCH_Button_isPressed:	
  8993                           
  8994                           ;incstack = 0
  8995                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
  8996                           ;MTOUCH_Button_isPressed@name stored from wreg
  8997  0786  0020               	movlb	0	; select bank0
  8998  0787  00A4               	movwf	MTOUCH_Button_isPressed@name
  8999                           
  9000                           ;mtouch_button.c: 403: if(name < 6)
  9001  0788  3006               	movlw	6
  9002  0789  0224               	subwf	MTOUCH_Button_isPressed@name,w
  9003  078A  1803               	skipnc
  9004  078B  2FAA               	goto	l3284
  9005                           
  9006                           ;mtouch_button.c: 404: return (bool)((mtouch_button[name].state == MTOUCH_BUTTON_STATE_p
      +                          ressed) ? 1 : 0);
  9007  078C  0824               	movf	MTOUCH_Button_isPressed@name,w
  9008  078D  00A0               	movwf	??_MTOUCH_Button_isPressed
  9009  078E  01A1               	clrf	??_MTOUCH_Button_isPressed+1
  9010  078F  0EA0               	swapf	??_MTOUCH_Button_isPressed,f
  9011  0790  0EA1               	swapf	??_MTOUCH_Button_isPressed+1,f
  9012  0791  30F0               	movlw	240
  9013  0792  05A1               	andwf	??_MTOUCH_Button_isPressed+1,f
  9014  0793  0820               	movf	??_MTOUCH_Button_isPressed,w
  9015  0794  390F               	andlw	15
  9016  0795  04A1               	iorwf	??_MTOUCH_Button_isPressed+1,f
  9017  0796  30F0               	movlw	240
  9018  0797  05A0               	andwf	??_MTOUCH_Button_isPressed,f
  9019  0798  3092               	movlw	146
  9020  0799  00A2               	movwf	??_MTOUCH_Button_isPressed+2
  9021  079A  3023               	movlw	35
  9022  079B  00A3               	movwf	??_MTOUCH_Button_isPressed+3
  9023  079C  0820               	movf	??_MTOUCH_Button_isPressed,w
  9024  079D  0722               	addwf	??_MTOUCH_Button_isPressed+2,w
  9025  079E  0086               	movwf	6
  9026  079F  0821               	movf	??_MTOUCH_Button_isPressed+1,w
  9027  07A0  3D23               	addwfc	??_MTOUCH_Button_isPressed+3,w
  9028  07A1  0087               	movwf	7
  9029  07A2  3002               	movlw	2
  9030  07A3  0601               	xorwf	1,w
  9031  07A4  1D03               	btfss	3,2
  9032  07A5  2FA8               	goto	u1780
  9033  07A6  3001               	movlw	1
  9034  07A7  0008               	return
  9035  07A8                     u1780:	
  9036  07A8  3000               	movlw	0
  9037  07A9  0008               	return
  9038  07AA                     l3284:	
  9039                           
  9040                           ;mtouch_button.c: 405: else;mtouch_button.c: 406: return 0;
  9041  07AA  3000               	movlw	0
  9042  07AB  0008               	return
  9043  07AC                     __end_of_MTOUCH_Button_isPressed:	
  9044                           
  9045                           	psect	text59
  9046  0C1C                     __ptext59:	
  9047 ;; *************** function _EUSART_Write *****************
  9048 ;; Defined at:
  9049 ;;		line 131 in file "mcc_generated_files/eusart.c"
  9050 ;; Parameters:    Size  Location     Type
  9051 ;;  txData          1    wreg     unsigned char 
  9052 ;; Auto vars:     Size  Location     Type
  9053 ;;  txData          1    0[BANK0 ] unsigned char 
  9054 ;; Return value:  Size  Location     Type
  9055 ;;                  1    wreg      void 
  9056 ;; Registers used:
  9057 ;;		wreg
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/0
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;Total ram usage:        1 bytes
  9068 ;; Hardware stack levels used:    1
  9069 ;; Hardware stack levels required when called:    4
  9070 ;; This function calls:
  9071 ;;		Nothing
  9072 ;; This function is called by:
  9073 ;;		_main
  9074 ;;		_putch
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           
  9079                           ;psect for function _EUSART_Write
  9080  0C1C                     _EUSART_Write:	
  9081                           
  9082                           ;incstack = 0
  9083                           ; Regs used in _EUSART_Write: [wreg]
  9084                           ;EUSART_Write@txData stored from wreg
  9085  0C1C  0020               	movlb	0	; select bank0
  9086  0C1D  00A0               	movwf	EUSART_Write@txData
  9087  0C1E                     l137:	
  9088                           ;eusart.c: 134: {
  9089                           
  9090  0C1E  1E11               	btfss	17,4	;volatile
  9091  0C1F  2C1E               	goto	l137
  9092                           
  9093                           ;eusart.c: 135: };eusart.c: 137: TX1REG = txData;
  9094  0C20  0820               	movf	EUSART_Write@txData,w
  9095  0C21  0023               	movlb	3	; select bank3
  9096  0C22  009A               	movwf	26	;volatile
  9097  0C23  0008               	return
  9098  0C24                     __end_of_EUSART_Write:	
  9099                           
  9100                           	psect	intentry
  9101  0004                     __pintentry:	
  9102 ;; *************** function _INTERRUPT_InterruptManager *****************
  9103 ;; Defined at:
  9104 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;		None
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;		None
  9109 ;; Return value:  Size  Location     Type
  9110 ;;                  1    wreg      void 
  9111 ;; Registers used:
  9112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;Total ram usage:        0 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    3
  9125 ;; This function calls:
  9126 ;;		_TMR2_ISR
  9127 ;; This function is called by:
  9128 ;;		Interrupt level 1
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132  0004                     _INTERRUPT_InterruptManager:	
  9133                           
  9134                           ;incstack = 0
  9135  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9136                           
  9137                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9138  0005  3180               	pagesel	$
  9139                           
  9140                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  9141  0006  1F0B               	btfss	11,6	;volatile
  9142  0007  2810               	goto	i1l227
  9143                           
  9144                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: if(PIE1bits.TMR2IE == 1 && PIR1bits
      +                          .TMR2IF == 1)
  9145  0008  0021               	movlb	1	; select bank1
  9146  0009  1C91               	btfss	17,1	;volatile
  9147  000A  2810               	goto	i1l227
  9148  000B  0020               	movlb	0	; select bank0
  9149  000C  1C91               	btfss	17,1	;volatile
  9150  000D  2810               	goto	i1l227
  9151                           
  9152                           ;interrupt_manager.c: 58: {;interrupt_manager.c: 59: TMR2_ISR();
  9153  000E  318C  2451         	fcall	_TMR2_ISR
  9154  0010                     i1l227:	
  9155                           ;interrupt_manager.c: 60: }
  9156                           
  9157  0010  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9158  0011  0009               	retfie
  9159  0012                     __end_of_INTERRUPT_InterruptManager:	
  9160                           
  9161                           	psect	text61
  9162  0C51                     __ptext61:	
  9163 ;; *************** function _TMR2_ISR *****************
  9164 ;; Defined at:
  9165 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;		None
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;		None
  9170 ;; Return value:  Size  Location     Type
  9171 ;;                  1    wreg      void 
  9172 ;; Registers used:
  9173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9174 ;; Tracked objects:
  9175 ;;		On entry : 0/0
  9176 ;;		On exit  : 0/0
  9177 ;;		Unchanged: 0/0
  9178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;Total ram usage:        0 bytes
  9184 ;; Hardware stack levels used:    1
  9185 ;; Hardware stack levels required when called:    2
  9186 ;; This function calls:
  9187 ;;		Absolute function
  9188 ;;		_Sensor_Acq_ExecuteScan
  9189 ;;		_TMR2_DefaultInterruptHandler
  9190 ;; This function is called by:
  9191 ;;		_INTERRUPT_InterruptManager
  9192 ;; This function uses a non-reentrant model
  9193 ;;
  9194                           
  9195                           
  9196                           ;psect for function _TMR2_ISR
  9197  0C51                     _TMR2_ISR:	
  9198                           
  9199                           ;tmr2.c: 123: PIR1bits.TMR2IF = 0;
  9200                           
  9201                           ;incstack = 0
  9202                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9203  0C51  0020               	movlb	0	; select bank0
  9204  0C52  1091               	bcf	17,1	;volatile
  9205                           
  9206                           ;tmr2.c: 125: if(TMR2_InterruptHandler)
  9207  0C53  0878               	movf	_TMR2_InterruptHandler,w
  9208  0C54  0479               	iorwf	_TMR2_InterruptHandler+1,w
  9209  0C55  1903               	btfsc	3,2
  9210  0C56  0008               	return
  9211                           
  9212                           ;tmr2.c: 126: {;tmr2.c: 127: TMR2_InterruptHandler();
  9213  0C57  0879               	movf	_TMR2_InterruptHandler+1,w
  9214  0C58  008A               	movwf	10
  9215  0C59  0878               	movf	_TMR2_InterruptHandler,w
  9216  0C5A  000A               	callw
  9217  0C5B  318C               	pagesel	$
  9218  0C5C  0008               	return
  9219  0C5D                     __end_of_TMR2_ISR:	
  9220                           
  9221                           	psect	text62
  9222  02A4                     __ptext62:	
  9223 ;; *************** function _Sensor_Acq_ExecuteScan *****************
  9224 ;; Defined at:
  9225 ;;		line 362 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;		None
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;  result          2    6[COMMON] unsigned int 
  9230 ;; Return value:  Size  Location     Type
  9231 ;;                  1    wreg      void 
  9232 ;; Registers used:
  9233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;Total ram usage:        4 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    1
  9246 ;; This function calls:
  9247 ;;		_MTOUCH_CVD_ScanA_0
  9248 ;;		_MTOUCH_CVD_ScanA_1
  9249 ;;		_MTOUCH_CVD_ScanA_2
  9250 ;;		_MTOUCH_CVD_ScanA_3
  9251 ;;		_MTOUCH_CVD_ScanA_4
  9252 ;;		_MTOUCH_CVD_ScanA_5
  9253 ;;		_MTOUCH_CVD_ScanA_6
  9254 ;;		_MTOUCH_CVD_ScanB_0
  9255 ;;		_MTOUCH_CVD_ScanB_1
  9256 ;;		_MTOUCH_CVD_ScanB_2
  9257 ;;		_MTOUCH_CVD_ScanB_3
  9258 ;;		_MTOUCH_CVD_ScanB_4
  9259 ;;		_MTOUCH_CVD_ScanB_5
  9260 ;;		_MTOUCH_CVD_ScanB_6
  9261 ;;		i1___bmul
  9262 ;;		i1_abs
  9263 ;; This function is called by:
  9264 ;;		_Sensor_Acq_ExecutePacket
  9265 ;;		_TMR2_ISR
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           
  9270                           ;psect for function _Sensor_Acq_ExecuteScan
  9271  02A4                     _Sensor_Acq_ExecuteScan:	
  9272  02A4                     i1l543:	
  9273                           ;mtouch_sensor.c: 364: while(ADCON0bits.GO_nDONE);
  9274                           
  9275                           ;incstack = 0
  9276                           ; Regs used in _Sensor_Acq_ExecuteScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9277                           
  9278  02A4  0021               	movlb	1	; select bank1
  9279  02A5  189D               	btfsc	29,1	;volatile
  9280  02A6  2AA4               	goto	i1l543
  9281                           
  9282                           ;mtouch_sensor.c: 366: mtouch_sensor_adcsample_t result = ADRES;
  9283  02A7  081C               	movf	28,w	;volatile
  9284  02A8  00F7               	movwf	Sensor_Acq_ExecuteScan@result+1
  9285  02A9  081B               	movf	27,w	;volatile
  9286  02AA  00F6               	movwf	Sensor_Acq_ExecuteScan@result
  9287                           
  9288                           ;mtouch_sensor.c: 367: static mtouch_sensor_adcsample_t last_a,last_b;;mtouch_sensor.c: 
      +                          369: if(sensor_globalFlags.packet_done)
  9289  02AB  0020               	movlb	0	; select bank0
  9290  02AC  1857               	btfsc	_sensor_globalFlags,0	;volatile
  9291  02AD  0008               	return
  9292                           
  9293                           ;mtouch_sensor.c: 372: if (packet_counter != (uint8_t)0)
  9294  02AE  087C               	movf	_packet_counter,w
  9295  02AF  1D03               	btfss	3,2
  9296  02B0  2ABE               	goto	i1l3200
  9297  02B1  2B18               	goto	i1l3220
  9298  02B2                     i1l3194:	
  9299  02B2  0867               	movf	_Sensor_scanA+1,w
  9300  02B3  008A               	movwf	10
  9301  02B4  0866               	movf	_Sensor_scanA,w
  9302  02B5  000A               	callw
  9303  02B6  3182               	pagesel	$
  9304  02B7  2ACF               	goto	i1l3202
  9305  02B8                     i1l3196:	
  9306  02B8  0865               	movf	_Sensor_scanB+1,w
  9307  02B9  008A               	movwf	10
  9308  02BA  0864               	movf	_Sensor_scanB,w
  9309  02BB  000A               	callw
  9310  02BC  3182               	pagesel	$
  9311  02BD  2ACF               	goto	i1l3202
  9312  02BE                     i1l3200:	
  9313  02BE  087C               	movf	_packet_counter,w
  9314  02BF  3901               	andlw	1
  9315  02C0  00F4               	movwf	??_Sensor_Acq_ExecuteScan
  9316  02C1  01F5               	clrf	??_Sensor_Acq_ExecuteScan+1
  9317                           
  9318                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9319                           ; Switch size 1, requested type "simple"
  9320                           ; Number of cases is 1, Range of values is 0 to 0
  9321                           ; switch strategies available:
  9322                           ; Name         Instructions Cycles
  9323                           ; simple_byte            4     3 (average)
  9324                           ; direct_byte            8     6 (fixed)
  9325                           ; jumptable            260     6 (fixed)
  9326                           ;	Chosen strategy is simple_byte
  9327  02C2  0875               	movf	??_Sensor_Acq_ExecuteScan+1,w
  9328  02C3  3A00               	xorlw	0	; case 0
  9329  02C4  1903               	skipnz
  9330  02C5  2AC7               	goto	i1l3452
  9331  02C6  2ACF               	goto	i1l3202
  9332  02C7                     i1l3452:	
  9333                           
  9334                           ; Switch size 1, requested type "simple"
  9335                           ; Number of cases is 2, Range of values is 0 to 1
  9336                           ; switch strategies available:
  9337                           ; Name         Instructions Cycles
  9338                           ; simple_byte            7     4 (average)
  9339                           ; direct_byte           10     6 (fixed)
  9340                           ; jumptable            260     6 (fixed)
  9341                           ;	Chosen strategy is simple_byte
  9342  02C7  0874               	movf	??_Sensor_Acq_ExecuteScan,w
  9343  02C8  3A00               	xorlw	0	; case 0
  9344  02C9  1903               	skipnz
  9345  02CA  2AB2               	goto	i1l3194
  9346  02CB  3A01               	xorlw	1	; case 1
  9347  02CC  1903               	skipnz
  9348  02CD  2AB8               	goto	i1l3196
  9349  02CE  2ACF               	goto	i1l3202
  9350  02CF                     i1l3202:	
  9351                           
  9352                           ;mtouch_sensor.c: 382: if(packet_counter!=mtouch_sensor[currentScannSensor].oversampling
      +                          )
  9353  02CF  3009               	movlw	9
  9354  02D0  00F4               	movwf	??_Sensor_Acq_ExecuteScan
  9355  02D1  0874               	movf	??_Sensor_Acq_ExecuteScan,w
  9356  02D2  00F0               	movwf	i1___bmul@multiplicand
  9357  02D3  087D               	movf	_currentScannSensor,w
  9358  02D4  318C  24CD  3182   	fcall	i1___bmul
  9359  02D7  3E25               	addlw	(low ((_mtouch_sensor| (0+256)+5)))& (0+255)
  9360  02D8  0086               	movwf	6
  9361  02D9  3001               	movlw	1	; select bank2/3
  9362  02DA  0087               	movwf	7
  9363  02DB  0801               	movf	1,w
  9364  02DC  067C               	xorwf	_packet_counter,w
  9365  02DD  1903               	skipnz
  9366  02DE  2B15               	goto	i1l3218
  9367                           
  9368                           ;mtouch_sensor.c: 383: {;mtouch_sensor.c: 384: if(packet_counter & 0x01)
  9369  02DF  1C7C               	btfss	_packet_counter,0
  9370  02E0  2AFF               	goto	i1l3212
  9371                           
  9372                           ;mtouch_sensor.c: 385: {;mtouch_sensor.c: 386: result = ((mtouch_sensor_adcsample_t)1024
      +                          ) - result;
  9373  02E1  3000               	movlw	0
  9374  02E2  00F4               	movwf	??_Sensor_Acq_ExecuteScan
  9375  02E3  3004               	movlw	4
  9376  02E4  00F5               	movwf	??_Sensor_Acq_ExecuteScan+1
  9377  02E5  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  9378  02E6  0274               	subwf	??_Sensor_Acq_ExecuteScan,w
  9379  02E7  00F6               	movwf	Sensor_Acq_ExecuteScan@result
  9380  02E8  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  9381  02E9  3B75               	subwfb	??_Sensor_Acq_ExecuteScan+1,w
  9382  02EA  00F7               	movwf	Sensor_Acq_ExecuteScan@result+1
  9383                           
  9384                           ;mtouch_sensor.c: 387: packet_noise += (mtouch_sensor_packetsample_t)abs(last_a-result);
  9385  02EB  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  9386  02EC  0020               	movlb	0	; select bank0
  9387  02ED  024B               	subwf	Sensor_Acq_ExecuteScan@last_a,w
  9388  02EE  00F0               	movwf	i1abs@a
  9389  02EF  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  9390  02F0  3B4C               	subwfb	Sensor_Acq_ExecuteScan@last_a+1,w
  9391  02F1  00F1               	movwf	i1abs@a+1
  9392  02F2  318C  2481  3182   	fcall	i1_abs
  9393  02F5  0870               	movf	?i1_abs,w
  9394  02F6  0020               	movlb	0	; select bank0
  9395  02F7  07CD               	addwf	_packet_noise,f
  9396  02F8  0871               	movf	?i1_abs+1,w
  9397  02F9  3DCE               	addwfc	_packet_noise+1,f
  9398                           
  9399                           ;mtouch_sensor.c: 388: last_a = result;
  9400  02FA  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  9401  02FB  00CC               	movwf	Sensor_Acq_ExecuteScan@last_a+1
  9402  02FC  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  9403  02FD  00CB               	movwf	Sensor_Acq_ExecuteScan@last_a
  9404                           
  9405                           ;mtouch_sensor.c: 389: }
  9406  02FE  2B11               	goto	i1l3216
  9407  02FF                     i1l3212:	
  9408                           
  9409                           ;mtouch_sensor.c: 390: else;mtouch_sensor.c: 391: {;mtouch_sensor.c: 392: packet_noise +
      +                          = (mtouch_sensor_packetsample_t)abs(last_b-result);
  9410  02FF  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  9411  0300  0020               	movlb	0	; select bank0
  9412  0301  0249               	subwf	Sensor_Acq_ExecuteScan@last_b,w
  9413  0302  00F0               	movwf	i1abs@a
  9414  0303  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  9415  0304  3B4A               	subwfb	Sensor_Acq_ExecuteScan@last_b+1,w
  9416  0305  00F1               	movwf	i1abs@a+1
  9417  0306  318C  2481         	fcall	i1_abs
  9418  0308  0870               	movf	?i1_abs,w
  9419  0309  0020               	movlb	0	; select bank0
  9420  030A  07CD               	addwf	_packet_noise,f
  9421  030B  0871               	movf	?i1_abs+1,w
  9422  030C  3DCE               	addwfc	_packet_noise+1,f
  9423                           
  9424                           ;mtouch_sensor.c: 393: last_b = result;
  9425  030D  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  9426  030E  00CA               	movwf	Sensor_Acq_ExecuteScan@last_b+1
  9427  030F  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  9428  0310  00C9               	movwf	Sensor_Acq_ExecuteScan@last_b
  9429  0311                     i1l3216:	
  9430                           
  9431                           ;mtouch_sensor.c: 394: };mtouch_sensor.c: 395: packet_sample += result;
  9432  0311  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  9433  0312  07CF               	addwf	_packet_sample,f
  9434  0313  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  9435  0314  3DD0               	addwfc	_packet_sample+1,f
  9436  0315                     i1l3218:	
  9437                           
  9438                           ;mtouch_sensor.c: 396: };mtouch_sensor.c: 397: packet_counter--;
  9439  0315  3001               	movlw	1
  9440  0316  02FC               	subwf	_packet_counter,f
  9441                           
  9442                           ;mtouch_sensor.c: 398: }
  9443  0317  0008               	return
  9444  0318                     i1l3220:	
  9445                           
  9446                           ;mtouch_sensor.c: 399: else;mtouch_sensor.c: 400: {;mtouch_sensor.c: 401: packet_sample 
      +                          += result;
  9447  0318  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  9448  0319  07CF               	addwf	_packet_sample,f
  9449  031A  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  9450  031B  3DD0               	addwfc	_packet_sample+1,f
  9451                           
  9452                           ;mtouch_sensor.c: 402: packet_noise += (mtouch_sensor_packetsample_t)abs(last_b-result);
  9453  031C  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  9454  031D  0249               	subwf	Sensor_Acq_ExecuteScan@last_b,w
  9455  031E  00F0               	movwf	i1abs@a
  9456  031F  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  9457  0320  3B4A               	subwfb	Sensor_Acq_ExecuteScan@last_b+1,w
  9458  0321  00F1               	movwf	i1abs@a+1
  9459  0322  318C  2481         	fcall	i1_abs
  9460  0324  0870               	movf	?i1_abs,w
  9461  0325  0020               	movlb	0	; select bank0
  9462  0326  07CD               	addwf	_packet_noise,f
  9463  0327  0871               	movf	?i1_abs+1,w
  9464  0328  3DCE               	addwfc	_packet_noise+1,f
  9465                           
  9466                           ;mtouch_sensor.c: 403: sensor_globalFlags.packet_done = (uint8_t)1;
  9467  0329  1457               	bsf	_sensor_globalFlags,0	;volatile
  9468  032A  0008               	return
  9469  032B                     __end_of_Sensor_Acq_ExecuteScan:	
  9470                           
  9471                           	psect	text63
  9472  0BEC                     __ptext63:	
  9473 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  9474 ;; Defined at:
  9475 ;;		line 136 in file "mcc_generated_files/tmr2.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;		None
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;		None
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      void 
  9482 ;; Registers used:
  9483 ;;		None
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;Total ram usage:        0 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; This function calls:
  9496 ;;		Nothing
  9497 ;; This function is called by:
  9498 ;;		_TMR2_Initialize
  9499 ;;		_TMR2_ISR
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _TMR2_DefaultInterruptHandler
  9505  0BEC                     _TMR2_DefaultInterruptHandler:	
  9506                           
  9507                           ;incstack = 0
  9508                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  9509  0BEC  0008               	return
  9510  0BED                     __end_of_TMR2_DefaultInterruptHandler:	
  9511                           
  9512                           	psect	text64
  9513  0C81                     __ptext64:	
  9514 ;; *************** function i1_abs *****************
  9515 ;; Defined at:
  9516 ;;		line 4 in file "/Applications/microchip/xc8/v2.05/pic/sources/c90/common/abs.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;  a               2    0[COMMON] int 
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;		None
  9521 ;; Return value:  Size  Location     Type
  9522 ;;                  2    0[COMMON] int 
  9523 ;; Registers used:
  9524 ;;		wreg, status,2, status,0
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9530 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;Total ram usage:        4 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_Sensor_Acq_ExecuteScan
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function i1_abs
  9545  0C81                     i1_abs:	
  9546                           
  9547                           ;incstack = 0
  9548                           ; Regs used in i1_abs: [wreg+status,2+status,0]
  9549  0C81  1FF1               	btfss	i1abs@a+1,7
  9550  0C82  0008               	return
  9551  0C83  0970               	comf	i1abs@a,w
  9552  0C84  00F2               	movwf	??i1_abs
  9553  0C85  0971               	comf	i1abs@a+1,w
  9554  0C86  00F3               	movwf	??i1_abs+1
  9555  0C87  0AF2               	incf	??i1_abs,f
  9556  0C88  1903               	skipnz
  9557  0C89  0AF3               	incf	??i1_abs+1,f
  9558  0C8A  0872               	movf	??i1_abs,w
  9559  0C8B  00F0               	movwf	?i1_abs
  9560  0C8C  0873               	movf	??i1_abs+1,w
  9561  0C8D  00F1               	movwf	?i1_abs+1
  9562  0C8E  0008               	return
  9563  0C8F                     __end_ofi1_abs:	
  9564                           
  9565                           	psect	text65
  9566  0CCD                     __ptext65:	
  9567 ;; *************** function i1___bmul *****************
  9568 ;; Defined at:
  9569 ;;		line 4 in file "/Applications/microchip/xc8/v2.05/pic/sources/c90/common/Umul8.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;  multiplier      1    wreg     unsigned char 
  9572 ;;  multiplicand    1    0[COMMON] unsigned char 
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;  multiplier      1    2[COMMON] unsigned char 
  9575 ;;  __bmul          1    3[COMMON] unsigned char 
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  1    wreg      unsigned char 
  9578 ;; Registers used:
  9579 ;;		wreg, status,2, status,0
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9585 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;Total ram usage:        4 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; This function calls:
  9592 ;;		Nothing
  9593 ;; This function is called by:
  9594 ;;		_Sensor_Acq_ExecuteScan
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           
  9599                           ;psect for function i1___bmul
  9600  0CCD                     i1___bmul:	
  9601                           
  9602                           ;incstack = 0
  9603                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  9604                           ;i1___bmul@multiplier stored from wreg
  9605  0CCD  00F2               	movwf	i1___bmul@multiplier
  9606  0CCE  01F3               	clrf	i1___bmul@product
  9607  0CCF                     i1l3068:	
  9608  0CCF  1C72               	btfss	i1___bmul@multiplier,0
  9609  0CD0  2CD5               	goto	i1l3072
  9610  0CD1  0870               	movf	i1___bmul@multiplicand,w
  9611  0CD2  00F1               	movwf	??i1___bmul
  9612  0CD3  0871               	movf	??i1___bmul,w
  9613  0CD4  07F3               	addwf	i1___bmul@product,f
  9614  0CD5                     i1l3072:	
  9615  0CD5  1003               	clrc
  9616  0CD6  0DF0               	rlf	i1___bmul@multiplicand,f
  9617  0CD7  1003               	clrc
  9618  0CD8  0CF2               	rrf	i1___bmul@multiplier,f
  9619  0CD9  0872               	movf	i1___bmul@multiplier,w
  9620  0CDA  1D03               	btfss	3,2
  9621  0CDB  2CCF               	goto	i1l3068
  9622  0CDC  0873               	movf	i1___bmul@product,w
  9623  0CDD  0008               	return
  9624  0CDE                     __end_ofi1___bmul:	
  9625                           
  9626                           	psect	text66
  9627  0FBE                     __ptext66:	
  9628 ;; *************** function _MTOUCH_CVD_ScanB_5 *****************
  9629 ;; Defined at:
  9630 ;;		line 832 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;		None
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;		None
  9635 ;; Return value:  Size  Location     Type
  9636 ;;                  1    wreg      void 
  9637 ;; Registers used:
  9638 ;;		wreg
  9639 ;; Tracked objects:
  9640 ;;		On entry : 0/0
  9641 ;;		On exit  : 0/0
  9642 ;;		Unchanged: 0/0
  9643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;Total ram usage:        0 bytes
  9649 ;; Hardware stack levels used:    1
  9650 ;; This function calls:
  9651 ;;		Nothing
  9652 ;; This function is called by:
  9653 ;;		_Sensor_Acq_ExecuteScan
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           
  9658                           ;psect for function _MTOUCH_CVD_ScanB_5
  9659  0FBE                     _MTOUCH_CVD_ScanB_5:	
  9660                           
  9661                           ;incstack = 0
  9662                           ; Regs used in _MTOUCH_CVD_ScanB_5: [wreg]
  9663  0FBE  0022               	banksel	270	;# 
  9664  0FBF  118E               	bcf	14,3	;# 
  9665  0FC0  0021               	banksel	157	;# 
  9666  0FC1  301D               	movlw	29	;# 
  9667  0FC2  009D               	movwf	29	;# 
  9668                           
  9669                           ;mtouch_sensor_scan.c: 844: _delay(10);
  9670  0FC3  3003               	movlw	3
  9671  0FC4                     u203_27:	
  9672  0FC4  0B89               	decfsz	9,f
  9673  0FC5  2FC4               	goto	u203_27
  9674  0FC6  0000               	nop
  9675  0FC7  308C               	movlw	140	;# 
  9676  0FC8  0084               	movwf	4	;# 
  9677  0FC9  3000               	movlw	0	;# 
  9678  0FCA  0085               	movwf	5	;# 
  9679  0FCB  300C               	movlw	12	;# 
  9680  0FCC  0086               	movwf	6	;# 
  9681  0FCD  3001               	movlw	1	;# 
  9682  0FCE  0087               	movwf	7	;# 
  9683  0FCF  3005               	movlw	5	;# 
  9684  0FD0  1480               	bsf	0,1	;# 
  9685                           
  9686                           ;mtouch_sensor_scan.c: 862: _delay(0);
  9687  0FD1  009D               	movwf	29	;# 
  9688  0FD2  1101               	bcf	1,2	;# 
  9689                           
  9690                           ;mtouch_sensor_scan.c: 869: _delay(5);
  9691  0FD3  3200               	nop2	;2 cycle nop
  9692  0FD4  3200               	nop2	;2 cycle nop
  9693  0FD5  0000               	nop
  9694  0FD6  0021               	banksel	157	;# 
  9695  0FD7  149D               	bsf	29,1	;# 
  9696                           
  9697                           ;mtouch_sensor_scan.c: 876: _delay(3);
  9698  0FD8  3200               	nop2	;2 cycle nop
  9699  0FD9  0000               	nop
  9700  0FDA  0022               	banksel	268	;# 
  9701  0FDB  108C               	bcf	12,1	;# 
  9702  0FDC  1080               	bcf	0,1	;# 
  9703  0FDD  0008               	return
  9704  0FDE                     __end_of_MTOUCH_CVD_ScanB_5:	
  9705                           
  9706                           	psect	text67
  9707  0F9E                     __ptext67:	
  9708 ;; *************** function _MTOUCH_CVD_ScanB_4 *****************
  9709 ;; Defined at:
  9710 ;;		line 705 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;		None
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;		None
  9715 ;; Return value:  Size  Location     Type
  9716 ;;                  1    wreg      void 
  9717 ;; Registers used:
  9718 ;;		wreg
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;Total ram usage:        0 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;;		_Sensor_Acq_ExecuteScan
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           
  9738                           ;psect for function _MTOUCH_CVD_ScanB_4
  9739  0F9E                     _MTOUCH_CVD_ScanB_4:	
  9740                           
  9741                           ;incstack = 0
  9742                           ; Regs used in _MTOUCH_CVD_ScanB_4: [wreg]
  9743  0F9E  0022               	banksel	270	;# 
  9744  0F9F  110E               	bcf	14,2	;# 
  9745  0FA0  0021               	banksel	157	;# 
  9746  0FA1  3019               	movlw	25	;# 
  9747  0FA2  009D               	movwf	29	;# 
  9748                           
  9749                           ;mtouch_sensor_scan.c: 717: _delay(10);
  9750  0FA3  3003               	movlw	3
  9751  0FA4                     u204_27:	
  9752  0FA4  0B89               	decfsz	9,f
  9753  0FA5  2FA4               	goto	u204_27
  9754  0FA6  0000               	nop
  9755  0FA7  308E               	movlw	142	;# 
  9756  0FA8  0084               	movwf	4	;# 
  9757  0FA9  3000               	movlw	0	;# 
  9758  0FAA  0085               	movwf	5	;# 
  9759  0FAB  300C               	movlw	12	;# 
  9760  0FAC  0086               	movwf	6	;# 
  9761  0FAD  3001               	movlw	1	;# 
  9762  0FAE  0087               	movwf	7	;# 
  9763  0FAF  301D               	movlw	29	;# 
  9764  0FB0  1580               	bsf	0,3	;# 
  9765                           
  9766                           ;mtouch_sensor_scan.c: 735: _delay(0);
  9767  0FB1  009D               	movwf	29	;# 
  9768  0FB2  1101               	bcf	1,2	;# 
  9769                           
  9770                           ;mtouch_sensor_scan.c: 742: _delay(5);
  9771  0FB3  3200               	nop2	;2 cycle nop
  9772  0FB4  3200               	nop2	;2 cycle nop
  9773  0FB5  0000               	nop
  9774  0FB6  0021               	banksel	157	;# 
  9775  0FB7  149D               	bsf	29,1	;# 
  9776                           
  9777                           ;mtouch_sensor_scan.c: 749: _delay(3);
  9778  0FB8  3200               	nop2	;2 cycle nop
  9779  0FB9  0000               	nop
  9780  0FBA  0022               	banksel	270	;# 
  9781  0FBB  118E               	bcf	14,3	;# 
  9782  0FBC  1180               	bcf	0,3	;# 
  9783  0FBD  0008               	return
  9784  0FBE                     __end_of_MTOUCH_CVD_ScanB_4:	
  9785                           
  9786                           	psect	text68
  9787  0F7E                     __ptext68:	
  9788 ;; *************** function _MTOUCH_CVD_ScanB_3 *****************
  9789 ;; Defined at:
  9790 ;;		line 578 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;		None
  9793 ;; Auto vars:     Size  Location     Type
  9794 ;;		None
  9795 ;; Return value:  Size  Location     Type
  9796 ;;                  1    wreg      void 
  9797 ;; Registers used:
  9798 ;;		wreg
  9799 ;; Tracked objects:
  9800 ;;		On entry : 0/0
  9801 ;;		On exit  : 0/0
  9802 ;;		Unchanged: 0/0
  9803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;Total ram usage:        0 bytes
  9809 ;; Hardware stack levels used:    1
  9810 ;; This function calls:
  9811 ;;		Nothing
  9812 ;; This function is called by:
  9813 ;;		_Sensor_Acq_ExecuteScan
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           
  9818                           ;psect for function _MTOUCH_CVD_ScanB_3
  9819  0F7E                     _MTOUCH_CVD_ScanB_3:	
  9820                           
  9821                           ;incstack = 0
  9822                           ; Regs used in _MTOUCH_CVD_ScanB_3: [wreg]
  9823  0F7E  0022               	banksel	270	;# 
  9824  0F7F  108E               	bcf	14,1	;# 
  9825  0F80  0021               	banksel	157	;# 
  9826  0F81  3015               	movlw	21	;# 
  9827  0F82  009D               	movwf	29	;# 
  9828                           
  9829                           ;mtouch_sensor_scan.c: 590: _delay(10);
  9830  0F83  3003               	movlw	3
  9831  0F84                     u205_27:	
  9832  0F84  0B89               	decfsz	9,f
  9833  0F85  2F84               	goto	u205_27
  9834  0F86  0000               	nop
  9835  0F87  308E               	movlw	142	;# 
  9836  0F88  0084               	movwf	4	;# 
  9837  0F89  3000               	movlw	0	;# 
  9838  0F8A  0085               	movwf	5	;# 
  9839  0F8B  300C               	movlw	12	;# 
  9840  0F8C  0086               	movwf	6	;# 
  9841  0F8D  3001               	movlw	1	;# 
  9842  0F8E  0087               	movwf	7	;# 
  9843  0F8F  3019               	movlw	25	;# 
  9844  0F90  1500               	bsf	0,2	;# 
  9845                           
  9846                           ;mtouch_sensor_scan.c: 608: _delay(0);
  9847  0F91  009D               	movwf	29	;# 
  9848  0F92  1101               	bcf	1,2	;# 
  9849                           
  9850                           ;mtouch_sensor_scan.c: 615: _delay(5);
  9851  0F93  3200               	nop2	;2 cycle nop
  9852  0F94  3200               	nop2	;2 cycle nop
  9853  0F95  0000               	nop
  9854  0F96  0021               	banksel	157	;# 
  9855  0F97  149D               	bsf	29,1	;# 
  9856                           
  9857                           ;mtouch_sensor_scan.c: 622: _delay(3);
  9858  0F98  3200               	nop2	;2 cycle nop
  9859  0F99  0000               	nop
  9860  0F9A  0022               	banksel	270	;# 
  9861  0F9B  110E               	bcf	14,2	;# 
  9862  0F9C  1100               	bcf	0,2	;# 
  9863  0F9D  0008               	return
  9864  0F9E                     __end_of_MTOUCH_CVD_ScanB_3:	
  9865                           
  9866                           	psect	text69
  9867  0F5E                     __ptext69:	
  9868 ;; *************** function _MTOUCH_CVD_ScanB_2 *****************
  9869 ;; Defined at:
  9870 ;;		line 451 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      void 
  9877 ;; Registers used:
  9878 ;;		wreg
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;Total ram usage:        0 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; This function calls:
  9891 ;;		Nothing
  9892 ;; This function is called by:
  9893 ;;		_Sensor_Acq_ExecuteScan
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           
  9898                           ;psect for function _MTOUCH_CVD_ScanB_2
  9899  0F5E                     _MTOUCH_CVD_ScanB_2:	
  9900                           
  9901                           ;incstack = 0
  9902                           ; Regs used in _MTOUCH_CVD_ScanB_2: [wreg]
  9903  0F5E  0022               	banksel	270	;# 
  9904  0F5F  100E               	bcf	14,0	;# 
  9905  0F60  0021               	banksel	157	;# 
  9906  0F61  3011               	movlw	17	;# 
  9907  0F62  009D               	movwf	29	;# 
  9908                           
  9909                           ;mtouch_sensor_scan.c: 463: _delay(10);
  9910  0F63  3003               	movlw	3
  9911  0F64                     u206_27:	
  9912  0F64  0B89               	decfsz	9,f
  9913  0F65  2F64               	goto	u206_27
  9914  0F66  0000               	nop
  9915  0F67  308E               	movlw	142	;# 
  9916  0F68  0084               	movwf	4	;# 
  9917  0F69  3000               	movlw	0	;# 
  9918  0F6A  0085               	movwf	5	;# 
  9919  0F6B  300C               	movlw	12	;# 
  9920  0F6C  0086               	movwf	6	;# 
  9921  0F6D  3001               	movlw	1	;# 
  9922  0F6E  0087               	movwf	7	;# 
  9923  0F6F  3015               	movlw	21	;# 
  9924  0F70  1480               	bsf	0,1	;# 
  9925                           
  9926                           ;mtouch_sensor_scan.c: 481: _delay(0);
  9927  0F71  009D               	movwf	29	;# 
  9928  0F72  1101               	bcf	1,2	;# 
  9929                           
  9930                           ;mtouch_sensor_scan.c: 488: _delay(5);
  9931  0F73  3200               	nop2	;2 cycle nop
  9932  0F74  3200               	nop2	;2 cycle nop
  9933  0F75  0000               	nop
  9934  0F76  0021               	banksel	157	;# 
  9935  0F77  149D               	bsf	29,1	;# 
  9936                           
  9937                           ;mtouch_sensor_scan.c: 495: _delay(3);
  9938  0F78  3200               	nop2	;2 cycle nop
  9939  0F79  0000               	nop
  9940  0F7A  0022               	banksel	270	;# 
  9941  0F7B  108E               	bcf	14,1	;# 
  9942  0F7C  1080               	bcf	0,1	;# 
  9943  0F7D  0008               	return
  9944  0F7E                     __end_of_MTOUCH_CVD_ScanB_2:	
  9945                           
  9946                           	psect	text70
  9947  0F3E                     __ptext70:	
  9948 ;; *************** function _MTOUCH_CVD_ScanB_1 *****************
  9949 ;; Defined at:
  9950 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;		None
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;		None
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;Total ram usage:        0 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; This function calls:
  9971 ;;		Nothing
  9972 ;; This function is called by:
  9973 ;;		_Sensor_Acq_ExecuteScan
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function _MTOUCH_CVD_ScanB_1
  9979  0F3E                     _MTOUCH_CVD_ScanB_1:	
  9980                           
  9981                           ;incstack = 0
  9982                           ; Regs used in _MTOUCH_CVD_ScanB_1: [wreg]
  9983  0F3E  0022               	banksel	268	;# 
  9984  0F3F  120C               	bcf	12,4	;# 
  9985  0F40  0021               	banksel	157	;# 
  9986  0F41  300D               	movlw	13	;# 
  9987  0F42  009D               	movwf	29	;# 
  9988                           
  9989                           ;mtouch_sensor_scan.c: 336: _delay(10);
  9990  0F43  3003               	movlw	3
  9991  0F44                     u207_27:	
  9992  0F44  0B89               	decfsz	9,f
  9993  0F45  2F44               	goto	u207_27
  9994  0F46  0000               	nop
  9995  0F47  308E               	movlw	142	;# 
  9996  0F48  0084               	movwf	4	;# 
  9997  0F49  3000               	movlw	0	;# 
  9998  0F4A  0085               	movwf	5	;# 
  9999  0F4B  300C               	movlw	12	;# 
 10000  0F4C  0086               	movwf	6	;# 
 10001  0F4D  3001               	movlw	1	;# 
 10002  0F4E  0087               	movwf	7	;# 
 10003  0F4F  3011               	movlw	17	;# 
 10004  0F50  1400               	bsf	0,0	;# 
 10005                           
 10006                           ;mtouch_sensor_scan.c: 354: _delay(0);
 10007  0F51  009D               	movwf	29	;# 
 10008  0F52  1101               	bcf	1,2	;# 
 10009                           
 10010                           ;mtouch_sensor_scan.c: 361: _delay(5);
 10011  0F53  3200               	nop2	;2 cycle nop
 10012  0F54  3200               	nop2	;2 cycle nop
 10013  0F55  0000               	nop
 10014  0F56  0021               	banksel	157	;# 
 10015  0F57  149D               	bsf	29,1	;# 
 10016                           
 10017                           ;mtouch_sensor_scan.c: 368: _delay(3);
 10018  0F58  3200               	nop2	;2 cycle nop
 10019  0F59  0000               	nop
 10020  0F5A  0022               	banksel	270	;# 
 10021  0F5B  100E               	bcf	14,0	;# 
 10022  0F5C  1000               	bcf	0,0	;# 
 10023  0F5D  0008               	return
 10024  0F5E                     __end_of_MTOUCH_CVD_ScanB_1:	
 10025                           
 10026                           	psect	text71
 10027  0F1E                     __ptext71:	
 10028 ;; *************** function _MTOUCH_CVD_ScanB_0 *****************
 10029 ;; Defined at:
 10030 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;		None
 10033 ;; Auto vars:     Size  Location     Type
 10034 ;;		None
 10035 ;; Return value:  Size  Location     Type
 10036 ;;                  1    wreg      void 
 10037 ;; Registers used:
 10038 ;;		wreg
 10039 ;; Tracked objects:
 10040 ;;		On entry : 0/0
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;Total ram usage:        0 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; This function calls:
 10051 ;;		Nothing
 10052 ;; This function is called by:
 10053 ;;		_Sensor_Acq_ExecuteScan
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           
 10058                           ;psect for function _MTOUCH_CVD_ScanB_0
 10059  0F1E                     _MTOUCH_CVD_ScanB_0:	
 10060                           
 10061                           ;incstack = 0
 10062                           ; Regs used in _MTOUCH_CVD_ScanB_0: [wreg]
 10063  0F1E  0022               	banksel	268	;# 
 10064  0F1F  100C               	bcf	12,0	;# 
 10065  0F20  0021               	banksel	157	;# 
 10066  0F21  3001               	movlw	1	;# 
 10067  0F22  009D               	movwf	29	;# 
 10068                           
 10069                           ;mtouch_sensor_scan.c: 209: _delay(10);
 10070  0F23  3003               	movlw	3
 10071  0F24                     u208_27:	
 10072  0F24  0B89               	decfsz	9,f
 10073  0F25  2F24               	goto	u208_27
 10074  0F26  0000               	nop
 10075  0F27  308C               	movlw	140	;# 
 10076  0F28  0084               	movwf	4	;# 
 10077  0F29  3000               	movlw	0	;# 
 10078  0F2A  0085               	movwf	5	;# 
 10079  0F2B  300C               	movlw	12	;# 
 10080  0F2C  0086               	movwf	6	;# 
 10081  0F2D  3001               	movlw	1	;# 
 10082  0F2E  0087               	movwf	7	;# 
 10083  0F2F  300D               	movlw	13	;# 
 10084  0F30  1600               	bsf	0,4	;# 
 10085                           
 10086                           ;mtouch_sensor_scan.c: 227: _delay(0);
 10087  0F31  009D               	movwf	29	;# 
 10088  0F32  1101               	bcf	1,2	;# 
 10089                           
 10090                           ;mtouch_sensor_scan.c: 234: _delay(5);
 10091  0F33  3200               	nop2	;2 cycle nop
 10092  0F34  3200               	nop2	;2 cycle nop
 10093  0F35  0000               	nop
 10094  0F36  0021               	banksel	157	;# 
 10095  0F37  149D               	bsf	29,1	;# 
 10096                           
 10097                           ;mtouch_sensor_scan.c: 241: _delay(3);
 10098  0F38  3200               	nop2	;2 cycle nop
 10099  0F39  0000               	nop
 10100  0F3A  0022               	banksel	268	;# 
 10101  0F3B  120C               	bcf	12,4	;# 
 10102  0F3C  1200               	bcf	0,4	;# 
 10103  0F3D  0008               	return
 10104  0F3E                     __end_of_MTOUCH_CVD_ScanB_0:	
 10105                           
 10106                           	psect	text72
 10107  0EFE                     __ptext72:	
 10108 ;; *************** function _MTOUCH_CVD_ScanB_6 *****************
 10109 ;; Defined at:
 10110 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;		None
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;		None
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      void 
 10117 ;; Registers used:
 10118 ;;		wreg
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;Total ram usage:        0 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		_Sensor_Acq_ExecuteScan
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           
 10138                           ;psect for function _MTOUCH_CVD_ScanB_6
 10139  0EFE                     _MTOUCH_CVD_ScanB_6:	
 10140                           
 10141                           ;incstack = 0
 10142                           ; Regs used in _MTOUCH_CVD_ScanB_6: [wreg]
 10143  0EFE  0022               	banksel	268	;# 
 10144  0EFF  108C               	bcf	12,1	;# 
 10145  0F00  0021               	banksel	157	;# 
 10146  0F01  3005               	movlw	5	;# 
 10147  0F02  009D               	movwf	29	;# 
 10148                           
 10149                           ;mtouch_sensor_scan.c: 971: _delay(10);
 10150  0F03  3003               	movlw	3
 10151  0F04                     u209_27:	
 10152  0F04  0B89               	decfsz	9,f
 10153  0F05  2F04               	goto	u209_27
 10154  0F06  0000               	nop
 10155  0F07  308C               	movlw	140	;# 
 10156  0F08  0084               	movwf	4	;# 
 10157  0F09  3000               	movlw	0	;# 
 10158  0F0A  0085               	movwf	5	;# 
 10159  0F0B  300C               	movlw	12	;# 
 10160  0F0C  0086               	movwf	6	;# 
 10161  0F0D  3001               	movlw	1	;# 
 10162  0F0E  0087               	movwf	7	;# 
 10163  0F0F  3001               	movlw	1	;# 
 10164  0F10  1400               	bsf	0,0	;# 
 10165                           
 10166                           ;mtouch_sensor_scan.c: 989: _delay(0);
 10167  0F11  009D               	movwf	29	;# 
 10168  0F12  1101               	bcf	1,2	;# 
 10169                           
 10170                           ;mtouch_sensor_scan.c: 996: _delay(5);
 10171  0F13  3200               	nop2	;2 cycle nop
 10172  0F14  3200               	nop2	;2 cycle nop
 10173  0F15  0000               	nop
 10174  0F16  0021               	banksel	157	;# 
 10175  0F17  149D               	bsf	29,1	;# 
 10176                           
 10177                           ;mtouch_sensor_scan.c: 1003: _delay(3);
 10178  0F18  3200               	nop2	;2 cycle nop
 10179  0F19  0000               	nop
 10180  0F1A  0022               	banksel	268	;# 
 10181  0F1B  100C               	bcf	12,0	;# 
 10182  0F1C  1000               	bcf	0,0	;# 
 10183  0F1D  0008               	return
 10184  0F1E                     __end_of_MTOUCH_CVD_ScanB_6:	
 10185                           
 10186                           	psect	text73
 10187  0EDE                     __ptext73:	
 10188 ;; *************** function _MTOUCH_CVD_ScanA_5 *****************
 10189 ;; Defined at:
 10190 ;;		line 769 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;		None
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;		None
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  1    wreg      void 
 10197 ;; Registers used:
 10198 ;;		wreg
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;Total ram usage:        0 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_Sensor_Acq_ExecuteScan
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           
 10218                           ;psect for function _MTOUCH_CVD_ScanA_5
 10219  0EDE                     _MTOUCH_CVD_ScanA_5:	
 10220                           
 10221                           ;incstack = 0
 10222                           ; Regs used in _MTOUCH_CVD_ScanA_5: [wreg]
 10223  0EDE  0022               	banksel	270	;# 
 10224  0EDF  158E               	bsf	14,3	;# 
 10225  0EE0  0021               	banksel	157	;# 
 10226  0EE1  301D               	movlw	29	;# 
 10227  0EE2  009D               	movwf	29	;# 
 10228                           
 10229                           ;mtouch_sensor_scan.c: 781: _delay(10);
 10230  0EE3  3003               	movlw	3
 10231  0EE4                     u210_27:	
 10232  0EE4  0B89               	decfsz	9,f
 10233  0EE5  2EE4               	goto	u210_27
 10234  0EE6  0000               	nop
 10235  0EE7  308C               	movlw	140	;# 
 10236  0EE8  0084               	movwf	4	;# 
 10237  0EE9  3000               	movlw	0	;# 
 10238  0EEA  0085               	movwf	5	;# 
 10239  0EEB  300C               	movlw	12	;# 
 10240  0EEC  0086               	movwf	6	;# 
 10241  0EED  3001               	movlw	1	;# 
 10242  0EEE  0087               	movwf	7	;# 
 10243  0EEF  3005               	movlw	5	;# 
 10244  0EF0  1480               	bsf	0,1	;# 
 10245                           
 10246                           ;mtouch_sensor_scan.c: 799: _delay(0);
 10247  0EF1  009D               	movwf	29	;# 
 10248  0EF2  1501               	bsf	1,2	;# 
 10249                           
 10250                           ;mtouch_sensor_scan.c: 805: _delay(5);
 10251  0EF3  3200               	nop2	;2 cycle nop
 10252  0EF4  3200               	nop2	;2 cycle nop
 10253  0EF5  0000               	nop
 10254  0EF6  0021               	banksel	157	;# 
 10255  0EF7  149D               	bsf	29,1	;# 
 10256                           
 10257                           ;mtouch_sensor_scan.c: 812: _delay(3);
 10258  0EF8  3200               	nop2	;2 cycle nop
 10259  0EF9  0000               	nop
 10260  0EFA  0022               	banksel	268	;# 
 10261  0EFB  148C               	bsf	12,1	;# 
 10262  0EFC  1080               	bcf	0,1	;# 
 10263  0EFD  0008               	return
 10264  0EFE                     __end_of_MTOUCH_CVD_ScanA_5:	
 10265                           
 10266                           	psect	text74
 10267  0EBE                     __ptext74:	
 10268 ;; *************** function _MTOUCH_CVD_ScanA_4 *****************
 10269 ;; Defined at:
 10270 ;;		line 642 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;		None
 10273 ;; Auto vars:     Size  Location     Type
 10274 ;;		None
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  1    wreg      void 
 10277 ;; Registers used:
 10278 ;;		wreg
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;Total ram usage:        0 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; This function calls:
 10291 ;;		Nothing
 10292 ;; This function is called by:
 10293 ;;		_Sensor_Acq_ExecuteScan
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function _MTOUCH_CVD_ScanA_4
 10299  0EBE                     _MTOUCH_CVD_ScanA_4:	
 10300                           
 10301                           ;incstack = 0
 10302                           ; Regs used in _MTOUCH_CVD_ScanA_4: [wreg]
 10303  0EBE  0022               	banksel	270	;# 
 10304  0EBF  150E               	bsf	14,2	;# 
 10305  0EC0  0021               	banksel	157	;# 
 10306  0EC1  3019               	movlw	25	;# 
 10307  0EC2  009D               	movwf	29	;# 
 10308                           
 10309                           ;mtouch_sensor_scan.c: 654: _delay(10);
 10310  0EC3  3003               	movlw	3
 10311  0EC4                     u211_27:	
 10312  0EC4  0B89               	decfsz	9,f
 10313  0EC5  2EC4               	goto	u211_27
 10314  0EC6  0000               	nop
 10315  0EC7  308E               	movlw	142	;# 
 10316  0EC8  0084               	movwf	4	;# 
 10317  0EC9  3000               	movlw	0	;# 
 10318  0ECA  0085               	movwf	5	;# 
 10319  0ECB  300C               	movlw	12	;# 
 10320  0ECC  0086               	movwf	6	;# 
 10321  0ECD  3001               	movlw	1	;# 
 10322  0ECE  0087               	movwf	7	;# 
 10323  0ECF  301D               	movlw	29	;# 
 10324  0ED0  1580               	bsf	0,3	;# 
 10325                           
 10326                           ;mtouch_sensor_scan.c: 672: _delay(0);
 10327  0ED1  009D               	movwf	29	;# 
 10328  0ED2  1501               	bsf	1,2	;# 
 10329                           
 10330                           ;mtouch_sensor_scan.c: 678: _delay(5);
 10331  0ED3  3200               	nop2	;2 cycle nop
 10332  0ED4  3200               	nop2	;2 cycle nop
 10333  0ED5  0000               	nop
 10334  0ED6  0021               	banksel	157	;# 
 10335  0ED7  149D               	bsf	29,1	;# 
 10336                           
 10337                           ;mtouch_sensor_scan.c: 685: _delay(3);
 10338  0ED8  3200               	nop2	;2 cycle nop
 10339  0ED9  0000               	nop
 10340  0EDA  0022               	banksel	270	;# 
 10341  0EDB  158E               	bsf	14,3	;# 
 10342  0EDC  1180               	bcf	0,3	;# 
 10343  0EDD  0008               	return
 10344  0EDE                     __end_of_MTOUCH_CVD_ScanA_4:	
 10345                           
 10346                           	psect	text75
 10347  0E9E                     __ptext75:	
 10348 ;; *************** function _MTOUCH_CVD_ScanA_3 *****************
 10349 ;; Defined at:
 10350 ;;		line 515 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;		None
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;		None
 10355 ;; Return value:  Size  Location     Type
 10356 ;;                  1    wreg      void 
 10357 ;; Registers used:
 10358 ;;		wreg
 10359 ;; Tracked objects:
 10360 ;;		On entry : 0/0
 10361 ;;		On exit  : 0/0
 10362 ;;		Unchanged: 0/0
 10363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;Total ram usage:        0 bytes
 10369 ;; Hardware stack levels used:    1
 10370 ;; This function calls:
 10371 ;;		Nothing
 10372 ;; This function is called by:
 10373 ;;		_Sensor_Acq_ExecuteScan
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           
 10378                           ;psect for function _MTOUCH_CVD_ScanA_3
 10379  0E9E                     _MTOUCH_CVD_ScanA_3:	
 10380                           
 10381                           ;incstack = 0
 10382                           ; Regs used in _MTOUCH_CVD_ScanA_3: [wreg]
 10383  0E9E  0022               	banksel	270	;# 
 10384  0E9F  148E               	bsf	14,1	;# 
 10385  0EA0  0021               	banksel	157	;# 
 10386  0EA1  3015               	movlw	21	;# 
 10387  0EA2  009D               	movwf	29	;# 
 10388                           
 10389                           ;mtouch_sensor_scan.c: 527: _delay(10);
 10390  0EA3  3003               	movlw	3
 10391  0EA4                     u212_27:	
 10392  0EA4  0B89               	decfsz	9,f
 10393  0EA5  2EA4               	goto	u212_27
 10394  0EA6  0000               	nop
 10395  0EA7  308E               	movlw	142	;# 
 10396  0EA8  0084               	movwf	4	;# 
 10397  0EA9  3000               	movlw	0	;# 
 10398  0EAA  0085               	movwf	5	;# 
 10399  0EAB  300C               	movlw	12	;# 
 10400  0EAC  0086               	movwf	6	;# 
 10401  0EAD  3001               	movlw	1	;# 
 10402  0EAE  0087               	movwf	7	;# 
 10403  0EAF  3019               	movlw	25	;# 
 10404  0EB0  1500               	bsf	0,2	;# 
 10405                           
 10406                           ;mtouch_sensor_scan.c: 545: _delay(0);
 10407  0EB1  009D               	movwf	29	;# 
 10408  0EB2  1501               	bsf	1,2	;# 
 10409                           
 10410                           ;mtouch_sensor_scan.c: 551: _delay(5);
 10411  0EB3  3200               	nop2	;2 cycle nop
 10412  0EB4  3200               	nop2	;2 cycle nop
 10413  0EB5  0000               	nop
 10414  0EB6  0021               	banksel	157	;# 
 10415  0EB7  149D               	bsf	29,1	;# 
 10416                           
 10417                           ;mtouch_sensor_scan.c: 558: _delay(3);
 10418  0EB8  3200               	nop2	;2 cycle nop
 10419  0EB9  0000               	nop
 10420  0EBA  0022               	banksel	270	;# 
 10421  0EBB  150E               	bsf	14,2	;# 
 10422  0EBC  1100               	bcf	0,2	;# 
 10423  0EBD  0008               	return
 10424  0EBE                     __end_of_MTOUCH_CVD_ScanA_3:	
 10425                           
 10426                           	psect	text76
 10427  0E7E                     __ptext76:	
 10428 ;; *************** function _MTOUCH_CVD_ScanA_2 *****************
 10429 ;; Defined at:
 10430 ;;		line 388 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;		None
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;		None
 10435 ;; Return value:  Size  Location     Type
 10436 ;;                  1    wreg      void 
 10437 ;; Registers used:
 10438 ;;		wreg
 10439 ;; Tracked objects:
 10440 ;;		On entry : 0/0
 10441 ;;		On exit  : 0/0
 10442 ;;		Unchanged: 0/0
 10443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;Total ram usage:        0 bytes
 10449 ;; Hardware stack levels used:    1
 10450 ;; This function calls:
 10451 ;;		Nothing
 10452 ;; This function is called by:
 10453 ;;		_Sensor_Acq_ExecuteScan
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           
 10458                           ;psect for function _MTOUCH_CVD_ScanA_2
 10459  0E7E                     _MTOUCH_CVD_ScanA_2:	
 10460                           
 10461                           ;incstack = 0
 10462                           ; Regs used in _MTOUCH_CVD_ScanA_2: [wreg]
 10463  0E7E  0022               	banksel	270	;# 
 10464  0E7F  140E               	bsf	14,0	;# 
 10465  0E80  0021               	banksel	157	;# 
 10466  0E81  3011               	movlw	17	;# 
 10467  0E82  009D               	movwf	29	;# 
 10468                           
 10469                           ;mtouch_sensor_scan.c: 400: _delay(10);
 10470  0E83  3003               	movlw	3
 10471  0E84                     u213_27:	
 10472  0E84  0B89               	decfsz	9,f
 10473  0E85  2E84               	goto	u213_27
 10474  0E86  0000               	nop
 10475  0E87  308E               	movlw	142	;# 
 10476  0E88  0084               	movwf	4	;# 
 10477  0E89  3000               	movlw	0	;# 
 10478  0E8A  0085               	movwf	5	;# 
 10479  0E8B  300C               	movlw	12	;# 
 10480  0E8C  0086               	movwf	6	;# 
 10481  0E8D  3001               	movlw	1	;# 
 10482  0E8E  0087               	movwf	7	;# 
 10483  0E8F  3015               	movlw	21	;# 
 10484  0E90  1480               	bsf	0,1	;# 
 10485                           
 10486                           ;mtouch_sensor_scan.c: 418: _delay(0);
 10487  0E91  009D               	movwf	29	;# 
 10488  0E92  1501               	bsf	1,2	;# 
 10489                           
 10490                           ;mtouch_sensor_scan.c: 424: _delay(5);
 10491  0E93  3200               	nop2	;2 cycle nop
 10492  0E94  3200               	nop2	;2 cycle nop
 10493  0E95  0000               	nop
 10494  0E96  0021               	banksel	157	;# 
 10495  0E97  149D               	bsf	29,1	;# 
 10496                           
 10497                           ;mtouch_sensor_scan.c: 431: _delay(3);
 10498  0E98  3200               	nop2	;2 cycle nop
 10499  0E99  0000               	nop
 10500  0E9A  0022               	banksel	270	;# 
 10501  0E9B  148E               	bsf	14,1	;# 
 10502  0E9C  1080               	bcf	0,1	;# 
 10503  0E9D  0008               	return
 10504  0E9E                     __end_of_MTOUCH_CVD_ScanA_2:	
 10505                           
 10506                           	psect	text77
 10507  0E5E                     __ptext77:	
 10508 ;; *************** function _MTOUCH_CVD_ScanA_1 *****************
 10509 ;; Defined at:
 10510 ;;		line 261 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;		None
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;		None
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  1    wreg      void 
 10517 ;; Registers used:
 10518 ;;		wreg
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;Total ram usage:        0 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; This function calls:
 10531 ;;		Nothing
 10532 ;; This function is called by:
 10533 ;;		_Sensor_Acq_ExecuteScan
 10534 ;; This function uses a non-reentrant model
 10535 ;;
 10536                           
 10537                           
 10538                           ;psect for function _MTOUCH_CVD_ScanA_1
 10539  0E5E                     _MTOUCH_CVD_ScanA_1:	
 10540                           
 10541                           ;incstack = 0
 10542                           ; Regs used in _MTOUCH_CVD_ScanA_1: [wreg]
 10543  0E5E  0022               	banksel	268	;# 
 10544  0E5F  160C               	bsf	12,4	;# 
 10545  0E60  0021               	banksel	157	;# 
 10546  0E61  300D               	movlw	13	;# 
 10547  0E62  009D               	movwf	29	;# 
 10548                           
 10549                           ;mtouch_sensor_scan.c: 273: _delay(10);
 10550  0E63  3003               	movlw	3
 10551  0E64                     u214_27:	
 10552  0E64  0B89               	decfsz	9,f
 10553  0E65  2E64               	goto	u214_27
 10554  0E66  0000               	nop
 10555  0E67  308E               	movlw	142	;# 
 10556  0E68  0084               	movwf	4	;# 
 10557  0E69  3000               	movlw	0	;# 
 10558  0E6A  0085               	movwf	5	;# 
 10559  0E6B  300C               	movlw	12	;# 
 10560  0E6C  0086               	movwf	6	;# 
 10561  0E6D  3001               	movlw	1	;# 
 10562  0E6E  0087               	movwf	7	;# 
 10563  0E6F  3011               	movlw	17	;# 
 10564  0E70  1400               	bsf	0,0	;# 
 10565                           
 10566                           ;mtouch_sensor_scan.c: 291: _delay(0);
 10567  0E71  009D               	movwf	29	;# 
 10568  0E72  1501               	bsf	1,2	;# 
 10569                           
 10570                           ;mtouch_sensor_scan.c: 297: _delay(5);
 10571  0E73  3200               	nop2	;2 cycle nop
 10572  0E74  3200               	nop2	;2 cycle nop
 10573  0E75  0000               	nop
 10574  0E76  0021               	banksel	157	;# 
 10575  0E77  149D               	bsf	29,1	;# 
 10576                           
 10577                           ;mtouch_sensor_scan.c: 304: _delay(3);
 10578  0E78  3200               	nop2	;2 cycle nop
 10579  0E79  0000               	nop
 10580  0E7A  0022               	banksel	270	;# 
 10581  0E7B  140E               	bsf	14,0	;# 
 10582  0E7C  1000               	bcf	0,0	;# 
 10583  0E7D  0008               	return
 10584  0E7E                     __end_of_MTOUCH_CVD_ScanA_1:	
 10585                           
 10586                           	psect	text78
 10587  0E3E                     __ptext78:	
 10588 ;; *************** function _MTOUCH_CVD_ScanA_0 *****************
 10589 ;; Defined at:
 10590 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  1    wreg      void 
 10597 ;; Registers used:
 10598 ;;		wreg
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;Total ram usage:        0 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; This function calls:
 10611 ;;		Nothing
 10612 ;; This function is called by:
 10613 ;;		_Sensor_Acq_ExecuteScan
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           
 10618                           ;psect for function _MTOUCH_CVD_ScanA_0
 10619  0E3E                     _MTOUCH_CVD_ScanA_0:	
 10620                           
 10621                           ;incstack = 0
 10622                           ; Regs used in _MTOUCH_CVD_ScanA_0: [wreg]
 10623  0E3E  0022               	banksel	268	;# 
 10624  0E3F  140C               	bsf	12,0	;# 
 10625  0E40  0021               	banksel	157	;# 
 10626  0E41  3001               	movlw	1	;# 
 10627  0E42  009D               	movwf	29	;# 
 10628                           
 10629                           ;mtouch_sensor_scan.c: 146: _delay(10);
 10630  0E43  3003               	movlw	3
 10631  0E44                     u215_27:	
 10632  0E44  0B89               	decfsz	9,f
 10633  0E45  2E44               	goto	u215_27
 10634  0E46  0000               	nop
 10635  0E47  308C               	movlw	140	;# 
 10636  0E48  0084               	movwf	4	;# 
 10637  0E49  3000               	movlw	0	;# 
 10638  0E4A  0085               	movwf	5	;# 
 10639  0E4B  300C               	movlw	12	;# 
 10640  0E4C  0086               	movwf	6	;# 
 10641  0E4D  3001               	movlw	1	;# 
 10642  0E4E  0087               	movwf	7	;# 
 10643  0E4F  300D               	movlw	13	;# 
 10644  0E50  1600               	bsf	0,4	;# 
 10645                           
 10646                           ;mtouch_sensor_scan.c: 164: _delay(0);
 10647  0E51  009D               	movwf	29	;# 
 10648  0E52  1501               	bsf	1,2	;# 
 10649                           
 10650                           ;mtouch_sensor_scan.c: 170: _delay(5);
 10651  0E53  3200               	nop2	;2 cycle nop
 10652  0E54  3200               	nop2	;2 cycle nop
 10653  0E55  0000               	nop
 10654  0E56  0021               	banksel	157	;# 
 10655  0E57  149D               	bsf	29,1	;# 
 10656                           
 10657                           ;mtouch_sensor_scan.c: 177: _delay(3);
 10658  0E58  3200               	nop2	;2 cycle nop
 10659  0E59  0000               	nop
 10660  0E5A  0022               	banksel	268	;# 
 10661  0E5B  160C               	bsf	12,4	;# 
 10662  0E5C  1200               	bcf	0,4	;# 
 10663  0E5D  0008               	return
 10664  0E5E                     __end_of_MTOUCH_CVD_ScanA_0:	
 10665                           
 10666                           	psect	text79
 10667  0E1E                     __ptext79:	
 10668 ;; *************** function _MTOUCH_CVD_ScanA_6 *****************
 10669 ;; Defined at:
 10670 ;;		line 896 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;		None
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;		None
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      void 
 10677 ;; Registers used:
 10678 ;;		wreg
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;Total ram usage:        0 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; This function calls:
 10691 ;;		Nothing
 10692 ;; This function is called by:
 10693 ;;		_Sensor_Acq_ExecuteScan
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           
 10698                           ;psect for function _MTOUCH_CVD_ScanA_6
 10699  0E1E                     _MTOUCH_CVD_ScanA_6:	
 10700                           
 10701                           ;incstack = 0
 10702                           ; Regs used in _MTOUCH_CVD_ScanA_6: [wreg]
 10703  0E1E  0022               	banksel	268	;# 
 10704  0E1F  148C               	bsf	12,1	;# 
 10705  0E20  0021               	banksel	157	;# 
 10706  0E21  3005               	movlw	5	;# 
 10707  0E22  009D               	movwf	29	;# 
 10708                           
 10709                           ;mtouch_sensor_scan.c: 908: _delay(10);
 10710  0E23  3003               	movlw	3
 10711  0E24                     u216_27:	
 10712  0E24  0B89               	decfsz	9,f
 10713  0E25  2E24               	goto	u216_27
 10714  0E26  0000               	nop
 10715  0E27  308C               	movlw	140	;# 
 10716  0E28  0084               	movwf	4	;# 
 10717  0E29  3000               	movlw	0	;# 
 10718  0E2A  0085               	movwf	5	;# 
 10719  0E2B  300C               	movlw	12	;# 
 10720  0E2C  0086               	movwf	6	;# 
 10721  0E2D  3001               	movlw	1	;# 
 10722  0E2E  0087               	movwf	7	;# 
 10723  0E2F  3001               	movlw	1	;# 
 10724  0E30  1400               	bsf	0,0	;# 
 10725                           
 10726                           ;mtouch_sensor_scan.c: 926: _delay(0);
 10727  0E31  009D               	movwf	29	;# 
 10728  0E32  1501               	bsf	1,2	;# 
 10729                           
 10730                           ;mtouch_sensor_scan.c: 932: _delay(5);
 10731  0E33  3200               	nop2	;2 cycle nop
 10732  0E34  3200               	nop2	;2 cycle nop
 10733  0E35  0000               	nop
 10734  0E36  0021               	banksel	157	;# 
 10735  0E37  149D               	bsf	29,1	;# 
 10736                           
 10737                           ;mtouch_sensor_scan.c: 939: _delay(3);
 10738  0E38  3200               	nop2	;2 cycle nop
 10739  0E39  0000               	nop
 10740  0E3A  0022               	banksel	268	;# 
 10741  0E3B  140C               	bsf	12,0	;# 
 10742  0E3C  1000               	bcf	0,0	;# 
 10743  0E3D  0008               	return
 10744  0E3E                     __end_of_MTOUCH_CVD_ScanA_6:	
 10745  007E                     btemp	set	126	;btemp
 10746  007E                     int$flags	set	126
 10747  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    101
    Data        80
    BSS         55
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     33      75
    BANK1            80      0      24
    BANK2            80      0      63
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           32      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Sensor_Scanfrequency_Evaluation@sensor.scanB	const PTR FTN()void  size(2) Largest target is 0
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Scanfrequency_Evaluation@sensor.scanA	const PTR FTN()void  size(2) Largest target is 0
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Button_Service$2010$0	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_Service$2010	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 96
		 -> mtouch_button_init(CODE[96]), 

    __builtin_memcpy$0	PTR void  size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_Baseline_Update@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_Baseline_Initialize@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_Reading_Update_Helper@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_Reading_Update@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_Deviation_Update@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_Tick_helper@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_State_Pressed@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_State_NotPressed@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_State_Initializing@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_Service@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(2) Largest target is 96
		 -> mtouch_button(BIGRAM[96]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E4133,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E4133,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_Scanfrequency_Evaluation@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    Sensor_Service@sensor	PTR struct . size(1) Largest target is 63
		 -> mtouch_sensor(BANK2[63]), 

    S734$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    S734$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_6(), MTOUCH_CVD_ScanB_5(), MTOUCH_CVD_ScanB_4(), MTOUCH_CVD_ScanB_3(), 
		 -> MTOUCH_CVD_ScanB_2(), MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_6(), MTOUCH_CVD_ScanA_5(), MTOUCH_CVD_ScanA_4(), MTOUCH_CVD_ScanA_3(), 
		 -> MTOUCH_CVD_ScanA_2(), MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E4132,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Sensor_Acq_ExecuteScan(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Sensor_Acq_ExecuteScan(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR4_DefaultInterruptHandler(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_ISR->_Sensor_Acq_ExecuteScan
    _Sensor_Acq_ExecuteScan->i1___bmul
    _Sensor_Acq_ExecuteScan->i1_abs

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_TMR2_SetInterruptHandler
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _MTOUCH_Sensor_wasSampled->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10265
                                             30 BANK0      3     3      0
                       _EUSART_Write
            _MTOUCH_Button_isPressed
     _MTOUCH_Sensor_Sampled_ResetAll
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              6     2      4     311
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1787
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    1319
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0     962
                                              8 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0     894
                                              6 BANK0      2     2      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     403
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0     201
                                              7 BANK0      2     2      0
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     294
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0    7745
                                             29 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     232
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   5     5      0     232
                                              4 BANK0      5     5      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   4     2      2     164
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0    2838
                                             27 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       5     5      0    2770
                                             22 BANK0      5     5      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1      53
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     4      0    1938
                                             18 BANK0      4     4      0
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     292
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     1     1      0     110
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     10    10      0     717
                                              8 BANK0     10    10      0
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                             6     6      0     498
                                              2 BANK0      6     6      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_setScanFunction
            _TMR2_LoadPeriodRegister
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_setScanFunction                               1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    4496
                                             27 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       7     7      0    4428
                                             20 BANK0      7     7      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     403
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 4     2      2     565
                                             14 BANK0      4     2      2
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              4     2      2     972
                                             14 BANK0      4     2      2
             _Button_Baseline_Update
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             7     7      0     133
                                              0 BANK0      7     7      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            6     4      2    1071
                                             14 BANK0      6     4      2
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               8     6      2     328
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           6     4      2     545
                                              8 BANK0      6     4      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                2     0      2     829
                                             12 BANK0      2     0      2
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         4     2      2     709
                                              8 BANK0      4     2      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     403
                                              4 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     359
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             16    14      2     256
                                              0 BANK0     16    14      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     409
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0     409
                   Absolute function *
             _Sensor_Acq_ExecuteScan *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Sensor_Acq_ExecuteScan                              4     4      0     409
                                              4 COMMON     4     4      0
                 _MTOUCH_CVD_ScanA_0 *
                 _MTOUCH_CVD_ScanA_1 *
                 _MTOUCH_CVD_ScanA_2 *
                 _MTOUCH_CVD_ScanA_3 *
                 _MTOUCH_CVD_ScanA_4 *
                 _MTOUCH_CVD_ScanA_5 *
                 _MTOUCH_CVD_ScanA_6 *
                 _MTOUCH_CVD_ScanB_0 *
                 _MTOUCH_CVD_ScanB_1 *
                 _MTOUCH_CVD_ScanB_2 *
                 _MTOUCH_CVD_ScanB_3 *
                 _MTOUCH_CVD_ScanB_4 *
                 _MTOUCH_CVD_ScanB_5 *
                 _MTOUCH_CVD_ScanB_6 *
                           i1___bmul
                              i1_abs
 ---------------------------------------------------------------------------------
 (11) i1_abs                                               4     2      2     144
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) i1___bmul                                            4     3      1      87
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_6                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_5                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_4                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_3                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_2                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_1                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_6                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_5                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_4                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_3                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_2                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_1                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Write
   _MTOUCH_Button_isPressed
   _MTOUCH_Sensor_Sampled_ResetAll
     _Sensor_Sampled_Reset
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_setScanFunction
             _TMR2_LoadPeriodRegister
             _TMR2_SetInterruptHandler
             _TMR2_StartTimer
             _TMR2_StopTimer
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_setScanFunction
               _TMR2_LoadPeriodRegister
               _TMR2_SetInterruptHandler
               _TMR2_StartTimer
               _TMR2_StopTimer
           _Sensor_isEnabled
           _Sensor_setActive
           _Sensor_setInactive
           _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
         _Sensor_isEnabled
         _Sensor_setSampled
         ___bmul
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   ___lwmod

 _INTERRUPT_InterruptManager (ROOT)
   _TMR2_ISR
     Absolute function(Fake) *
     _Sensor_Acq_ExecuteScan *
       _MTOUCH_CVD_ScanA_0 *
       _MTOUCH_CVD_ScanA_1 *
       _MTOUCH_CVD_ScanA_2 *
       _MTOUCH_CVD_ScanA_3 *
       _MTOUCH_CVD_ScanA_4 *
       _MTOUCH_CVD_ScanA_5 *
       _MTOUCH_CVD_ScanA_6 *
       _MTOUCH_CVD_ScanB_0 *
       _MTOUCH_CVD_ScanB_1 *
       _MTOUCH_CVD_ScanB_2 *
       _MTOUCH_CVD_ScanB_3 *
       _MTOUCH_CVD_ScanB_4 *
       _MTOUCH_CVD_ScanB_5 *
       _MTOUCH_CVD_ScanB_6 *
       i1___bmul *
       i1_abs *
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     21      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      18       7       30.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              20      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 17 17:38:35 2019

                    __end_of_TMR2_SetInterruptHandler 0C0A                          ?_MTOUCH_Sensor_RawSample_Get 0024  
                                      ___bmul@product 0022                                           __CFG_CP$OFF 0000  
                              _Sensor_setScanFunction 0D5F                                                    l30 07FC  
                     __size_of_Sensor_Acq_ExecuteScan 0087                            __end_of_Sensor_setInactive 0C3F  
                                                 LATA 010C                                           __CFG_LVP$ON 0000  
                                                 LATC 010E                                                   l137 0C1E  
                                                 l540 0398                                                   l535 037B  
                                                 l296 0196                                                   l538 037F  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _PR4 0416                                                   _abs 0C9E  
                      ?_EUSART_SetFramingErrorHandler 0020                                       _TMR2_Initialize 0D01  
                                        __CFG_BORV$LO 0000                                                   wreg 0009  
                                        __CFG_IESO$ON 0000                      ??_MTOUCH_Sensor_Sampled_ResetAll 0021  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 0016  
                   __size_of_MTOUCH_Sensor_Initialize 0013                             ?_MTOUCH_Sensor_Initialize 0070  
                                                INDF0 0000                                                  INDF1 0001  
                                                FSR0H 0005                                                  FSR1H 0007  
                                                FSR0L 0004                                                  FSR1L 0006  
                                  _MTOUCH_CVD_ScanA_0 0E3E                                    _MTOUCH_CVD_ScanA_1 0E5E  
                                  _MTOUCH_CVD_ScanA_2 0E7E                                    _MTOUCH_CVD_ScanA_3 0E9E  
                                  _MTOUCH_CVD_ScanB_0 0F1E                                    _MTOUCH_CVD_ScanA_4 0EBE  
                                  _MTOUCH_CVD_ScanB_1 0F3E                                    _MTOUCH_CVD_ScanA_5 0EDE  
                                  _MTOUCH_CVD_ScanB_2 0F5E                                    _MTOUCH_CVD_ScanA_6 0E1E  
                                  _MTOUCH_CVD_ScanB_3 0F7E                                    _MTOUCH_CVD_ScanB_4 0F9E  
                                  _MTOUCH_CVD_ScanB_5 0FBE                                    _MTOUCH_CVD_ScanB_6 0EFE  
                                                ?_abs 0020                                                  l3032 0699  
                                                l3040 06B3                                                  l3042 06C1  
                                                l2502 0CF2                                                  l2520 033A  
                                                l3312 0739                                                  l2506 0CF8  
                                                l3058 045A                                                  l3154 0DA9  
                                                l3314 0745                                                  l3322 075A  
                                                l3148 0DA0                                                  l3318 0751  
                                                l3168 0CAF                                                  l2632 049E  
                                                l2624 049A                                                  l2616 0487  
                                                l2704 05B0                                                  l2634 04AD  
                                                l2730 0DF7                                                  l3284 07AA  
                                                l2804 00D2                                                  l2716 05E5  
                                                l3364 01C8                                                  l2574 0DE4  
                                                l2806 00DB                                                  l2638 04C2  
                                                l2592 0C9C                                                  l3376 020A  
                                                l2770 0297                                                  l2674 014B  
                                                l2818 04F9                                                  l2746 0D9C  
                                                l2764 027B                                                  l2684 0628  
                                                l2766 0283                                                  l2758 0D57  
                                                l2694 05A6                                                  l2870 0FF2  
                                                l2776 03B3                                                  l2864 0FF0  
                                                l2856 0CBF                                                  l2778 03BA  
                                                l2698 05A8                                                  l2882 07AE  
                                                l2796 0099                                                  TRISA 008C  
                                                TRISC 008E                         ?_Button_Reading_Update_Helper 0028  
                                                u1215 04B4                                                  u1235 0727  
                                                u1315 05DA                                                  _LATA 010C  
                                                u1255 0113                                                  u1415 03E3  
                                                _LATC 010E                                                  u1360 0262  
                                                u1265 015A                                                  u1355 022A  
                                                u1365 025E                                                  u1445 00AF  
                                                u1835 073C                                                  u1780 07A8  
                                                u1855 074B                                                  u1935 0218  
                                                u1865 0752                                                  _PLLR 04D6  
                          Button_State_Pressed@button 002E                                                  _TMR2 001A  
                                                _TMR4 0415                                                  _WPUA 020C  
                                                _WPUC 020E                     __size_of_Sensor_Acq_ExecutePacket 006F  
                           ?_Sensor_Acq_ExecutePacket 0070                                          __CFG_WRT$OFF 0000  
                                       __CFG_FCMEN$ON 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0020                                                  _main 0191  
                __size_of_MTOUCH_Button_InitializeAll 0022                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                  __size_of_MTOUCH_Sensor_InitializeAll 0010  
                                                btemp 007E                                   ?_MTOUCH_CVD_ScanA_0 0070  
                                 ?_MTOUCH_CVD_ScanA_1 0070                                   ?_MTOUCH_CVD_ScanA_2 0070  
                                 ?_MTOUCH_CVD_ScanA_3 0070                                   ?_MTOUCH_CVD_ScanA_4 0070  
                                 ?_MTOUCH_CVD_ScanB_0 0070                                   ?_MTOUCH_CVD_ScanA_5 0070  
                                 ?_MTOUCH_CVD_ScanB_1 0070                                   ?_MTOUCH_CVD_ScanA_6 0070  
                                 ?_MTOUCH_CVD_ScanB_2 0070                                   ?_MTOUCH_CVD_ScanB_3 0070  
                                 ?_MTOUCH_CVD_ScanB_4 0070                                   ?_MTOUCH_CVD_ScanB_5 0070  
                                 ?_MTOUCH_CVD_ScanB_6 0070                                         __CFG_BOREN$ON 0000  
                                                start 0012                                     ___bmul@multiplier 0023  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                                               ADCON0 009D  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1005  
        Sensor_Scanfrequency_Evaluation@frequency_hop 1000                                         __CFG_LPBOR$ON 0000  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 0026  
                       __size_of_Button_State_Pressed 0065                                                 ??_abs 0022  
                         ?_Button_Baseline_Initialize 0028                         ??_MTOUCH_Sensor_RawSample_Get 0026  
                       Sensor_RawSample_Update@sensor 0020                                         __CFG_PLLEN$ON 0000  
                           __size_of_Sensor_isEnabled 000F                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 000B                         __end_of_OSCILLATOR_Initialize 0800  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 002C                                                 ?_main 0070  
                                               _ADRES 009B                                         __CFG_WDTE$OFF 0000  
                                ??_MTOUCH_CVD_ScanA_0 0070                                  ??_MTOUCH_CVD_ScanA_1 0070  
                                ??_MTOUCH_CVD_ScanA_2 0070                                  ??_MTOUCH_CVD_ScanA_3 0070  
                                ??_MTOUCH_CVD_ScanA_4 0070                                  ??_MTOUCH_CVD_ScanB_0 0070  
                                ??_MTOUCH_CVD_ScanA_5 0070                                  ??_MTOUCH_CVD_ScanB_1 0070  
                                ??_MTOUCH_CVD_ScanA_6 0070                                  ??_MTOUCH_CVD_ScanB_2 0070  
                                ??_MTOUCH_CVD_ScanB_3 0070                                  ??_MTOUCH_CVD_ScanB_4 0070  
                                ??_MTOUCH_CVD_ScanB_5 0070                                  ??_MTOUCH_CVD_ScanB_6 0070  
                                               _T2CON 001C                                                 _T4CON 0417  
                             __size_of_Button_Service 0067                                                 i1l227 0010  
                                     __end_of___lwmod 075F                                                 i1l543 02A4  
                                               u153m0 0FEC                                                 _TRISA 008C  
                                               _TRISC 008E                                                 i1_abs 0C81  
                     __size_of_Button_DefaultCallback 0001                                  ??_MTOUCH_needReburst 0020  
                                    __end_of_TMR2_ISR 0C5D                       __size_of_Sensor_DefaultCallback 0001  
                             __size_of_Sensor_Service 0043                 __end_of_MTOUCH_Sensor_Scan_Initialize 0C2D  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0009                         _MTOUCH_Sensor_Scan_Initialize 0C24  
                                      _WDT_Initialize 0BFB                               Sensor_setSampled@sensor 0020  
                                               _state 0041                                _Sensor_Acq_ExecuteScan 02A4  
                                               main@i 003F                      __size_of_Button_State_NotPressed 00A7  
                                    __end_ofi1___bmul 0CDE                                                 pclath 000A  
                                _Sensor_Sampled_Reset 0C48                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 0BF2  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0009  
                              Sensor_isEnabled@sensor 0020                                       __initialization 0014  
                                        __end_of_main 021B                                        ??_EUSART_Write 0020  
                             __end_of_TMR2_Initialize 0D13                           ?_INTERRUPT_InterruptManager 0070  
                    __end_of_MTOUCH_Button_Initialize 0681                              _TMR2_SetInterruptHandler 0C04  
                                              ??_main 003E                               _MTOUCH_Sensor_Calibrate 0BEE  
                             ??_Button_Reading_Update 002E                                                ?i1_abs 0070  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0022                              ?_Button_Deviation_Update 0020  
                              __end_of_WDT_Initialize 0BFF                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0020                     _EUSART_DefaultFramingErrorHandler 0000  
                                              _ADCON0 009D                                                _ADCON1 009E  
                                              _ADCON2 009F                            _EUSART_OverrunErrorHandler 0053  
                __size_of_MTOUCH_Sensor_RawSample_Get 001A                                        __CFG_ZCDDIS$ON 0000  
                                              _ANSELA 018C                                                _ANSELC 018E  
                                              _BORCON 0116                                                _RC1REG 0199  
                                              _RC1STA 019D                                                _RC4PPS 0EA4  
                                              i1l3200 02BE                                                _ODCONA 028C  
                                              i1l3202 02CF                                                _ODCONC 028E  
                                              i1l3212 02FF                                                i1l3220 0318  
                                              i1l3072 0CD5                                                i1l3216 0311  
                                              i1l3218 0315                                                i1l3068 0CCF  
                                              i1l3194 02B2                                                i1l3452 02C7  
                                              i1l3196 02B8                                                u210_27 0EE4  
                                              u211_27 0EC4                                                u203_27 0FC4  
                                              u212_27 0EA4                                                u204_27 0FA4  
                                              u213_27 0E84                                                u205_27 0F84  
                                              u214_27 0E64                                                u206_27 0F64  
                                              u215_27 0E44                                                u207_27 0F44  
                               ?_Sensor_Sampled_Reset 0070                                                u216_27 0E24  
                                              u208_27 0F24                                                u209_27 0F04  
                                              _OSCCON 0099                                                _TX1REG 019A  
                                              _WDTCON 0097                                                _TX1STA 019E  
                   MTOUCH_Button_InitializeAll@button 0028                                                i1abs@a 0070  
                      ??_Button_Reading_Update_Helper 002A                                _Button_DefaultCallback 0BED  
                     __end_of_MTOUCH_Service_Mainloop 0DCD                                        __CFG_PWRTE$OFF 0000  
                              _Sensor_DefaultCallback 0BEF                                         _packet_sample 004F  
                                              ___bmul 0CEF                          Sensor_DefaultCallback@sensor 0020  
                                      __CFG_STVREN$ON 0000                                             ??___lwmod 0024  
                    __end_of_MTOUCH_Button_ServiceAll 0CBD                          _TMR4_DefaultInterruptHandler 0000  
                             _MTOUCH_Sensor_SampleAll 0D9E                          Button_DefaultCallback@button 0020  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 05EA                               ?_Button_Baseline_Update 0020  
                             __end_of_TMR2_StartTimer 0BF5              TMR2_SetInterruptHandler@InterruptHandler 0020  
                     MTOUCH_Sensor_RawSample_Get@name 0027                                     _SYSTEM_Initialize 0D13  
                             __end_of__initialization 0056                   __size_of_Button_Baseline_Initialize 002F  
                      ?_MTOUCH_Sensor_Scan_Initialize 0070                 Sensor_Scanfrequency_Evaluation@sensor 002E  
                                  ?_SYSTEM_Initialize 0070                                   _Button_StateMachine 005A  
                          __end_of_Button_Tick_helper 0786                         MTOUCH_Sensor_Calibrate@sensor 0070  
                                 ___bmul@multiplicand 0020                                         __end_ofi1_abs 0C8F  
                             ?_Sensor_setScanFunction 0070                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 0786                                          __pidataBANK0 0CDE  
                                        __pidataBANK2 06C4                                   ??_SYSTEM_Initialize 002A  
                                           ?_TMR2_ISR 0070                            __end_of_MTOUCH_Button_Tick 07D1  
                    __end_of_MTOUCH_Sensor_Initialize 0D4B                             ??_MTOUCH_Sensor_Calibrate 0020  
                                    _Sensor_isEnabled 0C8F                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 02A4                                             ?i1___bmul 0070  
                            Sensor_setInactive@sensor 0020                                        _Button_Service 0407  
                    __end_of_Sensor_Acq_ExecutePacket 039A                            ?_Button_State_Initializing 002E  
                                Button_Service@button 0039                                        _OPTION_REGbits 0095  
                                             ??i1_abs 0072                        __end_of_Button_Baseline_Update 0191  
                                Sensor_Service@sensor 003A                              _MTOUCH_Button_Initialize 063B  
                     ??_EUSART_SetOverrunErrorHandler 0022                                        _Sensor_Service 0681  
                                    i1___bmul@product 0073                               _Button_State_NotPressed 005A  
                       __size_of_MTOUCH_Sensor_Enable 0013                                    _Sensor_setInactive 0C36  
                           __end_of_SYSTEM_Initialize 0D25                      MTOUCH_Sensor_isCalibrated@sensor 0070  
                              ??_Sensor_Sampled_Reset 0020                                            __pbssBANK0 0041  
                                          __pbssBANK1 00A0                                  __end_of_EUSART_Write 0C24  
                             _TMR2_LoadPeriodRegister 0BFF                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 0C2D                                    Sensor_Service@name 0038  
                               _TMR4_InterruptHandler 007A                            __end_of_mtouch_button_init 0599  
                      __end_of_Sensor_setScanFunction 0D73                                            __pmaintext 0191  
                                             ?___bmul 0020                                       __CFG_PPS1WAY$ON 0000  
                                          ??_TMR2_ISR 0078                        MTOUCH_Sensor_wasSampled@sensor 0025  
                                          __pintentry 0004                                __end_of_Button_Service 046E  
                 __end_of_MTOUCH_Button_InitializeAll 1000                           _MTOUCH_Button_InitializeAll 0FDE  
                 __end_of_MTOUCH_Sensor_InitializeAll 0CCD                           _MTOUCH_Sensor_InitializeAll 0CBD  
                           ??_MTOUCH_Sensor_SampleAll 003B                                            ??i1___bmul 0071  
                     __end_of_Sensor_RawSample_Update 0E01                                  ??_Sensor_setInactive 0020  
                   __size_of_MTOUCH_Sensor_wasSampled 0016                             ?_MTOUCH_Sensor_wasSampled 0070  
                   __end_of_Button_State_Initializing 0407                                __end_of_Sensor_Service 06C4  
                                             _SP1BRGH 019C                                               _SP1BRGL 019B  
                            _MTOUCH_Button_ServiceAll 0CAD                               ?_Sensor_Acq_ExecuteScan 0070  
                       MTOUCH_Sensor_SampleAll@sensor 003C                                               _OSCSTAT 009A  
                                             _OSCTUNE 0098                      __size_of_MTOUCH_Service_Mainloop 0019  
                                             _SLRCONA 030C                                               _SLRCONC 030E  
                        __end_of_Button_State_Pressed 0539                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0022                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0028                                  __size_of_MTOUCH_Tick 0003  
                           ??_MTOUCH_Button_isPressed 0020                                        _packet_counter 007C  
                          ??_TMR2_SetInterruptHandler 0022                               Sensor_Acquisition@retry 0034  
                                     __size_of___bmul 0012                        MTOUCH_Button_Initialize@button 0025  
                                          _last_state 00B0                                               ___lwmod 0732  
                                     ?_Button_Service 0070                                               __ptext1 0732  
                                             __ptext2 0D13                                               __ptext3 0BFB  
                                             __ptext4 0D01                                               __ptext5 0E01  
                                             __ptext6 07F5                                               __ptext7 0C5D  
                                             __ptext8 0CBD                                               __ptext9 0D38  
                         Button_Reading_Update@button 002C                           __size_of_MTOUCH_CVD_ScanA_0 0020  
                         __size_of_MTOUCH_CVD_ScanA_1 0020                           __size_of_MTOUCH_CVD_ScanA_2 0020  
                         __size_of_MTOUCH_CVD_ScanA_3 0020                           __size_of_MTOUCH_CVD_ScanA_4 0020  
                         __size_of_MTOUCH_CVD_ScanB_0 0020                           __size_of_MTOUCH_CVD_ScanA_5 0020  
                         __size_of_MTOUCH_CVD_ScanB_1 0020                           __size_of_MTOUCH_CVD_ScanA_6 0020  
                         __size_of_MTOUCH_CVD_ScanB_2 0020                           __size_of_MTOUCH_CVD_ScanB_3 0020  
                         __size_of_MTOUCH_CVD_ScanB_4 0020                           __size_of_MTOUCH_CVD_ScanB_5 0020  
                         __size_of_MTOUCH_CVD_ScanB_6 0020                              _MTOUCH_Sensor_Initialize 0D38  
                      __end_of_Sensor_Acq_ExecuteScan 032B                                 _OSCILLATOR_Initialize 07F5  
                                           _T2CONbits 001C                                          __size_of_abs 000F  
                           ??_Button_State_NotPressed 0030                                       ?_Sensor_Service 0070  
                                           _T4CONbits 0417                              ??_PIN_MANAGER_Initialize 0020  
                                 i1___bmul@multiplier 0072                        __size_of_Button_Reading_Update 0014  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 0D5F  
                   MTOUCH_Sensor_InitializeAll@sensor 0029                                               _timeout 00A0  
                            _Sensor_Acq_ExecutePacket 032B                                      _callback_sampled 0068  
                           ??_TMR2_LoadPeriodRegister 0020                            __size_of_SYSTEM_Initialize 0012  
                                             clrloop0 0C6A                                      _callback_pressed 0062  
                      MTOUCH_Sensor_Initialize@sensor 0027                                  end_of_initialization 0056  
                             ?_Button_DefaultCallback 0020                 __end_of_EUSART_SetOverrunErrorHandler 0C1C  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 0C16  
                                             init_ram 0C75                                               initloop 0C76  
                             ?_Sensor_DefaultCallback 0020                      __size_of_Button_Deviation_Update 0089  
                                   _EUSART_Initialize 07D1                          ??_MTOUCH_Sensor_isCalibrated 0020  
                                  ?_EUSART_Initialize 0070                   __end_of_MTOUCH_Sensor_RawSample_Get 0DE7  
                         _MTOUCH_Sensor_RawSample_Get 0DCD                                   ??_EUSART_Initialize 0022  
                                    ??_WDT_Initialize 0020                                Sensor_setActive@sensor 0020  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 002F  
                       Button_Deviation_Update@button 0020                                 __size_of_EUSART_Write 0008  
                          MTOUCH_Sensor_Enable@sensor 0025                                   _callback_notPressed 0060  
                 __size_of_MTOUCH_Sensor_isCalibrated 0002                        __end_of_Button_DefaultCallback 0BEE  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 002A  
                                  _sensor_globalFlags 0057                          Sensor_Acq_ExecuteScan@last_a 004B  
                        Sensor_Acq_ExecuteScan@last_b 0049                              __end_of_Sensor_isEnabled 0C9E  
                      __end_of_Sensor_DefaultCallback 0BF0                             __end_of_EUSART_Initialize 07F5  
                        Sensor_Acq_ExecuteScan@result 0076                      __size_of_Sensor_RawSample_Update 001A  
                                  _Sensor_Acquisition 0599                  __end_of_TMR2_DefaultInterruptHandler 0BED  
               __size_of_TMR2_DefaultInterruptHandler 0001                          _TMR2_DefaultInterruptHandler 0BEC  
                                _Button_State_Pressed 04D4                                        __end_of___bmul 0D01  
                          _EUSART_DefaultErrorHandler 0000                                   ?_Sensor_Acquisition 0070  
                          ??_MTOUCH_Button_Initialize 0020                       ??_MTOUCH_Sensor_Scan_Initialize 0020  
                                        _EUSART_Write 0C1C                                     __size_of_TMR2_ISR 000C  
                       Sensor_Acq_ExecutePacket@error 0026                                    _Button_Tick_helper 075F  
                              ?_OSCILLATOR_Initialize 0070                                   MTOUCH_Button_Tick@i 0028  
                            __end_of_Sensor_setActive 0C36                      TMR2_LoadPeriodRegister@periodVal 0020  
                         ??_Button_State_Initializing 0030                                     __size_ofi1___bmul 0011  
                                 start_initialization 0014                               _MTOUCH_Service_Mainloop 0DB4  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 07AC  
                                 ?_Button_Tick_helper 0020                                           __end_of_abs 0CAD  
                                      _TMR2_StopTimer 0BF5                                  ??_Sensor_Acquisition 0032  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 002E  
                      ?_EUSART_SetOverrunErrorHandler 0020                      __end_of_MTOUCH_Sensor_wasSampled 0D9E  
                                ??_Button_Tick_helper 0022                          __end_of_MTOUCH_Sensor_Enable 0D38  
                                        _packet_noise 004D                            _EUSART_FramingErrorHandler 0055  
                                            ??___bmul 0021                                 ?_Button_State_Pressed 002E  
                              _EUSART_SetErrorHandler 0C0A                            ??_MTOUCH_Button_ServiceAll 003B  
                                         __pdataBANK0 005A                                           __pdataBANK2 0120  
                        ??_Button_Baseline_Initialize 002A                                         _sample_period 006A  
                       ?_TMR2_DefaultInterruptHandler 0070                                  ??_MTOUCH_Button_Tick 0024  
                                  _mtouch_button_init 0539                            Sensor_Sampled_Reset@sensor 0020  
                                         __pbssBIGRAM 2390                                __end_of_TMR2_StopTimer 0BF8  
                                         __pbssCOMMON 0078                                             ___latbits 0002  
                                       __pcstackBANK0 0020                              __size_of_TMR2_Initialize 0012  
                      MTOUCH_Button_ServiceAll@button 003C                                   Sensor_Service@error 0039  
                       __size_of_Sensor_Sampled_Reset 0009                            __size_of_EUSART_Initialize 0024  
                             _Button_Deviation_Update 021B                             _Button_State_Initializing 039A  
                  __end_of_MTOUCH_Sensor_isCalibrated 0BF2                            _MTOUCH_Sensor_isCalibrated 0BF0  
                                   _Sensor_setSampled 0C3F                                _PIN_MANAGER_Initialize 0E01  
                                    ??_Button_Service 0034                              ?_MTOUCH_Sensor_Calibrate 0070  
                                  ?_Sensor_setSampled 0070                    Button_Reading_Update_Helper@button 0028  
                          ??_MTOUCH_Sensor_Initialize 0026                                              ?___lwmod 0020  
                                    ??_Sensor_Service 0036                            ??_Sensor_Acq_ExecutePacket 0022  
                        ??_INTERRUPT_InterruptManager 0078                                   ??_Sensor_setSampled 0020  
                           ??_MTOUCH_Service_Mainloop 003D                           __size_of_Sensor_setInactive 0009  
                                            _BAUD1CON 019F                                       ?_TMR2_StopTimer 0070  
                                      __size_ofi1_abs 000E                        Sensor_Acq_ExecutePacket@sensor 0027  
                                       ??_MTOUCH_Tick 0029                             __end_of_Sensor_setSampled 0C48  
              EUSART_SetErrorHandler@interruptHandler 0020                                    _currentScannSensor 007D  
                             _Sensor_RawSample_Update 0DE7                                             clear_ram0 0C69  
                                            _PIE1bits 0091                                              _PIE2bits 0092  
                                   _eusartRxLastError 0059                              __size_of_TMR2_StartTimer 0003  
                               i1___bmul@multiplicand 0070                   __size_of_INTERRUPT_InterruptManager 000E  
                                            _PIR1bits 0011                       ??_EUSART_SetFramingErrorHandler 0022  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0030  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 0D88               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0015  
                      _MTOUCH_Sensor_Sampled_ResetAll 0D73                              ?_MTOUCH_Sensor_SampleAll 0070  
                   _EUSART_DefaultOverrunErrorHandler 0000                                              _TMR2_ISR 0C51  
                            _MTOUCH_Sensor_wasSampled 0D88                                    _mtouch_time_toScan 0058  
                          __end_of_MTOUCH_CVD_ScanA_0 0E5E                            __end_of_MTOUCH_CVD_ScanA_1 0E7E  
                          __end_of_MTOUCH_CVD_ScanA_2 0E9E                            __end_of_MTOUCH_CVD_ScanA_3 0EBE  
                          __end_of_MTOUCH_CVD_ScanA_4 0EDE                            __end_of_MTOUCH_CVD_ScanB_0 0F3E  
                          __end_of_MTOUCH_CVD_ScanA_5 0EFE                            __end_of_MTOUCH_CVD_ScanB_1 0F5E  
                          __end_of_MTOUCH_CVD_ScanA_6 0E3E                            __end_of_MTOUCH_CVD_ScanB_2 0F7E  
                          __end_of_MTOUCH_CVD_ScanB_3 0F9E                            __end_of_MTOUCH_CVD_ScanB_4 0FBE  
                          __end_of_MTOUCH_CVD_ScanB_5 0FDE                            __end_of_MTOUCH_CVD_ScanB_6 0F1E  
                            ??_Button_Baseline_Update 0022                                              i1___bmul 0CCD  
                                          _ADCON0bits 009D                            __end_of_MTOUCH_needReburst 0004  
                      ??_TMR2_DefaultInterruptHandler 0070                     __size_of_TMR2_SetInterruptHandler 0006  
                           ?_TMR2_SetInterruptHandler 0020                                  _MTOUCH_Sensor_Enable 0D25  
                            Button_Tick_helper@button 0020                             ??_Button_Deviation_Update 0022  
                               _Button_Reading_Update 0D4B                              ??_Sensor_setScanFunction 0020  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                   ??_TMR2_Initialize 0022                                   __end_of_MTOUCH_Tick 0BFB  
                                   _MTOUCH_Initialize 0C5D                       __end_of_MTOUCH_Sensor_Calibrate 0BEF  
                                  ??_Sensor_isEnabled 0020                                    ?_MTOUCH_Initialize 0070  
                             ??_OSCILLATOR_Initialize 0020                    __end_of_Button_Baseline_Initialize 0732  
                          _Button_Baseline_Initialize 0703                              Sensor_Acquisition@sensor 0035  
                                 _EUSART_ErrorHandler 0051                                   ??_MTOUCH_Initialize 002A  
                                    __size_of___lwmod 002D                              ?_Button_State_NotPressed 002E  
                                  Button_Service@name 0038                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                          _Sensor_scanA 0066  
                                        _Sensor_scanB 0064                  Sensor_Scanfrequency_Evaluation@retry 0030  
                                  ??_Sensor_setActive 0020                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 0D25                                              __ptext11 0FDE  
                                            __ptext20 075F                                              __ptext12 07D1  
                                            __ptext21 0D73                                              __ptext13 0C16  
                                            __ptext30 0C36                                              __ptext22 0C48  
                                            __ptext14 0C10                                              __ptext31 0C2D  
                                            __ptext23 0D9E                                              __ptext15 0C0A  
                                            __ptext40 0C24                                              __ptext32 0C8F  
                                            __ptext24 0681                                              __ptext16 0DB4  
                                            __ptext41 0CAD                                              __ptext33 046E  
                                            __ptext25 0C3F                                              __ptext17 0002  
                                            __ptext50 0BED                                              __ptext42 0407  
                                            __ptext34 032B                                              __ptext26 0DE7  
                                            __ptext18 0BF8                                              __ptext51 0101  
                                            __ptext43 0D88                                              __ptext35 0BF5  
                                            __ptext27 0BEF                                              __ptext19 07AC  
                                            __ptext52 0703                                              __ptext44 0BF0  
                                            __ptext36 0BF2                                              __ptext28 0599  
                                            __ptext61 0C51                                              __ptext53 0D4B  
                                            __ptext45 005A                                              __ptext37 0C04  
                                            __ptext29 0C9E                                              __ptext70 0F3E  
                                            __ptext62 02A4                                              __ptext54 05EA  
                                            __ptext46 039A                                              __ptext38 0BFF  
                                            __ptext71 0F1E                                              __ptext63 0BEC  
                                            __ptext55 0DCD                                              __ptext47 04D4  
                                            __ptext39 0D5F                                              __ptext72 0EFE  
                                            __ptext64 0C81                                              __ptext56 0CEF  
                                            __ptext48 063B                                              __ptext73 0EDE  
                                            __ptext65 0CCD                                              __ptext57 021B  
                                            __ptext49 0BEE                                              __ptext74 0EBE  
                                            __ptext66 0FBE                                              __ptext58 0786  
                                            __ptext75 0E9E                                              __ptext67 0F9E  
                                            __ptext59 0C1C                                              __ptext76 0E7E  
                                            __ptext68 0F7E                                              __ptext77 0E5E  
                                            __ptext69 0F5E                                              __ptext78 0E3E  
                                            __ptext79 0E1E                             __end_of_MTOUCH_Initialize 0C69  
                           ??_Sensor_RawSample_Update 0020                   Sensor_Acq_ExecutePacket@ADCON0_temp 0023  
                 Sensor_Acq_ExecutePacket@ADCON1_temp 0024                   Sensor_Acq_ExecutePacket@ADCON2_temp 0025  
                          __size_of_Sensor_setSampled 0009                                         __size_of_main 008A  
                     __end_of_MTOUCH_Sensor_SampleAll 0DB4                      Sensor_Scanfrequency_Evaluation@i 0031  
                             ?_EUSART_SetErrorHandler 0020                                            _RC1STAbits 019D  
       EUSART_SetOverrunErrorHandler@interruptHandler 0020                          Sensor_setScanFunction@sensor 0020  
                                            int$flags 007E                              ??_Sensor_Acq_ExecuteScan 0074  
                  __size_of_Button_State_Initializing 006D                                     ??_TMR2_StartTimer 0020  
                  __end_of_INTERRUPT_InterruptManager 0012                            _INTERRUPT_InterruptManager 0004  
               __end_of_EUSART_SetFramingErrorHandler 0C16                __size_of_EUSART_SetFramingErrorHandler 0006  
                       _EUSART_SetFramingErrorHandler 0C10                       __size_of_Button_Baseline_Update 0090  
                        ?_MTOUCH_Button_InitializeAll 0070                          ?_MTOUCH_Sensor_InitializeAll 0070  
                                       _mtouch_button 2390                                            _INTCONbits 000B  
                                       _mtouch_sensor 0120                       __end_of_MTOUCH_Button_isPressed 07AC  
                                         _MTOUCH_Tick 0BF8                                ?_Button_Reading_Update 002C  
                    Button_Deviation_Update@deviation 002C                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0024                     __size_of_MTOUCH_Button_Initialize 0046  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 0051                       __size_of_Sensor_setScanFunction 0014  
                                    ___lwmod@dividend 0022               __end_of_Sensor_Scanfrequency_Evaluation 04D4  
            __size_of_Sensor_Scanfrequency_Evaluation 0066                     ??_Sensor_Scanfrequency_Evaluation 0028  
                    ?_Sensor_Scanfrequency_Evaluation 0070                       _Sensor_Scanfrequency_Evaluation 046E  
                             ?_PIN_MANAGER_Initialize 0070                        __end_of_EUSART_SetErrorHandler 0C10  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                         __size_of_Button_Tick_helper 0027                       __end_of_Button_State_NotPressed 0101  
       EUSART_SetFramingErrorHandler@interruptHandler 0020                          __end_of_Sensor_Sampled_Reset 0C51  
                                    ??_TMR2_StopTimer 0020                       __end_of_TMR2_LoadPeriodRegister 0C04  
                         __size_of_MTOUCH_Button_Tick 0025                                         __pstringtext1 1000  
                                       __pstringtext2 0539                         ??_MTOUCH_Button_InitializeAll 0027  
                            ??_Button_DefaultCallback 0021                                       ___lwmod@divisor 0020  
                       ??_MTOUCH_Sensor_InitializeAll 0028                      __size_of_MTOUCH_Sensor_Calibrate 0001  
                                     ___lwmod@counter 0025                                ??_MTOUCH_Sensor_Enable 0024  
                            ??_Sensor_DefaultCallback 0021                  __end_of_Button_Reading_Update_Helper 063B  
               __size_of_Button_Reading_Update_Helper 0051                          _Button_Reading_Update_Helper 05EA  
                                          _TX1STAbits 019E                     __size_of_MTOUCH_Button_ServiceAll 0010  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 002E  
                                  EUSART_Write@txData 0020                            __size_of_MTOUCH_Initialize 000C  
                      __end_of_PIN_MANAGER_Initialize 0E1E                                _Button_Baseline_Update 0101  
                         MTOUCH_Button_isPressed@name 0024                                 _TMR2_InterruptHandler 0078  
                          ??_MTOUCH_Sensor_wasSampled 0024  
